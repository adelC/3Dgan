!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ARG	get_args.py	/^    ARG = ''$/;"	v
ARGS	get_args.py	/^ARGS = ''$/;"	v
AUTOTUNE	generate.py	/^from tensorflow.data.experimental import AUTOTUNE$/;"	i
AUTOTUNE	main.py	/^from tensorflow.data.experimental import AUTOTUNE$/;"	i
AUTOTUNE	scripts/sara_main.py	/^from tensorflow.data.experimental import AUTOTUNE$/;"	i
Adadelta	keras/AngleTrain3dGAN_hvd.py	/^from keras.optimizers import Adadelta, Adam, RMSprop$/;"	i
Adadelta	keras/AngleTrain3dGAN_hvd_tf2.py	/^from tensorflow.keras.optimizers import Adadelta, Adam, RMSprop$/;"	i
Adadelta	keras/EcalEnergyTrain_hvd.py	/^    from keras.optimizers import Adadelta, Adam, RMSprop$/;"	i
Adadelta	keras/archives/Data_Generators/AllEnergyTrain.py	/^    from keras.optimizers import Adadelta, Adam, RMSprop$/;"	i
Adadelta	keras/archives/Data_Generators/GenEnergyTrain.py	/^    from keras.optimizers import Adadelta, Adam, RMSprop$/;"	i
Adadelta	keras/archives/log/TrainPionslog.py	/^    from keras.optimizers import Adadelta, Adam, RMSprop$/;"	i
Adadelta	keras/archives/log/TrainPionslog_dual.py	/^    from keras.optimizers import Adadelta, Adam, RMSprop$/;"	i
Adadelta	keras/archives/normInit/normalInitTrain.py	/^    from keras.optimizers import Adadelta, Adam, RMSprop$/;"	i
Adadelta	keras/archives/train/TrainChPions.py	/^    from keras.optimizers import Adadelta, Adam, RMSprop$/;"	i
Adadelta	keras/archives/train/Train_rootfit_scaled_2D.py	/^    from keras.optimizers import Adadelta, Adam, RMSprop$/;"	i
Adadelta	keras/archives/train/Train_single_pass.py	/^    from keras.optimizers import Adadelta, Adam, RMSprop$/;"	i
Adadelta	keras/archives/train/particle3Dtrain.py	/^    from keras.optimizers import Adadelta, Adam, RMSprop$/;"	i
Adadelta	keras/paramScan/HyperParameterScan.py	/^from keras.optimizers import Adadelta, Adam, RMSprop$/;"	i
Adadelta	keras/paramScan/HyperParameterScan_multi.py	/^from keras.optimizers import Adadelta, Adam, RMSprop$/;"	i
Adadelta	keras/paramScan/HyperParameterScan_small.py	/^from keras.optimizers import Adadelta, Adam, RMSprop$/;"	i
Adadelta	keras/paramScan/TestingObjective.py	/^from keras.optimizers import Adadelta, Adam, RMSprop$/;"	i
Adadelta	keras/test.py	/^    from keras.optimizers import Adadelta, Adam, RMSprop$/;"	i
Adam	keras/AngleTrain3dGAN_hvd.py	/^from keras.optimizers import Adadelta, Adam, RMSprop$/;"	i
Adam	keras/AngleTrain3dGAN_hvd_tf2.py	/^from tensorflow.keras.optimizers import Adadelta, Adam, RMSprop$/;"	i
Adam	keras/EcalEnergyTrain_hvd.py	/^    from keras.optimizers import Adadelta, Adam, RMSprop$/;"	i
Adam	keras/archives/Data_Generators/AllEnergyTrain.py	/^    from keras.optimizers import Adadelta, Adam, RMSprop$/;"	i
Adam	keras/archives/Data_Generators/GenEnergyTrain.py	/^    from keras.optimizers import Adadelta, Adam, RMSprop$/;"	i
Adam	keras/archives/log/TrainPionslog.py	/^    from keras.optimizers import Adadelta, Adam, RMSprop$/;"	i
Adam	keras/archives/log/TrainPionslog_dual.py	/^    from keras.optimizers import Adadelta, Adam, RMSprop$/;"	i
Adam	keras/archives/normInit/normalInitTrain.py	/^    from keras.optimizers import Adadelta, Adam, RMSprop$/;"	i
Adam	keras/archives/train/TrainChPions.py	/^    from keras.optimizers import Adadelta, Adam, RMSprop$/;"	i
Adam	keras/archives/train/Train_rootfit_scaled_2D.py	/^    from keras.optimizers import Adadelta, Adam, RMSprop$/;"	i
Adam	keras/archives/train/Train_single_pass.py	/^    from keras.optimizers import Adadelta, Adam, RMSprop$/;"	i
Adam	keras/archives/train/particle3Dtrain.py	/^    from keras.optimizers import Adadelta, Adam, RMSprop$/;"	i
Adam	keras/paramScan/HyperParameterScan.py	/^from keras.optimizers import Adadelta, Adam, RMSprop$/;"	i
Adam	keras/paramScan/HyperParameterScan_multi.py	/^from keras.optimizers import Adadelta, Adam, RMSprop$/;"	i
Adam	keras/paramScan/HyperParameterScan_small.py	/^from keras.optimizers import Adadelta, Adam, RMSprop$/;"	i
Adam	keras/paramScan/TestingObjective.py	/^from keras.optimizers import Adadelta, Adam, RMSprop$/;"	i
Adam	keras/test.py	/^    from keras.optimizers import Adadelta, Adam, RMSprop$/;"	i
Adam	neon/potential_gan.py	/^from neon.optimizers import GradientDescentMomentum, RMSProp, Adam$/;"	i
AddressOf	analysis/h5toroot_evc.py	/^from ROOT import TTree, TFile, AddressOf, gROOT, std, vector$/;"	i
Affine	neon/potential_gan.py	/^from neon.layers import GeneralizedGANCost, Affine, Linear, Sequential, Conv, Deconv, Dropout, Pooling, BatchNorm$/;"	i
AngleGAN	scripts/main.py	/^import horovod as hvd #AngleGAN$/;"	i
ArrayIterator	neon/potential_gan.py	/^from neon.data.dataiterator import ArrayIterator$/;"	i
Axes3D	scripts/gaussian.py	/^from mpl_toolkits.mplot3d import Axes3D$/;"	i
BATCH_SIZE	metrics/fid.py	/^BATCH_SIZE = 64$/;"	v
BatchNorm	neon/potential_gan.py	/^from neon.layers import GeneralizedGANCost, Affine, Linear, Sequential, Conv, Deconv, Dropout, Pooling, BatchNorm$/;"	i
BatchSize	keras/archives/Data_Generators/AllEnergyTrain.py	/^    BatchSize= batch_size$/;"	v
BatchSize	keras/archives/Data_Generators/GenEnergyTrain.py	/^    BatchSize= batch_size$/;"	v
BinLogX	keras/analysis/utils/ROOTutils.py	/^def BinLogX(h):$/;"	f
BinLogX	keras/archives/RootAnalysis_multi_pions.py	/^def BinLogX(h):$/;"	f
BinLogX	scripts/ROOTutils.py	/^def BinLogX(h):$/;"	f
BitFlip	keras/EcalEnergyTrain_hvd.py	/^def BitFlip(x, prob=0.05):$/;"	f
BitFlip	keras/analysis/utils/GANutils.py	/^def BitFlip(x, prob=0.05):$/;"	f
BitFlip	keras/archives/log/TrainPionslog.py	/^def BitFlip(x, prob=0.05):$/;"	f
BitFlip	keras/archives/log/TrainPionslog_dual.py	/^def BitFlip(x, prob=0.05):$/;"	f
BitFlip	keras/archives/train/TrainChPions.py	/^def BitFlip(x, prob=0.05):$/;"	f
BitFlip	keras/archives/train/Train_rootfit_scaled_2D.py	/^def BitFlip(x, prob=0.05):$/;"	f
BitFlip	keras/archives/train/Train_single_pass.py	/^def BitFlip(x, prob=0.05):$/;"	f
BitFlip	keras/test.py	/^def BitFlip(x, prob=0.05):$/;"	f
BitFlip	scripts/GANutils.py	/^def BitFlip(x, prob=0.05):$/;"	f
CallbackList	keras/AngleTrain3dGAN_hvd.py	/^from keras.callbacks import CallbackList$/;"	i
CallbackList	keras/EcalEnergyTrain_hvd.py	/^from keras.callbacks import CallbackList$/;"	i
CallbackList	keras/test.py	/^from keras.callbacks import CallbackList$/;"	i
Callbacks	neon/gan3D.py	/^from neon.callbacks.callbacks import Callbacks, GANCostCallback$/;"	i
Callbacks	neon/potential_gan.py	/^from neon.callbacks.callbacks import Callbacks, GANCostCallback$/;"	i
Caltech	keras/AngleTrain3dGAN_hvd.py	/^    import setGPU #if Caltech$/;"	i
Caltech	keras/AngleTrain3dGAN_hvd_tf2.py	/^    import setGPU #if Caltech$/;"	i
Caltech	keras/archives/log/TrainPionslog.py	/^import setGPU #if Caltech$/;"	i
Caltech	keras/archives/log/TrainPionslog_dual.py	/^import setGPU #if Caltech$/;"	i
Caltech	keras/archives/train/TrainChPions.py	/^import setGPU #if Caltech$/;"	i
Caltech	keras/archives/train/Train_single_pass.py	/^import setGPU #if Caltech$/;"	i
Caltech	plot.py	/^    import setGPU #if Caltech$/;"	i
Categorical	keras/paramScan/HyperParameterScan.py	/^from skopt.space import Real, Integer, Categorical$/;"	i
Categorical	keras/paramScan/HyperParameterScan_multi.py	/^from skopt.space import Real, Integer, Categorical$/;"	i
Categorical	keras/paramScan/HyperParameterScan_small.py	/^from skopt.space import Real, Integer, Categorical$/;"	i
Common	keras/analysis/RootAnalysis.py	/^from utils.GANutils import perform_calculations_multi, safe_mkdir #Common functions from GANutils.py$/;"	i
Conv	neon/gan3D.py	/^from neon.layers import GeneralizedGANCost, Sequential, Conv, Deconv, Dropout, Pooling$/;"	i
Conv	neon/potential_gan.py	/^from neon.layers import GeneralizedGANCost, Affine, Linear, Sequential, Conv, Deconv, Dropout, Pooling, BatchNorm$/;"	i
Conv3D	keras/AngleArch3dGAN.py	/^from keras.layers.convolutional import (UpSampling3D, Conv3D, ZeroPadding3D,$/;"	i
Conv3D	keras/AngleArch3dGAN_tf2.py	/^from tensorflow.keras.layers import (UpSampling3D, Conv3D, ZeroPadding3D,$/;"	i
Conv3D	keras/EcalEnergyGan.py	/^from keras.layers.convolutional import (UpSampling3D, Conv3D, ZeroPadding3D,$/;"	i
Conv3D	keras/archives/architectures_tested/arch10.py	/^from keras.layers.convolutional import (UpSampling3D, Conv3D, ZeroPadding3D,$/;"	i
Conv3D	keras/archives/architectures_tested/arch11.py	/^from keras.layers.convolutional import (UpSampling3D, Conv3D, ZeroPadding3D,$/;"	i
Conv3D	keras/archives/architectures_tested/arch12.py	/^from keras.layers.convolutional import (UpSampling3D, Conv3D, ZeroPadding3D,$/;"	i
Conv3D	keras/archives/architectures_tested/arch13.py	/^from keras.layers.convolutional import (UpSampling3D, Conv3D, ZeroPadding3D,$/;"	i
Conv3D	keras/archives/architectures_tested/arch14.py	/^from keras.layers.convolutional import (UpSampling3D, Conv3D, ZeroPadding3D,$/;"	i
Conv3D	keras/archives/architectures_tested/arch15.py	/^from keras.layers.convolutional import (UpSampling3D, Conv3D, ZeroPadding3D,$/;"	i
Conv3D	keras/archives/architectures_tested/arch16.py	/^from keras.layers.convolutional import (UpSampling3D, Conv3D, ZeroPadding3D,$/;"	i
Conv3D	keras/archives/architectures_tested/arch7.py	/^from keras.layers.convolutional import (UpSampling3D, Conv3D, ZeroPadding3D,$/;"	i
Conv3D	keras/archives/architectures_tested/arch8.py	/^from keras.layers.convolutional import (UpSampling3D, Conv3D, ZeroPadding3D,$/;"	i
Conv3D	keras/archives/architectures_tested/arch9.py	/^from keras.layers.convolutional import (UpSampling3D, Conv3D, ZeroPadding3D,$/;"	i
Conv3D	keras/archives/architectures_tested/archlayer6.py	/^from keras.layers.convolutional import (UpSampling3D, Conv3D, ZeroPadding3D,$/;"	i
Conv3D	keras/archives/architectures_tested/ecalvegan2.py	/^from keras.layers.convolutional import (UpSampling3D, Conv3D, ZeroPadding3D,$/;"	i
Conv3D	keras/archives/architectures_tested/ecalvegan3.py	/^from keras.layers.convolutional import (UpSampling3D, Conv3D, ZeroPadding3D,$/;"	i
Conv3D	keras/archives/architectures_tested/ecalvegan4.py	/^from keras.layers.convolutional import (UpSampling3D, Conv3D, ZeroPadding3D,$/;"	i
Conv3D	keras/archives/architectures_tested/new_arch.py	/^from keras.layers.convolutional import (UpSampling3D, Conv3D, ZeroPadding3D,$/;"	i
Conv3D	keras/archives/log/EcalEnergyGanlog.py	/^from keras.layers.convolutional import (UpSampling3D, Conv3D, ZeroPadding3D,$/;"	i
Conv3D	keras/archives/normInit/normalInit.py	/^from keras.layers.convolutional import (UpSampling3D, Conv3D, ZeroPadding3D,$/;"	i
Conv3D	keras/paramScan/HyperParameterScan.py	/^from keras.layers.convolutional import (UpSampling3D, Conv3D, ZeroPadding3D,$/;"	i
Conv3D	keras/paramScan/HyperParameterScan_multi.py	/^from keras.layers.convolutional import (UpSampling3D, Conv3D, ZeroPadding3D,$/;"	i
Conv3D	keras/paramScan/HyperParameterScan_small.py	/^from keras.layers.convolutional import (UpSampling3D, Conv3D, ZeroPadding3D,$/;"	i
Conv3D	keras/paramScan/TestingObjective.py	/^from keras.layers.convolutional import (UpSampling3D, Conv3D, ZeroPadding3D,$/;"	i
Conv3D	networks/AngleGAN/discriminator.py	/^from keras.layers.convolutional import (UpSampling3D, Conv3D, ZeroPadding3D,$/;"	i
Conv3D	networks/AngleGAN/generator.py	/^from keras.layers.convolutional import (UpSampling3D, Conv3D, ZeroPadding3D,$/;"	i
D_layers	neon/gan3D.py	/^D_layers = [Conv((5, 5, 5, 32), **conv1),$/;"	v
D_layers	neon/potential_gan.py	/^D_layers = [$/;"	v
Data	keras/eval.py	/^Data = Data[:num_events]$/;"	v
Data	keras/generate_pred.py	/^Data = Data[:num_events]$/;"	v
Data	keras/misc/Gen_ecalRatio_multi.py	/^Data = np.sum(X, axis=(1, 2, 3))$/;"	v
Data	keras/misc/Gen_ecalRatio_stat.py	/^Data = np.sum(X, axis=(1, 2, 3))$/;"	v
Data	keras/misc/Gen_ecalfit2.py	/^Data = np.sum(X, axis=(1, 2, 3))$/;"	v
Data	keras/misc/ecal_primary.py	/^Data = np.sum(X, axis=(1, 2, 3))$/;"	v
Data	keras/misc/root_fit.py	/^Data = np.sum(X, axis=(1, 2, 3))$/;"	v
Deconv	neon/gan3D.py	/^from neon.layers import GeneralizedGANCost, Sequential, Conv, Deconv, Dropout, Pooling$/;"	i
Deconv	neon/potential_gan.py	/^from neon.layers import GeneralizedGANCost, Affine, Linear, Sequential, Conv, Deconv, Dropout, Pooling, BatchNorm$/;"	i
Dense	keras/AngleArch3dGAN.py	/^from keras.layers import (Input, Dense, Reshape, Flatten, Lambda, merge,$/;"	i
Dense	keras/AngleArch3dGAN_tf2.py	/^from tensorflow.keras.layers import (Input, Dense, Reshape, Flatten, Lambda,$/;"	i
Dense	keras/EcalEnergyGan.py	/^from keras.layers import (Input, Dense, Reshape, Flatten, Lambda, merge,$/;"	i
Dense	keras/archives/architectures_tested/arch10.py	/^from keras.layers import (Input, Dense, Reshape, Flatten, Lambda, merge,$/;"	i
Dense	keras/archives/architectures_tested/arch11.py	/^from keras.layers import (Input, Dense, Reshape, Flatten, Lambda, merge,$/;"	i
Dense	keras/archives/architectures_tested/arch12.py	/^from keras.layers import (Input, Dense, Reshape, Flatten, Lambda, merge,$/;"	i
Dense	keras/archives/architectures_tested/arch13.py	/^from keras.layers import (Input, Dense, Reshape, Flatten, Lambda, merge,$/;"	i
Dense	keras/archives/architectures_tested/arch14.py	/^from keras.layers import (Input, Dense, Reshape, Flatten, Lambda, merge,$/;"	i
Dense	keras/archives/architectures_tested/arch15.py	/^from keras.layers import (Input, Dense, Reshape, Flatten, Lambda, merge,$/;"	i
Dense	keras/archives/architectures_tested/arch16.py	/^from keras.layers import (Input, Dense, Reshape, Flatten, Lambda, merge,$/;"	i
Dense	keras/archives/architectures_tested/arch7.py	/^from keras.layers import (Input, Dense, Reshape, Flatten, Lambda, merge,$/;"	i
Dense	keras/archives/architectures_tested/arch8.py	/^from keras.layers import (Input, Dense, Reshape, Flatten, Lambda, merge,$/;"	i
Dense	keras/archives/architectures_tested/arch9.py	/^from keras.layers import (Input, Dense, Reshape, Flatten, Lambda, merge,$/;"	i
Dense	keras/archives/architectures_tested/archlayer6.py	/^from keras.layers import (Input, Dense, Reshape, Flatten, Lambda, merge,$/;"	i
Dense	keras/archives/architectures_tested/ecalvegan2.py	/^from keras.layers import (Input, Dense, Reshape, Flatten, Lambda, merge,$/;"	i
Dense	keras/archives/architectures_tested/ecalvegan3.py	/^from keras.layers import (Input, Dense, Reshape, Flatten, Lambda, merge,$/;"	i
Dense	keras/archives/architectures_tested/ecalvegan4.py	/^from keras.layers import (Input, Dense, Reshape, Flatten, Lambda, merge,$/;"	i
Dense	keras/archives/architectures_tested/new_arch.py	/^from keras.layers import (Input, Dense, Reshape, Flatten, Lambda, merge,$/;"	i
Dense	keras/archives/log/EcalEnergyGanlog.py	/^from keras.layers import (Input, Dense, Reshape, Flatten, Lambda, merge,$/;"	i
Dense	keras/archives/normInit/normalInit.py	/^from keras.layers import (Input, Dense, Reshape, Flatten, Lambda, merge,$/;"	i
Dense	keras/paramScan/HyperParameterScan.py	/^from keras.layers import (Input, Dense, Reshape, Flatten, Lambda, merge,$/;"	i
Dense	keras/paramScan/HyperParameterScan_multi.py	/^from keras.layers import (Input, Dense, Reshape, Flatten, Lambda, merge,$/;"	i
Dense	keras/paramScan/HyperParameterScan_small.py	/^from keras.layers import (Input, Dense, Reshape, Flatten, Lambda, merge,$/;"	i
Dense	keras/paramScan/TestingObjective.py	/^from keras.layers import (Input, Dense, Reshape, Flatten, Lambda, merge,$/;"	i
Dense	networks/AngleGAN/discriminator.py	/^from keras.layers import (Input, Dense, Reshape, Flatten, Lambda, merge,$/;"	i
Dense	networks/AngleGAN/generator.py	/^from keras.layers import (Input, Dense, Reshape, Flatten, Lambda, merge,$/;"	i
DivideFiles	keras/EcalEnergyTrain_hvd.py	/^def DivideFiles(FileSearch="\/data\/LCD\/*\/*.h5", nEvents=200000, EventsperFile = 10000, Fractions=[.9,.1],datasetnames=["ECAL","HCAL"],Particles=[],MaxFiles=-1):$/;"	f
DivideFiles	keras/analysis/utils/GANutils.py	/^def DivideFiles(FileSearch="\/data\/LCD\/*\/*.h5",$/;"	f
DivideFiles	keras/archives/Data_Generators/AllEnergyTrain.py	/^def DivideFiles(FileSearch="\/data\/LCD\/*\/*.h5",Fractions=[.9,.1],datasetnames=["ECAL","HCAL"],Particles=[],MaxFiles=-1):$/;"	f
DivideFiles	keras/archives/Data_Generators/GenEnergyTrain.py	/^def DivideFiles(FileSearch="\/data\/LCD\/*\/*.h5",Fractions=[.9,.1],datasetnames=["ECAL","HCAL"],Particles=[],MaxFiles=-1):$/;"	f
DivideFiles	keras/archives/RootAnalysis_multi_pions.py	/^def DivideFiles(FileSearch="\/data\/LCD\/*\/*.h5", nEvents=400000, EventsperFile = 10000, Fractions=[.5,.5],datasetnames=["ECAL","HCAL"],Particles=[],MaxFiles=-1):$/;"	f
DivideFiles	keras/archives/analysis/PythonAnalysis.py	/^def DivideFiles(FileSearch="\/data\/LCD\/*\/*.h5", nEvents=200000, EventsperFile = 10000, Fractions=[.9,.1],datasetnames=["ECAL","HCAL"],Particles=[],MaxFiles=-1):$/;"	f
DivideFiles	keras/archives/log/TrainPionslog.py	/^def DivideFiles(FileSearch="\/data\/LCD\/*\/*.h5", Fractions=[.9,.1],datasetnames=["ECAL","HCAL"],Particles=[],MaxFiles=-1):$/;"	f
DivideFiles	keras/archives/log/TrainPionslog_dual.py	/^def DivideFiles(FileSearch="\/data\/LCD\/*\/*.h5", Fractions=[.9,.1],datasetnames=["ECAL","HCAL"],Particles=[],MaxFiles=-1):$/;"	f
DivideFiles	keras/archives/train/TrainChPions.py	/^def DivideFiles(FileSearch="\/data\/LCD\/*\/*.h5", Fractions=[.9,.1],datasetnames=["ECAL","HCAL"],Particles=[],MaxFiles=-1):$/;"	f
DivideFiles	keras/archives/train/Train_rootfit_scaled_2D.py	/^def DivideFiles(FileSearch="\/data\/LCD\/*\/*.h5", nEvents=200000, EventsperFile = 10000, Fractions=[.9,.1],datasetnames=["ECAL","HCAL"],Particles=[],MaxFiles=-1):$/;"	f
DivideFiles	keras/archives/train/Train_single_pass.py	/^def DivideFiles(FileSearch="\/data\/LCD\/*\/*.h5", nEvents=200000, EventsperFile = 10000, Fractions=[.9,.1],datasetnames=["ECAL","HCAL"],Particles=[],MaxFiles=-1):$/;"	f
DivideFiles	keras/test.py	/^def DivideFiles(FileSearch="\/data\/LCD\/*\/*.h5", nEvents=200000, EventsperFile = 10000, Fractions=[.9,.1],datasetnames=["ECAL","HCAL"],Particles=[],MaxFiles=-1):$/;"	f
DivideFiles	scripts/GANutils.py	/^def DivideFiles(FileSearch="\/data\/LCD\/*\/*.h5",$/;"	f
Dropout	neon/gan3D.py	/^from neon.layers import GeneralizedGANCost, Sequential, Conv, Deconv, Dropout, Pooling$/;"	i
Dropout	neon/gan3D.py	/^from neon.layers.layer import Dropout$/;"	i
Dropout	neon/potential_gan.py	/^from neon.layers import GeneralizedGANCost, Affine, Linear, Sequential, Conv, Deconv, Dropout, Pooling, BatchNorm$/;"	i
Dropout	neon/potential_gan.py	/^from neon.layers.layer import Dropout$/;"	i
ECAL	keras/archives/Data_Generators/AllEnergyTrain.py	/^    ECAL=True$/;"	v
ECAL	keras/archives/Data_Generators/GenEnergyTrain.py	/^    ECAL=True$/;"	v
ECALNorm	keras/archives/Data_Generators/AllEnergyTrain.py	/^    ECALNorm= None$/;"	v
ECALNorm	keras/archives/Data_Generators/GenEnergyTrain.py	/^    ECALNorm= None$/;"	v
ECALShape	keras/archives/Data_Generators/AllEnergyTrain.py	/^    ECALShape= None, 25, 25, 25$/;"	v
ECALShape	keras/archives/Data_Generators/GenEnergyTrain.py	/^    ECALShape= None, 25, 25, 25$/;"	v
EEXIST	analysis/analysis3D.py	/^    from errno import EEXIST$/;"	i
EEXIST	keras/EcalEnergyTrain_hvd.py	/^    from errno import EEXIST$/;"	i
EEXIST	keras/analysis/utils/GANutils.py	/^    from errno import EEXIST$/;"	i
EEXIST	keras/archives/RootAnalysis_multi_pions.py	/^    from errno import EEXIST$/;"	i
EEXIST	keras/archives/analysis/PythonAnalysis.py	/^    from errno import EEXIST$/;"	i
EEXIST	keras/archives/analysis/analysis_fixed_cont.py	/^    from errno import EEXIST$/;"	i
EEXIST	keras/archives/analysis/detailed_analysis_flex.py	/^    from errno import EEXIST$/;"	i
EEXIST	keras/archives/analysis/fixed_analysis_flex.py	/^    from errno import EEXIST$/;"	i
EEXIST	keras/misc/data_info.py	/^    from errno import EEXIST$/;"	i
EEXIST	keras/test.py	/^    from errno import EEXIST$/;"	i
EEXIST	scripts/GANutils.py	/^    from errno import EEXIST$/;"	i
EEXIST	scripts/data_info.py	/^    from errno import EEXIST$/;"	i
Ecalfile	keras/archives/analysis/PythonAnalysis.py	/^   Ecalfile = "ecal_normalized.pdf"$/;"	v
Ecalratiofile	keras/archives/analysis/PythonAnalysis.py	/^   Ecalratiofile = "ecal_ratio.pdf"$/;"	v
Efile	keras/archives/analysis/PythonAnalysis.py	/^   Efile = "error_normalized.pdf"$/;"	v
Eprof	keras/eval.py	/^Eprof = TProfile("Eprof", "Ratio of Ecal and Ep;Ep;Ecal\/Ep", 100, 0, 500)$/;"	v
Eprof	keras/misc/Gen_ecalRatio_multi.py	/^Eprof = TProfile("Eprof", "Ratio of Ecal and Ep;Ep;Ecal\/Ep", 100, 0, 500)$/;"	v
Eprof	keras/misc/Gen_ecalfit2.py	/^Eprof = TProfile("Eprof", "Ratio of Ecal and Ep;Ep;Ecal\/Ep", 100, 0, 5, 0, 3)$/;"	v
EventsperFile	keras/EcalEnergyTrain_hvd.py	/^    EventsperFile = params.nbperfile#Events in a file$/;"	v
EventsperFile	keras/archives/log/TrainPionslog.py	/^    EventsperFile = params.nbperfile#Events in a file$/;"	v
EventsperFile	keras/archives/log/TrainPionslog_dual.py	/^    EventsperFile = params.nbperfile#Events in a file$/;"	v
EventsperFile	keras/archives/train/Train_rootfit_scaled_2D.py	/^    EventsperFile = params.nbperfile#Events in a file$/;"	v
EventsperFile	keras/archives/train/Train_single_pass.py	/^    EventsperFile = params.nbperfile#Events in a file$/;"	v
EventsperFile	keras/test.py	/^    EventsperFile = params.nbperfile#Events in a file$/;"	v
FileSearch	keras/archives/Data_Generators/AllEnergyTrain.py	/^    FileSearch="\/bigdata\/shared\/LCD\/NewV1\/*scan\/*.h5"$/;"	v
FileSearch	keras/archives/Data_Generators/GenEnergyTrain.py	/^    FileSearch="\/bigdata\/shared\/LCD\/NewV1\/*scan\/*.h5"$/;"	v
FillHist2D_wt	keras/analysis/utils/ROOTutils.py	/^def FillHist2D_wt(hist, array):$/;"	f
FillHist2D_wt	scripts/ROOTutils.py	/^def FillHist2D_wt(hist, array):$/;"	f
Flatten	keras/AngleArch3dGAN.py	/^from keras.layers import (Input, Dense, Reshape, Flatten, Lambda, merge,$/;"	i
Flatten	keras/AngleArch3dGAN_tf2.py	/^from tensorflow.keras.layers import (Input, Dense, Reshape, Flatten, Lambda,$/;"	i
Flatten	keras/EcalEnergyGan.py	/^from keras.layers import (Input, Dense, Reshape, Flatten, Lambda, merge,$/;"	i
Flatten	keras/archives/architectures_tested/arch10.py	/^from keras.layers import (Input, Dense, Reshape, Flatten, Lambda, merge,$/;"	i
Flatten	keras/archives/architectures_tested/arch11.py	/^from keras.layers import (Input, Dense, Reshape, Flatten, Lambda, merge,$/;"	i
Flatten	keras/archives/architectures_tested/arch12.py	/^from keras.layers import (Input, Dense, Reshape, Flatten, Lambda, merge,$/;"	i
Flatten	keras/archives/architectures_tested/arch13.py	/^from keras.layers import (Input, Dense, Reshape, Flatten, Lambda, merge,$/;"	i
Flatten	keras/archives/architectures_tested/arch14.py	/^from keras.layers import (Input, Dense, Reshape, Flatten, Lambda, merge,$/;"	i
Flatten	keras/archives/architectures_tested/arch15.py	/^from keras.layers import (Input, Dense, Reshape, Flatten, Lambda, merge,$/;"	i
Flatten	keras/archives/architectures_tested/arch16.py	/^from keras.layers import (Input, Dense, Reshape, Flatten, Lambda, merge,$/;"	i
Flatten	keras/archives/architectures_tested/arch7.py	/^from keras.layers import (Input, Dense, Reshape, Flatten, Lambda, merge,$/;"	i
Flatten	keras/archives/architectures_tested/arch8.py	/^from keras.layers import (Input, Dense, Reshape, Flatten, Lambda, merge,$/;"	i
Flatten	keras/archives/architectures_tested/arch9.py	/^from keras.layers import (Input, Dense, Reshape, Flatten, Lambda, merge,$/;"	i
Flatten	keras/archives/architectures_tested/archlayer6.py	/^from keras.layers import (Input, Dense, Reshape, Flatten, Lambda, merge,$/;"	i
Flatten	keras/archives/architectures_tested/ecalvegan2.py	/^from keras.layers import (Input, Dense, Reshape, Flatten, Lambda, merge,$/;"	i
Flatten	keras/archives/architectures_tested/ecalvegan3.py	/^from keras.layers import (Input, Dense, Reshape, Flatten, Lambda, merge,$/;"	i
Flatten	keras/archives/architectures_tested/ecalvegan4.py	/^from keras.layers import (Input, Dense, Reshape, Flatten, Lambda, merge,$/;"	i
Flatten	keras/archives/architectures_tested/new_arch.py	/^from keras.layers import (Input, Dense, Reshape, Flatten, Lambda, merge,$/;"	i
Flatten	keras/archives/log/EcalEnergyGanlog.py	/^from keras.layers import (Input, Dense, Reshape, Flatten, Lambda, merge,$/;"	i
Flatten	keras/archives/normInit/normalInit.py	/^from keras.layers import (Input, Dense, Reshape, Flatten, Lambda, merge,$/;"	i
Flatten	keras/paramScan/HyperParameterScan.py	/^from keras.layers import (Input, Dense, Reshape, Flatten, Lambda, merge,$/;"	i
Flatten	keras/paramScan/HyperParameterScan_multi.py	/^from keras.layers import (Input, Dense, Reshape, Flatten, Lambda, merge,$/;"	i
Flatten	keras/paramScan/HyperParameterScan_small.py	/^from keras.layers import (Input, Dense, Reshape, Flatten, Lambda, merge,$/;"	i
Flatten	keras/paramScan/TestingObjective.py	/^from keras.layers import (Input, Dense, Reshape, Flatten, Lambda, merge,$/;"	i
Flatten	networks/AngleGAN/discriminator.py	/^from keras.layers import (Input, Dense, Reshape, Flatten, Lambda, merge,$/;"	i
Flatten	networks/AngleGAN/generator.py	/^from keras.layers import (Input, Dense, Reshape, Flatten, Lambda, merge,$/;"	i
GAN	neon/gan3D.py	/^from neon.models.model import GAN$/;"	i
GAN	neon/potential_gan.py	/^from neon.models.model import GAN, Model$/;"	i
GANCost	neon/gan3D.py	/^from neon.transforms import Rectlin, Logistic, GANCost$/;"	i
GANCost	neon/potential_gan.py	/^from neon.transforms import Rectlin, Logistic, GANCost, Tanh$/;"	i
GANCostCallback	neon/gan3D.py	/^from neon.callbacks.callbacks import Callbacks, GANCostCallback$/;"	i
GANCostCallback	neon/potential_gan.py	/^from neon.callbacks.callbacks import Callbacks, GANCostCallback$/;"	i
GANPlotCallback	neon/gan3D.py	/^from neon.callbacks.plotting_callbacks import GANPlotCallback$/;"	i
GANutils	keras/analysis/RootAnalysis.py	/^from utils.GANutils import perform_calculations_multi, safe_mkdir #Common functions from GANutils.py$/;"	i
GData	keras/eval.py	/^  GData = np.sum(generated_images, axis=(1, 2, 3))\/scales[i]$/;"	v
GData	keras/generate_pred.py	/^  GData = np.sum(generated_images, axis=(1, 2, 3))\/scales[i]$/;"	v
GData	keras/misc/Gen_ecalRatio_multi.py	/^   GData = np.sum(generated_images, axis=(1, 2, 3))\/scales[i]$/;"	v
GData	keras/misc/Gen_ecalRatio_stat.py	/^   GData = np.sum(generated_images, axis=(1, 2, 3))\/scales[i]$/;"	v
GData	keras/misc/Gen_ecalfit2.py	/^GData = np.sum(generated_images, axis=(1, 2, 3))$/;"	v
G_layers	neon/gan3D.py	/^G_layers = [Linear(64 * 7 * 7, init=init), # what's about the input volume$/;"	v
G_layers	neon/potential_gan.py	/^G_layers = [$/;"	v
Gan3DTrain	keras/archives/log/TrainPionslog.py	/^def Gan3DTrain(discriminator, generator, datapath, nEvents, WeightsDir, pklfile, mod=0, nb_epochs=30, batch_size=128, latent_size=200, gen_weight=6, aux_weight=0.2, ecal_weight=0.1, lr=0.001, rho=0.9, decay=0.0, g_weights='params_generator_epoch_', d_weights='params_discriminator_epoch_', xscale=1):$/;"	f
Gan3DTrain	keras/archives/log/TrainPionslog_dual.py	/^def Gan3DTrain(discriminator1, generator1, discriminator2, generator2, datapath, nEvents, WeightsDir, pklfile, mod=0, nb_epochs=30, batch_size=128, latent_size=200, gen_weight=6, aux_weight=0.2, ecal_weight=0.1, lr=0.001, rho=0.9, decay=0.0, g_weights='params_generator_epoch_', d_weights='params_discriminator_epoch_', xscale=1):$/;"	f
Gan3DTrain	keras/archives/train/TrainChPions.py	/^def Gan3DTrain(discriminator, generator, datapath, nEvents, WeightsDir, pklfile, particle, limit = 1e-6, mod=0, nb_epochs=30, batch_size=128, latent_size=200, gen_weight=6, aux_weight=0.2, ecal_weight=0.1, lr=0.001, rho=0.9, decay=0.0, g_weights='params_generator_epoch_', d_weights='params_discriminator_epoch_', xscale=1):$/;"	f
Gan3DTrain	keras/archives/train/Train_single_pass.py	/^def Gan3DTrain(discriminator, generator, datapath, EventsperFile, nEvents, WeightsDir, mod=0, nb_epochs=30, batch_size=128, latent_size=200, gen_weight=6, aux_weight=0.2, ecal_weight=0.1, lr=0.001, rho=0.9, decay=0.0, g_weights='params_generator_epoch_', d_weights='params_discriminator_epoch_', xscale=1):$/;"	f
Gan3DTrain2	keras/archives/train/Train_single_pass.py	/^def Gan3DTrain2(discriminator, generator, datapath, EventsperFile, nEvents, WeightsDir, mod=0, nb_epochs=30, batch_size=128, latent_size=200, gen_weight=6, aux_weight=0.2, ecal_weight=0.1, lr=0.001, rho=0.9, decay=0.0, g_weights='params_generator_epoch_', d_weights='params_discriminator_epoch_', xscale=1):$/;"	f
Gan3DTrainAngle	AngleGANTrainingFunction.py	/^def Gan3DTrainAngle(discriminator, generator, opt, datapath, nEvents, WeightsDir, pklfile, global_batch_size, nb_epochs=30, batch_size=128, latent_size=200, loss_weights=[3, 0.1, 25, 0.1, 0.1], lr=0.001, rho=0.9, decay=0.0, g_weights='params_generator_epoch_', d_weights='params_discriminator_epoch_', xscale=1, xpower=1, angscale=1, angtype='theta', yscale=100, thresh=1e-4, analyse=False, resultfile="", energies=[], warmup_epochs=0):$/;"	f
Gan3DTrainAngle	keras/AngleTrain3dGAN_hvd.py	/^def Gan3DTrainAngle(discriminator, generator, opt, datapath, nEvents, WeightsDir, pklfile, global_batch_size, nb_epochs=30, batch_size=128, latent_size=200, loss_weights=[3, 0.1, 25, 0.1, 0.1], lr=0.001, rho=0.9, decay=0.0, g_weights='params_generator_epoch_', d_weights='params_discriminator_epoch_', xscale=1, xpower=1, angscale=1, angtype='theta', yscale=100, thresh=1e-4, analyse=False, resultfile="", energies=[], warmup_epochs=0):$/;"	f
Gan3DTrainAngle	keras/AngleTrain3dGAN_hvd_tf2.py	/^def Gan3DTrainAngle(discriminator, generator, opt, datapath, nEvents, WeightsDir, pklfile, global_batch_size, nb_epochs=30, batch_size=128, latent_size=200, loss_weights=[3, 0.1, 25, 0.1, 0.1], lr=0.001, rho=0.9, decay=0.0, g_weights='params_generator_epoch_', d_weights='params_discriminator_epoch_', xscale=1, xpower=1, angscale=1, angtype='theta', yscale=100, thresh=1e-4, analyse=False, resultfile="", energies=[], warmup_epochs=0):$/;"	f
GanTrain	keras/EcalEnergyTrain_hvd.py	/^def GanTrain(discriminator, generator, opt,run_options, run_metadata, global_batch_size, warmup_epochs, datapath, EventsperFile, nEvents, WeightsDir, resultfile, energies,mod=0, nb_epochs=30, batch_size=128, latent_size=128, gen_weight=6, aux_weight=0.2, ecal_weight=0.1, lr=0.001, rho=0.9, decay=0.0, g_weights='params_generator_epoch_', d_weights='params_generator_epoch_', xscale=1, verbose=True, keras_dformat='channels_last', analysis=True):$/;"	f
GanTrain3D	keras/archives/train/Train_rootfit_scaled_2D.py	/^def GanTrain3D(discriminator, generator, datapath, EventsperFile, nEvents, WeightsDir, mod=0, nb_epochs=30, batch_size=128, latent_size=200, gen_weight=6, aux_weight=0.2, ecal_weight=0.1, lr=0.001, rho=0.9, decay=0.0, g_weights='params_generator_epoch_', d_weights='params_generator_epoch_', xscale=1):$/;"	f
Gaussian	neon/gan3D.py	/^from neon.initializers import Gaussian$/;"	i
Gaussian	neon/potential_gan.py	/^from neon.initializers import Gaussian$/;"	i
GaussianProcessRegressor	keras/paramScan/HyperParameterScan_multi.py	/^from skopt.learning import GaussianProcessRegressor$/;"	i
GeneralizedGANCost	neon/gan3D.py	/^from neon.layers import GeneralizedGANCost, Sequential, Conv, Deconv, Dropout, Pooling$/;"	i
GeneralizedGANCost	neon/potential_gan.py	/^from neon.layers import GeneralizedGANCost, Affine, Linear, Sequential, Conv, Deconv, Dropout, Pooling, BatchNorm$/;"	i
GenerativeAdversarial	neon/gan3D.py	/^from neon.layers.container import GenerativeAdversarial$/;"	i
GenerativeAdversarial	neon/potential_gan.py	/^from neon.layers.container import GenerativeAdversarial$/;"	i
GeneratorCacher	keras/archives/Data_Generators/AllEnergyTrain.py	/^from adlkit.data_provider.cached_data_providers import GeneratorCacher$/;"	i
GeneratorCacher	keras/archives/Data_Generators/GenEnergyTrain.py	/^from adlkit.data_provider.cached_data_providers import GeneratorCacher$/;"	i
GetAllDataAngle	keras/analysis/utils/GANutils.py	/^def GetAllDataAngle(datafiles, numevents, thresh=1e-6, angtype='theta'):$/;"	f
GetAllDataAngle	scripts/GANutils.py	/^def GetAllDataAngle(datafiles, numevents, thresh=1e-6, angtype='theta'):$/;"	f
GetAngleData	keras/analysis/utils/GANutils.py	/^def GetAngleData(datafile, thresh=1e-6, angtype='eta', offset=0.0):$/;"	f
GetAngleData	plot.py	/^from scripts.GANutils import GetData, GetAngleData, GetDataFiles, generate, generate2,  safe_mkdir$/;"	i
GetAngleData	scripts/GANutils.py	/^def GetAngleData(datafile, thresh=0, angtype='eta', offset=0.0, num_events=10000):$/;"	f
GetData	keras/EcalEnergyTrain_hvd.py	/^def GetData(datafile, xscale =1, yscale = 100, dimensions = 3, keras_dformat="channels_last"):$/;"	f
GetData	keras/analysis/utils/GANutils.py	/^def GetData(datafile, thresh=0):$/;"	f
GetData	keras/eval.py	/^from EcalEnergyTrain_hvd import GetData$/;"	i
GetData	keras/generate_pred.py	/^def GetData(datafile, xscale =1, yscale = 100, dimensions = 3):$/;"	f
GetData	keras/test.py	/^def GetData(datafile, xscale =1, yscale = 100, dimensions = 3, keras_dformat="channels_last"):$/;"	f
GetData	plot.py	/^from scripts.GANutils import GetData, GetAngleData, GetDataFiles, generate, generate2,  safe_mkdir$/;"	i
GetData	scripts/GANutils.py	/^def GetData(datafile, thresh=0, num_events=10000):$/;"	f
GetData2D	keras/archives/train/Train_rootfit_scaled_2D.py	/^def GetData2D(datafile, xscale =1, yscale = 100):$/;"	f
GetDataAngle	keras/AngleTrain3dGAN_hvd.py	/^def GetDataAngle(datafile, xscale =1, xpower=1, yscale = 100, angscale=1, angtype='theta', thresh=1e-4):$/;"	f
GetDataAngle	keras/AngleTrain3dGAN_hvd_tf2.py	/^def GetDataAngle(datafile, xscale =1, xpower=1, yscale = 100, angscale=1, angtype='theta', thresh=1e-4):$/;"	f
GetDataAngle	scripts/hdf_to_numpy.py	/^def GetDataAngle(datafile, imgs3dscale =1, imgs3dpower=1, e_pscale = 100, angscale=1, angtype='theta', thresh=1e-4):$/;"	f
GetDataFiles	keras/analysis/utils/GANutils.py	/^def GetDataFiles(FileSearch="\/data\/LCD\/*\/*.h5",$/;"	f
GetDataFiles	plot.py	/^from scripts.GANutils import GetData, GetAngleData, GetDataFiles, generate, generate2,  safe_mkdir$/;"	i
GetDataFiles	scripts/GANutils.py	/^def GetDataFiles(FileSearch,$/;"	f
GetEcalFit	keras/EcalEnergyTrain_hvd.py	/^def GetEcalFit(sampled_energies, mod=1, xscale=1):$/;"	f
GetEcalFit	keras/analysis/utils/GANutils.py	/^def GetEcalFit(sampled_energies, particle='Ele', mod=0, xscale=1):$/;"	f
GetEcalFit	keras/archives/log/TrainPionslog.py	/^def GetEcalFit(sampled_energies, particle='Ele', mod=0, xscale=1):$/;"	f
GetEcalFit	keras/archives/log/TrainPionslog_dual.py	/^def GetEcalFit(sampled_energies, particle='Ele', mod=0, xscale=1):$/;"	f
GetEcalFit	keras/archives/train/TrainChPions.py	/^def GetEcalFit(sampled_energies, particle='Ele', mod=0, xscale=1):$/;"	f
GetEcalFit	keras/archives/train/Train_rootfit_scaled_2D.py	/^def GetEcalFit(sampled_energies, mod=0, xscale=1):$/;"	f
GetEcalFit	keras/archives/train/Train_single_pass.py	/^def GetEcalFit(sampled_energies, mod=0, xscale=1):$/;"	f
GetEcalFit	keras/test.py	/^def GetEcalFit(sampled_energies, mod=1, xscale=1):$/;"	f
GetEcalFit	scripts/GANutils.py	/^def GetEcalFit(sampled_energies, particle='Ele', mod=0, xscale=1):$/;"	f
GetFiles	keras/paramScan/HyperParameterScan_multi.py	/^def GetFiles(FileSearch="\/data\/LCD\/*\/*.h5", nEvents=200000, EventsperFile = 10000, Fractions=[.9,.1],datasetnames=["ECAL","HCAL"],Particles=[],MaxFiles=-1):$/;"	f
GetFiles	keras/paramScan/HyperParameterScan_small.py	/^def GetFiles(FileSearch="\/data\/LCD\/*\/*.h5", nEvents=200000, EventsperFile = 10000, Fractions=[.9,.1],datasetnames=["ECAL","HCAL"],Particles=[],MaxFiles=-1):$/;"	f
GetFiles	keras/paramScan/TestingObjective.py	/^def GetFiles(FileSearch="\/data\/LCD\/*\/*.h5", nEvents=200000, EventsperFile = 10000, Fractions=[.9,.1],datasetnames=["ECAL","HCAL"],Particles=[],MaxFiles=-1):$/;"	f
GetProcData	keras/misc/ecal_flat_python.py	/^def GetProcData(datafile, num_events):$/;"	f
GetProcData	keras/misc/ecal_flat_root.py	/^def GetProcData(datafile, num_events):$/;"	f
GetProcData	keras/misc/ecal_sum_python.py	/^def GetProcData(datafile, num_events):$/;"	f
GetResults	keras/paramScan/TestingObjective.py	/^def GetResults(num, resultfile, gen_weights, g, datapath, sorted_path, particle="Ele", scale=100):$/;"	f
GetprocData	keras/archives/log/TrainPionslog.py	/^def GetprocData(datafile, xscale =1, yscale = 100, limit = 1e-6):$/;"	f
GetprocData	keras/archives/log/TrainPionslog_dual.py	/^def GetprocData(datafile, xscale =1, yscale = 100, limit = 1e-6):$/;"	f
GetprocData	keras/archives/train/TrainChPions.py	/^def GetprocData(datafile, xscale =1, yscale = 100, limit = 1e-6):$/;"	f
GetprocData	keras/archives/train/Train_single_pass.py	/^def GetprocData(datafile, xscale =1, yscale = 100, limit = 1e-6):$/;"	f
Gprof	keras/eval.py	/^Gprof = []$/;"	v
Gprof	keras/misc/Gen_ecalRatio_multi.py	/^Gprof = []$/;"	v
Gprof	keras/misc/Gen_ecalfit2.py	/^Gprof = TProfile("Gprof", "Gprof", 100, 0, 5, 0, 3)$/;"	v
GradientDescentMomentum	neon/potential_gan.py	/^from neon.optimizers import GradientDescentMomentum, RMSProp, Adam$/;"	i
H5FileDataProvider	keras/archives/Data_Generators/AllEnergyTrain.py	/^from adlkit.data_provider import H5FileDataProvider$/;"	i
H5FileDataProvider	keras/archives/Data_Generators/GenEnergyTrain.py	/^from adlkit.data_provider import H5FileDataProvider$/;"	i
HCAL	keras/archives/Data_Generators/AllEnergyTrain.py	/^    HCAL=False$/;"	v
HCAL	keras/archives/Data_Generators/GenEnergyTrain.py	/^    HCAL=False$/;"	v
HCALNorm	keras/archives/Data_Generators/AllEnergyTrain.py	/^    HCALNorm= None$/;"	v
HCALNorm	keras/archives/Data_Generators/GenEnergyTrain.py	/^    HCALNorm= None$/;"	v
HCALShape	keras/archives/Data_Generators/AllEnergyTrain.py	/^    HCALShape= None, 5, 5, 60$/;"	v
HCALShape	keras/archives/Data_Generators/GenEnergyTrain.py	/^    HCALShape= None, 5, 5, 60$/;"	v
HDF5File	caffe/caffe_train.py	/^from h5py import File as HDF5File$/;"	i
HDF5File	caffe/creating_proto.py	/^from h5py import File as HDF5File$/;"	i
HDF5File	keras/AngleArch3dGAN.py	/^from h5py import File as HDF5File$/;"	i
HDF5File	keras/AngleArch3dGAN_tf2.py	/^from h5py import File as HDF5File$/;"	i
HDF5File	keras/EcalEnergyGan.py	/^from h5py import File as HDF5File$/;"	i
HDF5File	keras/archives/architectures_tested/arch10.py	/^from h5py import File as HDF5File$/;"	i
HDF5File	keras/archives/architectures_tested/arch11.py	/^from h5py import File as HDF5File$/;"	i
HDF5File	keras/archives/architectures_tested/arch12.py	/^from h5py import File as HDF5File$/;"	i
HDF5File	keras/archives/architectures_tested/arch13.py	/^from h5py import File as HDF5File$/;"	i
HDF5File	keras/archives/architectures_tested/arch14.py	/^from h5py import File as HDF5File$/;"	i
HDF5File	keras/archives/architectures_tested/arch15.py	/^from h5py import File as HDF5File$/;"	i
HDF5File	keras/archives/architectures_tested/arch16.py	/^from h5py import File as HDF5File$/;"	i
HDF5File	keras/archives/architectures_tested/arch7.py	/^from h5py import File as HDF5File$/;"	i
HDF5File	keras/archives/architectures_tested/arch8.py	/^from h5py import File as HDF5File$/;"	i
HDF5File	keras/archives/architectures_tested/arch9.py	/^from h5py import File as HDF5File$/;"	i
HDF5File	keras/archives/architectures_tested/archlayer6.py	/^from h5py import File as HDF5File$/;"	i
HDF5File	keras/archives/architectures_tested/ecalvegan2.py	/^from h5py import File as HDF5File$/;"	i
HDF5File	keras/archives/architectures_tested/ecalvegan3.py	/^from h5py import File as HDF5File$/;"	i
HDF5File	keras/archives/architectures_tested/ecalvegan4.py	/^from h5py import File as HDF5File$/;"	i
HDF5File	keras/archives/architectures_tested/new_arch.py	/^from h5py import File as HDF5File$/;"	i
HDF5File	keras/archives/log/EcalEnergyGanlog.py	/^from h5py import File as HDF5File$/;"	i
HDF5File	keras/archives/normInit/normalInit.py	/^from h5py import File as HDF5File$/;"	i
HDF5File	keras/archives/train/particle3Dtrain.py	/^from h5py import File as HDF5File$/;"	i
HDF5File	networks/AngleGAN/discriminator.py	/^from h5py import File as HDF5File$/;"	i
HDF5File	networks/AngleGAN/generator.py	/^from h5py import File as HDF5File$/;"	i
INCEPTION_DEFAULT_IMAGE_SIZE	metrics/fid.py	/^INCEPTION_DEFAULT_IMAGE_SIZE = 299$/;"	v
INCEPTION_FINAL_POOL	metrics/fid.py	/^INCEPTION_FINAL_POOL = 'pool_3:0'$/;"	v
INCEPTION_FROZEN_GRAPH	metrics/fid.py	/^INCEPTION_FROZEN_GRAPH = 'inceptionv1_for_inception_score.pb'$/;"	v
INCEPTION_INPUT	metrics/fid.py	/^INCEPTION_INPUT = 'Mul:0'$/;"	v
INCEPTION_OUTPUT	metrics/fid.py	/^INCEPTION_OUTPUT = 'logits:0'$/;"	v
INCEPTION_URL	metrics/fid.py	/^INCEPTION_URL = 'http:\/\/download.tensorflow.org\/models\/frozen_inception_v1_2015_12_05.tar.gz'$/;"	v
Image	scripts/main.py	/^from PIL import Image$/;"	i
Input	keras/AngleArch3dGAN.py	/^from keras.layers import (Input, Dense, Reshape, Flatten, Lambda, merge,$/;"	i
Input	keras/AngleArch3dGAN_tf2.py	/^from tensorflow.keras.layers import (Input, Dense, Reshape, Flatten, Lambda,$/;"	i
Input	keras/AngleTrain3dGAN_hvd.py	/^from keras.layers import Input$/;"	i
Input	keras/AngleTrain3dGAN_hvd_tf2.py	/^from tensorflow.keras.layers import Input$/;"	i
Input	keras/EcalEnergyGan.py	/^from keras.layers import (Input, Dense, Reshape, Flatten, Lambda, merge,$/;"	i
Input	keras/EcalEnergyTrain_hvd.py	/^    from keras.layers import Input$/;"	i
Input	keras/archives/Data_Generators/AllEnergyTrain.py	/^    from keras.layers import Input$/;"	i
Input	keras/archives/Data_Generators/GenEnergyTrain.py	/^    from keras.layers import Input$/;"	i
Input	keras/archives/architectures_tested/arch10.py	/^from keras.layers import (Input, Dense, Reshape, Flatten, Lambda, merge,$/;"	i
Input	keras/archives/architectures_tested/arch11.py	/^from keras.layers import (Input, Dense, Reshape, Flatten, Lambda, merge,$/;"	i
Input	keras/archives/architectures_tested/arch12.py	/^from keras.layers import (Input, Dense, Reshape, Flatten, Lambda, merge,$/;"	i
Input	keras/archives/architectures_tested/arch13.py	/^from keras.layers import (Input, Dense, Reshape, Flatten, Lambda, merge,$/;"	i
Input	keras/archives/architectures_tested/arch14.py	/^from keras.layers import (Input, Dense, Reshape, Flatten, Lambda, merge,$/;"	i
Input	keras/archives/architectures_tested/arch15.py	/^from keras.layers import (Input, Dense, Reshape, Flatten, Lambda, merge,$/;"	i
Input	keras/archives/architectures_tested/arch16.py	/^from keras.layers import (Input, Dense, Reshape, Flatten, Lambda, merge,$/;"	i
Input	keras/archives/architectures_tested/arch7.py	/^from keras.layers import (Input, Dense, Reshape, Flatten, Lambda, merge,$/;"	i
Input	keras/archives/architectures_tested/arch8.py	/^from keras.layers import (Input, Dense, Reshape, Flatten, Lambda, merge,$/;"	i
Input	keras/archives/architectures_tested/arch9.py	/^from keras.layers import (Input, Dense, Reshape, Flatten, Lambda, merge,$/;"	i
Input	keras/archives/architectures_tested/archlayer6.py	/^from keras.layers import (Input, Dense, Reshape, Flatten, Lambda, merge,$/;"	i
Input	keras/archives/architectures_tested/ecalvegan2.py	/^from keras.layers import (Input, Dense, Reshape, Flatten, Lambda, merge,$/;"	i
Input	keras/archives/architectures_tested/ecalvegan3.py	/^from keras.layers import (Input, Dense, Reshape, Flatten, Lambda, merge,$/;"	i
Input	keras/archives/architectures_tested/ecalvegan4.py	/^from keras.layers import (Input, Dense, Reshape, Flatten, Lambda, merge,$/;"	i
Input	keras/archives/architectures_tested/new_arch.py	/^from keras.layers import (Input, Dense, Reshape, Flatten, Lambda, merge,$/;"	i
Input	keras/archives/log/EcalEnergyGanlog.py	/^from keras.layers import (Input, Dense, Reshape, Flatten, Lambda, merge,$/;"	i
Input	keras/archives/log/TrainPionslog.py	/^    from keras.layers import Input$/;"	i
Input	keras/archives/log/TrainPionslog_dual.py	/^    from keras.layers import Input$/;"	i
Input	keras/archives/normInit/normalInit.py	/^from keras.layers import (Input, Dense, Reshape, Flatten, Lambda, merge,$/;"	i
Input	keras/archives/normInit/normalInitTrain.py	/^    from keras.layers import Input$/;"	i
Input	keras/archives/train/TrainChPions.py	/^    from keras.layers import Input$/;"	i
Input	keras/archives/train/Train_rootfit_scaled_2D.py	/^    from keras.layers import Input$/;"	i
Input	keras/archives/train/Train_single_pass.py	/^    from keras.layers import Input$/;"	i
Input	keras/archives/train/particle3Dtrain.py	/^    from keras.layers import Input$/;"	i
Input	keras/paramScan/HyperParameterScan.py	/^from keras.layers import (Input, Dense, Reshape, Flatten, Lambda, merge,$/;"	i
Input	keras/paramScan/HyperParameterScan_multi.py	/^from keras.layers import (Input, Dense, Reshape, Flatten, Lambda, merge,$/;"	i
Input	keras/paramScan/HyperParameterScan_small.py	/^from keras.layers import (Input, Dense, Reshape, Flatten, Lambda, merge,$/;"	i
Input	keras/paramScan/TestingObjective.py	/^from keras.layers import (Input, Dense, Reshape, Flatten, Lambda, merge,$/;"	i
Input	keras/test.py	/^    from keras.layers import Input$/;"	i
Input	networks/AngleGAN/discriminator.py	/^from keras.layers import (Input, Dense, Reshape, Flatten, Lambda, merge,$/;"	i
Input	networks/AngleGAN/generator.py	/^from keras.layers import (Input, Dense, Reshape, Flatten, Lambda, merge,$/;"	i
Integer	keras/paramScan/HyperParameterScan.py	/^from skopt.space import Real, Integer, Categorical$/;"	i
Integer	keras/paramScan/HyperParameterScan_multi.py	/^from skopt.space import Real, Integer, Categorical$/;"	i
Integer	keras/paramScan/HyperParameterScan_small.py	/^from skopt.space import Real, Integer, Categorical$/;"	i
InvalidFIDException	metrics/fid_new.py	/^class InvalidFIDException(Exception):$/;"	c
K	keras/AngleArch3dGAN.py	/^import keras.backend as K$/;"	i
K	keras/AngleArch3dGAN_tf2.py	/^from tensorflow.keras import backend as K$/;"	i
K	keras/AngleTrain3dGAN_hvd.py	/^import keras.backend as K$/;"	i
K	keras/AngleTrain3dGAN_hvd_tf2.py	/^from tensorflow.keras import backend as K$/;"	i
K	keras/EcalEnergyGan.py	/^import keras.backend as K$/;"	i
K	keras/EcalEnergyTrain_hvd.py	/^    import keras.backend as K$/;"	i
K	keras/analysis/utils/GANutils.py	/^import keras.backend as K$/;"	i
K	keras/archives/Data_Generators/AllEnergyTrain.py	/^    import keras.backend as K$/;"	i
K	keras/archives/Data_Generators/GenEnergyTrain.py	/^    import keras.backend as K$/;"	i
K	keras/archives/architectures_tested/arch10.py	/^import keras.backend as K$/;"	i
K	keras/archives/architectures_tested/arch11.py	/^import keras.backend as K$/;"	i
K	keras/archives/architectures_tested/arch12.py	/^import keras.backend as K$/;"	i
K	keras/archives/architectures_tested/arch13.py	/^import keras.backend as K$/;"	i
K	keras/archives/architectures_tested/arch14.py	/^import keras.backend as K$/;"	i
K	keras/archives/architectures_tested/arch15.py	/^import keras.backend as K$/;"	i
K	keras/archives/architectures_tested/arch16.py	/^import keras.backend as K$/;"	i
K	keras/archives/architectures_tested/arch7.py	/^import keras.backend as K$/;"	i
K	keras/archives/architectures_tested/arch8.py	/^import keras.backend as K$/;"	i
K	keras/archives/architectures_tested/arch9.py	/^import keras.backend as K$/;"	i
K	keras/archives/architectures_tested/archlayer6.py	/^import keras.backend as K$/;"	i
K	keras/archives/architectures_tested/ecalvegan2.py	/^import keras.backend as K$/;"	i
K	keras/archives/architectures_tested/ecalvegan3.py	/^import keras.backend as K$/;"	i
K	keras/archives/architectures_tested/ecalvegan4.py	/^import keras.backend as K$/;"	i
K	keras/archives/architectures_tested/new_arch.py	/^import keras.backend as K$/;"	i
K	keras/archives/log/EcalEnergyGanlog.py	/^import keras.backend as K$/;"	i
K	keras/archives/log/TrainPionslog.py	/^    import keras.backend as K$/;"	i
K	keras/archives/log/TrainPionslog_dual.py	/^    import keras.backend as K$/;"	i
K	keras/archives/normInit/normalInit.py	/^import keras.backend as K$/;"	i
K	keras/archives/normInit/normalInitTrain.py	/^    import keras.backend as K$/;"	i
K	keras/archives/train/TrainChPions.py	/^    import keras.backend as K$/;"	i
K	keras/archives/train/Train_rootfit_scaled_2D.py	/^    import keras.backend as K$/;"	i
K	keras/archives/train/Train_single_pass.py	/^    import keras.backend as K$/;"	i
K	keras/archives/train/particle3Dtrain.py	/^    import keras.backend as K$/;"	i
K	keras/eval.py	/^import keras.backend as K$/;"	i
K	keras/generate_pred.py	/^import keras.backend as K$/;"	i
K	keras/misc/ecal_flat_python.py	/^from keras import backend as K$/;"	i
K	keras/misc/ecal_flat_root.py	/^from keras import backend as K$/;"	i
K	keras/misc/ecal_sum_python.py	/^from keras import backend as K$/;"	i
K	keras/paramScan/HyperParameterScan.py	/^import keras.backend as K$/;"	i
K	keras/paramScan/HyperParameterScan_multi.py	/^import keras.backend as K$/;"	i
K	keras/paramScan/HyperParameterScan_small.py	/^import keras.backend as K$/;"	i
K	keras/paramScan/TestingObjective.py	/^import keras.backend as K$/;"	i
K	keras/test.py	/^    import keras.backend as K$/;"	i
K	networks/AngleGAN/discriminator.py	/^import keras.backend as K$/;"	i
K	networks/AngleGAN/generator.py	/^import keras.backend as K$/;"	i
K	plot.py	/^from keras import backend as K$/;"	i
L	caffe/caffe_train.py	/^from caffe import layers as L, params as P$/;"	i
L	caffe/creating_proto.py	/^from caffe import layers as L, params as P$/;"	i
Lambda	keras/AngleArch3dGAN.py	/^from keras.layers import (Input, Dense, Reshape, Flatten, Lambda, merge,$/;"	i
Lambda	keras/AngleArch3dGAN_tf2.py	/^from tensorflow.keras.layers import (Input, Dense, Reshape, Flatten, Lambda,$/;"	i
Lambda	keras/EcalEnergyGan.py	/^from keras.layers import (Input, Dense, Reshape, Flatten, Lambda, merge,$/;"	i
Lambda	keras/archives/architectures_tested/arch10.py	/^from keras.layers import (Input, Dense, Reshape, Flatten, Lambda, merge,$/;"	i
Lambda	keras/archives/architectures_tested/arch11.py	/^from keras.layers import (Input, Dense, Reshape, Flatten, Lambda, merge,$/;"	i
Lambda	keras/archives/architectures_tested/arch12.py	/^from keras.layers import (Input, Dense, Reshape, Flatten, Lambda, merge,$/;"	i
Lambda	keras/archives/architectures_tested/arch13.py	/^from keras.layers import (Input, Dense, Reshape, Flatten, Lambda, merge,$/;"	i
Lambda	keras/archives/architectures_tested/arch14.py	/^from keras.layers import (Input, Dense, Reshape, Flatten, Lambda, merge,$/;"	i
Lambda	keras/archives/architectures_tested/arch15.py	/^from keras.layers import (Input, Dense, Reshape, Flatten, Lambda, merge,$/;"	i
Lambda	keras/archives/architectures_tested/arch16.py	/^from keras.layers import (Input, Dense, Reshape, Flatten, Lambda, merge,$/;"	i
Lambda	keras/archives/architectures_tested/arch7.py	/^from keras.layers import (Input, Dense, Reshape, Flatten, Lambda, merge,$/;"	i
Lambda	keras/archives/architectures_tested/arch8.py	/^from keras.layers import (Input, Dense, Reshape, Flatten, Lambda, merge,$/;"	i
Lambda	keras/archives/architectures_tested/arch9.py	/^from keras.layers import (Input, Dense, Reshape, Flatten, Lambda, merge,$/;"	i
Lambda	keras/archives/architectures_tested/archlayer6.py	/^from keras.layers import (Input, Dense, Reshape, Flatten, Lambda, merge,$/;"	i
Lambda	keras/archives/architectures_tested/ecalvegan2.py	/^from keras.layers import (Input, Dense, Reshape, Flatten, Lambda, merge,$/;"	i
Lambda	keras/archives/architectures_tested/ecalvegan3.py	/^from keras.layers import (Input, Dense, Reshape, Flatten, Lambda, merge,$/;"	i
Lambda	keras/archives/architectures_tested/ecalvegan4.py	/^from keras.layers import (Input, Dense, Reshape, Flatten, Lambda, merge,$/;"	i
Lambda	keras/archives/architectures_tested/new_arch.py	/^from keras.layers import (Input, Dense, Reshape, Flatten, Lambda, merge,$/;"	i
Lambda	keras/archives/log/EcalEnergyGanlog.py	/^from keras.layers import (Input, Dense, Reshape, Flatten, Lambda, merge,$/;"	i
Lambda	keras/archives/normInit/normalInit.py	/^from keras.layers import (Input, Dense, Reshape, Flatten, Lambda, merge,$/;"	i
Lambda	keras/paramScan/HyperParameterScan.py	/^from keras.layers import (Input, Dense, Reshape, Flatten, Lambda, merge,$/;"	i
Lambda	keras/paramScan/HyperParameterScan_multi.py	/^from keras.layers import (Input, Dense, Reshape, Flatten, Lambda, merge,$/;"	i
Lambda	keras/paramScan/HyperParameterScan_small.py	/^from keras.layers import (Input, Dense, Reshape, Flatten, Lambda, merge,$/;"	i
Lambda	keras/paramScan/TestingObjective.py	/^from keras.layers import (Input, Dense, Reshape, Flatten, Lambda, merge,$/;"	i
Lambda	networks/AngleGAN/discriminator.py	/^from keras.layers import (Input, Dense, Reshape, Flatten, Lambda, merge,$/;"	i
Lambda	networks/AngleGAN/generator.py	/^from keras.layers import (Input, Dense, Reshape, Flatten, Lambda, merge,$/;"	i
LeakyReLU	keras/AngleArch3dGAN.py	/^from keras.layers.advanced_activations import LeakyReLU$/;"	i
LeakyReLU	keras/AngleArch3dGAN_tf2.py	/^from tensorflow.keras.layers import LeakyReLU$/;"	i
LeakyReLU	keras/EcalEnergyGan.py	/^from keras.layers.advanced_activations import LeakyReLU$/;"	i
LeakyReLU	keras/archives/architectures_tested/arch10.py	/^from keras.layers.advanced_activations import LeakyReLU$/;"	i
LeakyReLU	keras/archives/architectures_tested/arch11.py	/^from keras.layers.advanced_activations import LeakyReLU$/;"	i
LeakyReLU	keras/archives/architectures_tested/arch12.py	/^from keras.layers.advanced_activations import LeakyReLU$/;"	i
LeakyReLU	keras/archives/architectures_tested/arch13.py	/^from keras.layers.advanced_activations import LeakyReLU$/;"	i
LeakyReLU	keras/archives/architectures_tested/arch14.py	/^from keras.layers.advanced_activations import LeakyReLU$/;"	i
LeakyReLU	keras/archives/architectures_tested/arch15.py	/^from keras.layers.advanced_activations import LeakyReLU$/;"	i
LeakyReLU	keras/archives/architectures_tested/arch16.py	/^from keras.layers.advanced_activations import LeakyReLU$/;"	i
LeakyReLU	keras/archives/architectures_tested/arch7.py	/^from keras.layers.advanced_activations import LeakyReLU$/;"	i
LeakyReLU	keras/archives/architectures_tested/arch8.py	/^from keras.layers.advanced_activations import LeakyReLU$/;"	i
LeakyReLU	keras/archives/architectures_tested/arch9.py	/^from keras.layers.advanced_activations import LeakyReLU$/;"	i
LeakyReLU	keras/archives/architectures_tested/archlayer6.py	/^from keras.layers.advanced_activations import LeakyReLU$/;"	i
LeakyReLU	keras/archives/architectures_tested/ecalvegan2.py	/^from keras.layers.advanced_activations import LeakyReLU$/;"	i
LeakyReLU	keras/archives/architectures_tested/ecalvegan3.py	/^from keras.layers.advanced_activations import LeakyReLU$/;"	i
LeakyReLU	keras/archives/architectures_tested/ecalvegan4.py	/^from keras.layers.advanced_activations import LeakyReLU$/;"	i
LeakyReLU	keras/archives/architectures_tested/new_arch.py	/^from keras.layers.advanced_activations import LeakyReLU$/;"	i
LeakyReLU	keras/archives/log/EcalEnergyGanlog.py	/^from keras.layers.advanced_activations import LeakyReLU$/;"	i
LeakyReLU	keras/archives/normInit/normalInit.py	/^from keras.layers.advanced_activations import LeakyReLU$/;"	i
LeakyReLU	keras/paramScan/HyperParameterScan.py	/^from keras.layers.advanced_activations import LeakyReLU$/;"	i
LeakyReLU	keras/paramScan/HyperParameterScan_multi.py	/^from keras.layers.advanced_activations import LeakyReLU$/;"	i
LeakyReLU	keras/paramScan/HyperParameterScan_small.py	/^from keras.layers.advanced_activations import LeakyReLU$/;"	i
LeakyReLU	keras/paramScan/TestingObjective.py	/^from keras.layers.advanced_activations import LeakyReLU$/;"	i
LeakyReLU	networks/AngleGAN/discriminator.py	/^from keras.layers.advanced_activations import LeakyReLU$/;"	i
LeakyReLU	networks/AngleGAN/generator.py	/^from keras.layers.advanced_activations import LeakyReLU$/;"	i
Linear	neon/gan3D.py	/^from neon.layers.layer import Linear, Reshape$/;"	i
Linear	neon/potential_gan.py	/^from neon.layers import GeneralizedGANCost, Affine, Linear, Sequential, Conv, Deconv, Dropout, Pooling, BatchNorm$/;"	i
Linear	neon/potential_gan.py	/^from neon.layers.layer import Linear, Reshape$/;"	i
LogNorm	keras/archives/analysis/analysis_fixed_cont.py	/^from matplotlib.colors import LogNorm, Normalize$/;"	i
LogNorm	keras/archives/analysis/detailed_analysis_flex.py	/^from matplotlib.colors import LogNorm, Normalize$/;"	i
LogNorm	keras/archives/analysis/fixed_analysis_flex.py	/^from matplotlib.colors import LogNorm, Normalize$/;"	i
LogNorm	keras/misc/data_info.py	/^from matplotlib.colors import LogNorm, Normalize$/;"	i
LogNorm	keras/misc/ecal_primary.py	/^from matplotlib.colors import LogNorm, Normalize$/;"	i
LogNorm	keras/paramScan/HyperParameterScan.py	/^from matplotlib.colors import LogNorm, Normalize$/;"	i
LogNorm	keras/paramScan/HyperParameterScan_multi.py	/^from matplotlib.colors import LogNorm, Normalize$/;"	i
LogNorm	keras/paramScan/HyperParameterScan_small.py	/^from matplotlib.colors import LogNorm, Normalize$/;"	i
LogNorm	keras/paramScan/TestingObjective.py	/^from matplotlib.colors import LogNorm, Normalize$/;"	i
LogNorm	scripts/data_info.py	/^from matplotlib.colors import LogNorm, Normalize$/;"	i
Logistic	neon/gan3D.py	/^from neon.transforms import Rectlin, Logistic, GANCost$/;"	i
Logistic	neon/potential_gan.py	/^from neon.transforms import Rectlin, Logistic, GANCost, Tanh$/;"	i
MPI	generate.py	/^from mpi4py import MPI$/;"	i
MPMap	main.py	/^from utils import count_parameters, image_grid, parse_tuple, MPMap, log0, lr_update$/;"	i
MPMap	scripts/sara_main.py	/^from utils import count_parameters, image_grid, parse_tuple, MPMap$/;"	i
MPMap	utils.py	/^class MPMap:$/;"	c
Max	scripts/ROOTutils.py	/^def Max(hist1, hist2):$/;"	f
MeasPython	keras/analysis/utils/RootPlotsGAN.py	/^def MeasPython(image, mod=0):$/;"	f
MeasPython	scripts/RootPlotsGAN.py	/^def MeasPython(image, mod=0):$/;"	f
Model	keras/AngleArch3dGAN.py	/^from keras.models import Model, Sequential$/;"	i
Model	keras/AngleArch3dGAN_tf2.py	/^from tensorflow.keras.models import Model, Sequential$/;"	i
Model	keras/AngleTrain3dGAN_hvd.py	/^from keras.models import Model$/;"	i
Model	keras/AngleTrain3dGAN_hvd_tf2.py	/^from tensorflow.keras.models import Model$/;"	i
Model	keras/EcalEnergyGan.py	/^from keras.models import Model, Sequential$/;"	i
Model	keras/EcalEnergyTrain_hvd.py	/^    from keras.models import Model$/;"	i
Model	keras/archives/Data_Generators/AllEnergyTrain.py	/^    from keras.models import Model$/;"	i
Model	keras/archives/Data_Generators/GenEnergyTrain.py	/^    from keras.models import Model$/;"	i
Model	keras/archives/architectures_tested/arch10.py	/^from keras.models import Model, Sequential$/;"	i
Model	keras/archives/architectures_tested/arch11.py	/^from keras.models import Model, Sequential$/;"	i
Model	keras/archives/architectures_tested/arch12.py	/^from keras.models import Model, Sequential$/;"	i
Model	keras/archives/architectures_tested/arch13.py	/^from keras.models import Model, Sequential$/;"	i
Model	keras/archives/architectures_tested/arch14.py	/^from keras.models import Model, Sequential$/;"	i
Model	keras/archives/architectures_tested/arch15.py	/^from keras.models import Model, Sequential$/;"	i
Model	keras/archives/architectures_tested/arch16.py	/^from keras.models import Model, Sequential$/;"	i
Model	keras/archives/architectures_tested/arch7.py	/^from keras.models import Model, Sequential$/;"	i
Model	keras/archives/architectures_tested/arch8.py	/^from keras.models import Model, Sequential$/;"	i
Model	keras/archives/architectures_tested/arch9.py	/^from keras.models import Model, Sequential$/;"	i
Model	keras/archives/architectures_tested/archlayer6.py	/^from keras.models import Model, Sequential$/;"	i
Model	keras/archives/architectures_tested/ecalvegan2.py	/^from keras.models import Model, Sequential$/;"	i
Model	keras/archives/architectures_tested/ecalvegan3.py	/^from keras.models import Model, Sequential$/;"	i
Model	keras/archives/architectures_tested/ecalvegan4.py	/^from keras.models import Model, Sequential$/;"	i
Model	keras/archives/architectures_tested/new_arch.py	/^from keras.models import Model, Sequential$/;"	i
Model	keras/archives/log/EcalEnergyGanlog.py	/^from keras.models import Model, Sequential$/;"	i
Model	keras/archives/log/TrainPionslog.py	/^    from keras.models import Model$/;"	i
Model	keras/archives/log/TrainPionslog_dual.py	/^    from keras.models import Model$/;"	i
Model	keras/archives/normInit/normalInit.py	/^from keras.models import Model, Sequential$/;"	i
Model	keras/archives/normInit/normalInitTrain.py	/^    from keras.models import Model$/;"	i
Model	keras/archives/train/TrainChPions.py	/^    from keras.models import Model$/;"	i
Model	keras/archives/train/Train_rootfit_scaled_2D.py	/^    from keras.models import Model$/;"	i
Model	keras/archives/train/Train_single_pass.py	/^    from keras.models import Model$/;"	i
Model	keras/archives/train/particle3Dtrain.py	/^    from keras.models import Model$/;"	i
Model	keras/paramScan/HyperParameterScan.py	/^from keras.models import Model, Sequential$/;"	i
Model	keras/paramScan/HyperParameterScan_multi.py	/^from keras.models import Model, Sequential$/;"	i
Model	keras/paramScan/HyperParameterScan_small.py	/^from keras.models import Model, Sequential$/;"	i
Model	keras/paramScan/TestingObjective.py	/^from keras.models import Model, Sequential$/;"	i
Model	keras/test.py	/^    from keras.models import Model$/;"	i
Model	neon/potential_gan.py	/^from neon.models.model import GAN, Model$/;"	i
Model	networks/AngleGAN/discriminator.py	/^from keras.models import Model, Sequential$/;"	i
Model	networks/AngleGAN/generator.py	/^from keras.models import Model, Sequential$/;"	i
NClasses	keras/archives/Data_Generators/AllEnergyTrain.py	/^    NClasses=len(Particles)$/;"	v
NClasses	keras/archives/Data_Generators/GenEnergyTrain.py	/^    NClasses=len(Particles)$/;"	v
NSamples	keras/archives/Data_Generators/AllEnergyTrain.py	/^    NSamples=BatchSize*10$/;"	v
NSamples	keras/archives/Data_Generators/GenEnergyTrain.py	/^    NSamples=BatchSize*10$/;"	v
NTrain	keras/archives/Data_Generators/AllEnergyTrain.py	/^    NTrain = 720000$/;"	v
NTrain	keras/archives/Data_Generators/GenEnergyTrain.py	/^    NTrain = 180000$/;"	v
NeonArgparser	neon/gan3D.py	/^from neon.util.argparser import NeonArgparser$/;"	i
NeonArgparser	neon/potential_gan.py	/^from neon.util.argparser import NeonArgparser$/;"	i
NormalizationFunction	keras/archives/Data_Generators/AllEnergyTrain.py	/^    def NormalizationFunction(Ds):$/;"	f	function:myNorm
NormalizationFunction	keras/archives/Data_Generators/GenEnergyTrain.py	/^    def NormalizationFunction(Ds):$/;"	f	function:myNorm
Normalize	keras/archives/analysis/analysis_fixed_cont.py	/^from matplotlib.colors import LogNorm, Normalize$/;"	i
Normalize	keras/archives/analysis/detailed_analysis_flex.py	/^from matplotlib.colors import LogNorm, Normalize$/;"	i
Normalize	keras/archives/analysis/fixed_analysis_flex.py	/^from matplotlib.colors import LogNorm, Normalize$/;"	i
Normalize	keras/misc/data_info.py	/^from matplotlib.colors import LogNorm, Normalize$/;"	i
Normalize	keras/misc/ecal_primary.py	/^from matplotlib.colors import LogNorm, Normalize$/;"	i
Normalize	keras/paramScan/HyperParameterScan.py	/^from matplotlib.colors import LogNorm, Normalize$/;"	i
Normalize	keras/paramScan/HyperParameterScan_multi.py	/^from matplotlib.colors import LogNorm, Normalize$/;"	i
Normalize	keras/paramScan/HyperParameterScan_small.py	/^from matplotlib.colors import LogNorm, Normalize$/;"	i
Normalize	keras/paramScan/TestingObjective.py	/^from matplotlib.colors import LogNorm, Normalize$/;"	i
Normalize	scripts/data_info.py	/^from matplotlib.colors import LogNorm, Normalize$/;"	i
NumpyDataset	dataset.py	/^class NumpyDataset:$/;"	c
NumpyDataset	metrics/fid.py	/^from dataset import NumpyDataset$/;"	i
NumpyPathDataset	dataset.py	/^class NumpyPathDataset:$/;"	c
NumpyPathDataset	generate.py	/^from dataset import NumpyPathDataset$/;"	i
NumpyPathDataset	main.py	/^from dataset import NumpyPathDataset$/;"	i
NumpyPathDataset	scripts/main.py	/^from dataset import NumpyPathDataset$/;"	i
NumpyPathDataset	scripts/sara_main.py	/^from dataset import NumpyPathDataset$/;"	i
OptAnalysisAngle	keras/analysis/utils/GANutils.py	/^def OptAnalysisAngle(var, g, energies, ascale=None, xscale=None, yscale=100, xpower=None, latent=256, concat=1):$/;"	f
OptAnalysisAngle	scripts/GANutils.py	/^def OptAnalysisAngle(var, g, energies, ascale=None, xscale=None, yscale=100, xpower=None, latent=256, concat=1):$/;"	f
OptAnalysisShort	keras/analysis/utils/GANutils.py	/^def OptAnalysisShort(var, generated_images, energies, ang=1):$/;"	f
OptAnalysisShort	scripts/GANutils.py	/^def OptAnalysisShort(var, generated_images, energies, ang=1):$/;"	f
Optimizer	keras/paramScan/HyperParameterScan_multi.py	/^from skopt import Optimizer$/;"	i
P	caffe/caffe_train.py	/^from caffe import layers as L, params as P$/;"	i
P	caffe/creating_proto.py	/^from caffe import layers as L, params as P$/;"	i
PARAMS	get_args.py	/^PARAMS = [$/;"	v
PARAMS_LISTS	get_args.py	/^PARAMS_LISTS = list(PARAMS[i][1] for i in range(len(PARAMS)))$/;"	v
Particles	keras/archives/Data_Generators/AllEnergyTrain.py	/^    Particles=["Ele"]$/;"	v
Particles	keras/archives/Data_Generators/GenEnergyTrain.py	/^    Particles=["Ele"]$/;"	v
PlotAngleCut	keras/analysis/utils/RootPlotsGAN.py	/^def PlotAngleCut(events, ang, out_file, opt=""):$/;"	f
PlotAngleCut	scripts/RootPlotsGAN.py	/^def PlotAngleCut(events, ang, out_file, opt=""):$/;"	f
PlotEcalFlat	keras/misc/ecal_flat_python.py	/^def PlotEcalFlat(x, outfile, label, fig=1):$/;"	f
PlotEcalFlat	keras/misc/ecal_flat_root.py	/^def PlotEcalFlat(x, outfile, ifpdf=True):$/;"	f
PlotEcalFlatlog	keras/misc/ecal_flat_python.py	/^def PlotEcalFlatlog(x, outfile, label, fig=1):$/;"	f
PlotEcalFlatlog	keras/misc/ecal_flat_root.py	/^def PlotEcalFlatlog(x, X, outfile, ifpdf=True):$/;"	f
PlotEcalSum	keras/misc/ecal_sum_python.py	/^def PlotEcalSum(array, outfile, label, fig=1):$/;"	f
PlotEnergyHistGen	keras/analysis/utils/RootPlotsGAN.py	/^def PlotEnergyHistGen(events, out_file, energy, thetas, log=0, ifC=False):$/;"	f
PlotEnergyHistGen	scripts/RootPlotsGAN.py	/^def PlotEnergyHistGen(events, out_file, energy, thetas, log=0, ifC=False):$/;"	f
PlotEvent	keras/analysis/utils/RootPlotsGAN.py	/^def PlotEvent(event, energy, theta, out_file, n, opt="", unit='degrees', label=""):$/;"	f
PlotEvent	scripts/RootPlotsGAN.py	/^def PlotEvent(event, energy, theta, out_file, n, opt="", unit='degrees', label=""):$/;"	f
PlotEvent2	scripts/RootPlotsGAN.py	/^def PlotEvent2(aevent, gevent, energy, theta, out_file, n, opt="", unit='degrees', label="", logz=0, ifC=0):$/;"	f
PlotEventCut	keras/analysis/utils/RootPlotsGAN.py	/^def PlotEventCut(event, energy, theta, out_file, n, opt="", unit='degrees', label=""):$/;"	f
PlotEventCut	scripts/RootPlotsGAN.py	/^def PlotEventCut(event, energy, theta, out_file, n, opt="", unit='degrees', label=""):$/;"	f
PlotEventCutFixed	scripts/RootPlotsGAN.py	/^def PlotEventCutFixed(event, energy, out_file, n, opt="", label=""):$/;"	f
PlotEventFixed	scripts/RootPlotsGAN.py	/^def PlotEventFixed(event, energy, out_file, n, opt="", label="", log=0):$/;"	f
PlotPosCut	keras/analysis/utils/RootPlotsGAN.py	/^def PlotPosCut(events, xcut, ycut, zcut, energy, out_file, opt='colz'):$/;"	f
PlotPosCut	scripts/RootPlotsGAN.py	/^def PlotPosCut(events, xcut, ycut, zcut, energy, out_file, opt='colz'):$/;"	f
PlotResults	keras/paramScan/TestingObjective.py	/^def PlotResults(results, metric, resultplot, fig):$/;"	f
PlotResultsAll	keras/paramScan/TestingObjective.py	/^def PlotResultsAll(results, metrics, resultplotall, fig):$/;"	f
Pool	utils.py	/^from multiprocessing import Pool$/;"	i
Pooling	neon/gan3D.py	/^from neon.layers import GeneralizedGANCost, Sequential, Conv, Deconv, Dropout, Pooling$/;"	i
Pooling	neon/potential_gan.py	/^from neon.layers import GeneralizedGANCost, Affine, Linear, Sequential, Conv, Deconv, Dropout, Pooling, BatchNorm$/;"	i
Progbar	keras/AngleTrain3dGAN_hvd.py	/^from keras.utils.generic_utils import Progbar$/;"	i
Progbar	keras/AngleTrain3dGAN_hvd_tf2.py	/^from tensorflow.keras.utils import Progbar$/;"	i
Progbar	keras/EcalEnergyTrain_hvd.py	/^    from keras.utils.generic_utils import Progbar$/;"	i
Progbar	keras/archives/Data_Generators/AllEnergyTrain.py	/^    from keras.utils.generic_utils import Progbar$/;"	i
Progbar	keras/archives/Data_Generators/GenEnergyTrain.py	/^    from keras.utils.generic_utils import Progbar$/;"	i
Progbar	keras/archives/log/TrainPionslog.py	/^    from keras.utils.generic_utils import Progbar$/;"	i
Progbar	keras/archives/log/TrainPionslog_dual.py	/^    from keras.utils.generic_utils import Progbar$/;"	i
Progbar	keras/archives/normInit/normalInitTrain.py	/^    from keras.utils.generic_utils import Progbar$/;"	i
Progbar	keras/archives/train/TrainChPions.py	/^    from keras.utils.generic_utils import Progbar$/;"	i
Progbar	keras/archives/train/Train_rootfit_scaled_2D.py	/^    from keras.utils.generic_utils import Progbar$/;"	i
Progbar	keras/archives/train/Train_single_pass.py	/^    from keras.utils.generic_utils import Progbar$/;"	i
Progbar	keras/archives/train/particle3Dtrain.py	/^    from keras.utils.generic_utils import Progbar$/;"	i
Progbar	keras/paramScan/HyperParameterScan.py	/^from keras.utils.generic_utils import Progbar$/;"	i
Progbar	keras/paramScan/HyperParameterScan_multi.py	/^from keras.utils.generic_utils import Progbar$/;"	i
Progbar	keras/paramScan/HyperParameterScan_small.py	/^from keras.utils.generic_utils import Progbar$/;"	i
Progbar	keras/paramScan/TestingObjective.py	/^from keras.utils.generic_utils import Progbar$/;"	i
Progbar	keras/test.py	/^    from keras.utils.generic_utils import Progbar$/;"	i
RAdamOptimizer	main.py	/^from rectified_adam import RAdamOptimizer$/;"	i
RAdamOptimizer	scripts/main.py	/^from rectified_adam import RAdamOptimizer$/;"	i
RAdamOptimizer	scripts/sara_main.py	/^from rectified_adam import RAdamOptimizer$/;"	i
RMSProp	neon/potential_gan.py	/^from neon.optimizers import GradientDescentMomentum, RMSProp, Adam$/;"	i
RMSprop	keras/AngleTrain3dGAN_hvd.py	/^from keras.optimizers import Adadelta, Adam, RMSprop$/;"	i
RMSprop	keras/AngleTrain3dGAN_hvd_tf2.py	/^from tensorflow.keras.optimizers import Adadelta, Adam, RMSprop$/;"	i
RMSprop	keras/EcalEnergyTrain_hvd.py	/^    from keras.optimizers import Adadelta, Adam, RMSprop$/;"	i
RMSprop	keras/archives/Data_Generators/AllEnergyTrain.py	/^    from keras.optimizers import Adadelta, Adam, RMSprop$/;"	i
RMSprop	keras/archives/Data_Generators/GenEnergyTrain.py	/^    from keras.optimizers import Adadelta, Adam, RMSprop$/;"	i
RMSprop	keras/archives/log/TrainPionslog.py	/^    from keras.optimizers import Adadelta, Adam, RMSprop$/;"	i
RMSprop	keras/archives/log/TrainPionslog_dual.py	/^    from keras.optimizers import Adadelta, Adam, RMSprop$/;"	i
RMSprop	keras/archives/normInit/normalInitTrain.py	/^    from keras.optimizers import Adadelta, Adam, RMSprop$/;"	i
RMSprop	keras/archives/train/TrainChPions.py	/^    from keras.optimizers import Adadelta, Adam, RMSprop$/;"	i
RMSprop	keras/archives/train/Train_rootfit_scaled_2D.py	/^    from keras.optimizers import Adadelta, Adam, RMSprop$/;"	i
RMSprop	keras/archives/train/Train_single_pass.py	/^    from keras.optimizers import Adadelta, Adam, RMSprop$/;"	i
RMSprop	keras/archives/train/particle3Dtrain.py	/^    from keras.optimizers import Adadelta, Adam, RMSprop$/;"	i
RMSprop	keras/paramScan/HyperParameterScan.py	/^from keras.optimizers import Adadelta, Adam, RMSprop$/;"	i
RMSprop	keras/paramScan/HyperParameterScan_multi.py	/^from keras.optimizers import Adadelta, Adam, RMSprop$/;"	i
RMSprop	keras/paramScan/HyperParameterScan_small.py	/^from keras.optimizers import Adadelta, Adam, RMSprop$/;"	i
RMSprop	keras/paramScan/TestingObjective.py	/^from keras.optimizers import Adadelta, Adam, RMSprop$/;"	i
RMSprop	keras/test.py	/^    from keras.optimizers import Adadelta, Adam, RMSprop$/;"	i
ROOT	analysis/h5toroot_evc.py	/^import ROOT $/;"	i
ROOT	keras/analysis/RootAnalysis.py	/^import ROOT$/;"	i
ROOT	keras/analysis/utils/ROOTutils.py	/^import ROOT$/;"	i
ROOT	keras/analysis/utils/RootPlotsGAN.py	/^import ROOT$/;"	i
ROOT	keras/archives/RootAnalysis_multi_pions.py	/^import ROOT$/;"	i
ROOT	keras/eval.py	/^import ROOT$/;"	i
ROOT	keras/misc/Gen_ecalRatio_stat.py	/^import ROOT$/;"	i
ROOT	keras/misc/ecal_flat_python.py	/^import ROOT$/;"	i
ROOT	keras/misc/ecal_flat_root.py	/^import ROOT$/;"	i
ROOT	plot.py	/^import ROOT$/;"	i
ROOT	scripts/ROOTutils.py	/^import ROOT$/;"	i
ROOT	scripts/RootPlotsGAN.py	/^import ROOT$/;"	i
ROOTutils	keras/misc/ecal_flat_python.py	/^import ROOTutils  $/;"	i
ROW_FMT	keras/archives/Data_Generators/AllEnergyTrain.py	/^        ROW_FMT = '{0:<22s} | {1:<4.2f} | {2:<15.2f} | {3:<5.2f}| {4:<5.2f}'$/;"	v
ROW_FMT	keras/archives/Data_Generators/GenEnergyTrain.py	/^        ROW_FMT = '{0:<22s} | {1:<4.2f} | {2:<15.2f} | {3:<5.2f}| {4:<5.2f}'$/;"	v
ROW_FMT	keras/archives/normInit/normalInitTrain.py	/^        ROW_FMT = '{0:<22s} | {1:<4.2f} | {2:<15.2f} | {3:<5.2f}| {4:<5.2f}'$/;"	v
ROW_FMT	keras/archives/train/particle3Dtrain.py	/^        ROW_FMT = '{0:<22s} | {1:<4.2f} | {2:<15.2f} | {3:<5.2f}'$/;"	v
Real	keras/paramScan/HyperParameterScan.py	/^from skopt.space import Real, Integer, Categorical$/;"	i
Real	keras/paramScan/HyperParameterScan_multi.py	/^from skopt.space import Real, Integer, Categorical$/;"	i
Real	keras/paramScan/HyperParameterScan_small.py	/^from skopt.space import Real, Integer, Categorical$/;"	i
Rectlin	neon/gan3D.py	/^from neon.transforms import Rectlin, Logistic, GANCost$/;"	i
Rectlin	neon/potential_gan.py	/^from neon.transforms import Rectlin, Logistic, GANCost, Tanh$/;"	i
Reshape	keras/AngleArch3dGAN.py	/^from keras.layers import (Input, Dense, Reshape, Flatten, Lambda, merge,$/;"	i
Reshape	keras/AngleArch3dGAN_tf2.py	/^from tensorflow.keras.layers import (Input, Dense, Reshape, Flatten, Lambda,$/;"	i
Reshape	keras/EcalEnergyGan.py	/^from keras.layers import (Input, Dense, Reshape, Flatten, Lambda, merge,$/;"	i
Reshape	keras/archives/architectures_tested/arch10.py	/^from keras.layers import (Input, Dense, Reshape, Flatten, Lambda, merge,$/;"	i
Reshape	keras/archives/architectures_tested/arch11.py	/^from keras.layers import (Input, Dense, Reshape, Flatten, Lambda, merge,$/;"	i
Reshape	keras/archives/architectures_tested/arch12.py	/^from keras.layers import (Input, Dense, Reshape, Flatten, Lambda, merge,$/;"	i
Reshape	keras/archives/architectures_tested/arch13.py	/^from keras.layers import (Input, Dense, Reshape, Flatten, Lambda, merge,$/;"	i
Reshape	keras/archives/architectures_tested/arch14.py	/^from keras.layers import (Input, Dense, Reshape, Flatten, Lambda, merge,$/;"	i
Reshape	keras/archives/architectures_tested/arch15.py	/^from keras.layers import (Input, Dense, Reshape, Flatten, Lambda, merge,$/;"	i
Reshape	keras/archives/architectures_tested/arch16.py	/^from keras.layers import (Input, Dense, Reshape, Flatten, Lambda, merge,$/;"	i
Reshape	keras/archives/architectures_tested/arch7.py	/^from keras.layers import (Input, Dense, Reshape, Flatten, Lambda, merge,$/;"	i
Reshape	keras/archives/architectures_tested/arch8.py	/^from keras.layers import (Input, Dense, Reshape, Flatten, Lambda, merge,$/;"	i
Reshape	keras/archives/architectures_tested/arch9.py	/^from keras.layers import (Input, Dense, Reshape, Flatten, Lambda, merge,$/;"	i
Reshape	keras/archives/architectures_tested/archlayer6.py	/^from keras.layers import (Input, Dense, Reshape, Flatten, Lambda, merge,$/;"	i
Reshape	keras/archives/architectures_tested/ecalvegan2.py	/^from keras.layers import (Input, Dense, Reshape, Flatten, Lambda, merge,$/;"	i
Reshape	keras/archives/architectures_tested/ecalvegan3.py	/^from keras.layers import (Input, Dense, Reshape, Flatten, Lambda, merge,$/;"	i
Reshape	keras/archives/architectures_tested/ecalvegan4.py	/^from keras.layers import (Input, Dense, Reshape, Flatten, Lambda, merge,$/;"	i
Reshape	keras/archives/architectures_tested/new_arch.py	/^from keras.layers import (Input, Dense, Reshape, Flatten, Lambda, merge,$/;"	i
Reshape	keras/archives/log/EcalEnergyGanlog.py	/^from keras.layers import (Input, Dense, Reshape, Flatten, Lambda, merge,$/;"	i
Reshape	keras/archives/normInit/normalInit.py	/^from keras.layers import (Input, Dense, Reshape, Flatten, Lambda, merge,$/;"	i
Reshape	keras/paramScan/HyperParameterScan.py	/^from keras.layers import (Input, Dense, Reshape, Flatten, Lambda, merge,$/;"	i
Reshape	keras/paramScan/HyperParameterScan_multi.py	/^from keras.layers import (Input, Dense, Reshape, Flatten, Lambda, merge,$/;"	i
Reshape	keras/paramScan/HyperParameterScan_small.py	/^from keras.layers import (Input, Dense, Reshape, Flatten, Lambda, merge,$/;"	i
Reshape	keras/paramScan/TestingObjective.py	/^from keras.layers import (Input, Dense, Reshape, Flatten, Lambda, merge,$/;"	i
Reshape	neon/gan3D.py	/^from neon.layers.layer import Linear, Reshape$/;"	i
Reshape	neon/potential_gan.py	/^from neon.layers.layer import Linear, Reshape$/;"	i
Reshape	networks/AngleGAN/discriminator.py	/^from keras.layers import (Input, Dense, Reshape, Flatten, Lambda, merge,$/;"	i
Reshape	networks/AngleGAN/generator.py	/^from keras.layers import (Input, Dense, Reshape, Flatten, Lambda, merge,$/;"	i
Sequential	keras/AngleArch3dGAN.py	/^from keras.models import Model, Sequential$/;"	i
Sequential	keras/AngleArch3dGAN_tf2.py	/^from tensorflow.keras.models import Model, Sequential$/;"	i
Sequential	keras/EcalEnergyGan.py	/^from keras.models import Model, Sequential$/;"	i
Sequential	keras/archives/architectures_tested/arch10.py	/^from keras.models import Model, Sequential$/;"	i
Sequential	keras/archives/architectures_tested/arch11.py	/^from keras.models import Model, Sequential$/;"	i
Sequential	keras/archives/architectures_tested/arch12.py	/^from keras.models import Model, Sequential$/;"	i
Sequential	keras/archives/architectures_tested/arch13.py	/^from keras.models import Model, Sequential$/;"	i
Sequential	keras/archives/architectures_tested/arch14.py	/^from keras.models import Model, Sequential$/;"	i
Sequential	keras/archives/architectures_tested/arch15.py	/^from keras.models import Model, Sequential$/;"	i
Sequential	keras/archives/architectures_tested/arch16.py	/^from keras.models import Model, Sequential$/;"	i
Sequential	keras/archives/architectures_tested/arch7.py	/^from keras.models import Model, Sequential$/;"	i
Sequential	keras/archives/architectures_tested/arch8.py	/^from keras.models import Model, Sequential$/;"	i
Sequential	keras/archives/architectures_tested/arch9.py	/^from keras.models import Model, Sequential$/;"	i
Sequential	keras/archives/architectures_tested/archlayer6.py	/^from keras.models import Model, Sequential$/;"	i
Sequential	keras/archives/architectures_tested/ecalvegan2.py	/^from keras.models import Model, Sequential$/;"	i
Sequential	keras/archives/architectures_tested/ecalvegan3.py	/^from keras.models import Model, Sequential$/;"	i
Sequential	keras/archives/architectures_tested/ecalvegan4.py	/^from keras.models import Model, Sequential$/;"	i
Sequential	keras/archives/architectures_tested/new_arch.py	/^from keras.models import Model, Sequential$/;"	i
Sequential	keras/archives/log/EcalEnergyGanlog.py	/^from keras.models import Model, Sequential$/;"	i
Sequential	keras/archives/normInit/normalInit.py	/^from keras.models import Model, Sequential$/;"	i
Sequential	keras/paramScan/HyperParameterScan.py	/^from keras.models import Model, Sequential$/;"	i
Sequential	keras/paramScan/HyperParameterScan_multi.py	/^from keras.models import Model, Sequential$/;"	i
Sequential	keras/paramScan/HyperParameterScan_small.py	/^from keras.models import Model, Sequential$/;"	i
Sequential	keras/paramScan/TestingObjective.py	/^from keras.models import Model, Sequential$/;"	i
Sequential	neon/gan3D.py	/^from neon.layers import GeneralizedGANCost, Sequential, Conv, Deconv, Dropout, Pooling$/;"	i
Sequential	neon/potential_gan.py	/^from neon.layers import GeneralizedGANCost, Affine, Linear, Sequential, Conv, Deconv, Dropout, Pooling, BatchNorm$/;"	i
Sequential	networks/AngleGAN/discriminator.py	/^from keras.models import Model, Sequential$/;"	i
Sequential	networks/AngleGAN/generator.py	/^from keras.models import Model, Sequential$/;"	i
T	scripts/gaussian.py	/^T = np.zeros(shape=(nevents*2,1))$/;"	v
TCanvas	keras/analysis/RootAnalysis.py	/^from ROOT import kFALSE, TLegend, TCanvas, gPad, TGraph, gStyle, TProfile$/;"	i
TCanvas	keras/archives/RootAnalysis_multi_pions.py	/^from ROOT import kFALSE, TLegend, TCanvas, gPad, TGraph, gStyle, TProfile$/;"	i
TCanvas	keras/archives/analysis/PythonAnalysis.py	/^from ROOT import TCanvas, TGraph, gStyle, TProfile$/;"	i
TCanvas	keras/eval.py	/^from ROOT import TLegend, TCanvas, TGraph, gStyle, TProfile, TMultiGraph, TPaveStats$/;"	i
TCanvas	keras/misc/Gen_ecalRatio_multi.py	/^from ROOT import TLegend, TCanvas, TGraph, gStyle, TProfile, TMultiGraph, TPaveStats$/;"	i
TCanvas	keras/misc/Gen_ecalRatio_stat.py	/^from ROOT import TLegend, TCanvas, TGraph, gStyle, TProfile, TMultiGraph, TPaveStats$/;"	i
TCanvas	keras/misc/Gen_ecalfit2.py	/^from ROOT import TLegend, TCanvas, TGraph, gStyle, TProfile, TMultiGraph, TPaveStats$/;"	i
TCanvas	keras/misc/result_fit.py	/^from ROOT import TCanvas, TGraph, gStyle, TMultiGraph$/;"	i
TCanvas	keras/misc/root_fit.py	/^from ROOT import TCanvas, TGraph, gStyle$/;"	i
TFile	analysis/h5toroot_evc.py	/^from ROOT import TTree, TFile, AddressOf, gROOT, std, vector$/;"	i
TGraph	keras/analysis/RootAnalysis.py	/^from ROOT import kFALSE, TLegend, TCanvas, gPad, TGraph, gStyle, TProfile$/;"	i
TGraph	keras/archives/RootAnalysis_multi_pions.py	/^from ROOT import kFALSE, TLegend, TCanvas, gPad, TGraph, gStyle, TProfile$/;"	i
TGraph	keras/archives/analysis/PythonAnalysis.py	/^from ROOT import TCanvas, TGraph, gStyle, TProfile$/;"	i
TGraph	keras/eval.py	/^from ROOT import TLegend, TCanvas, TGraph, gStyle, TProfile, TMultiGraph, TPaveStats$/;"	i
TGraph	keras/misc/Gen_ecalRatio_multi.py	/^from ROOT import TLegend, TCanvas, TGraph, gStyle, TProfile, TMultiGraph, TPaveStats$/;"	i
TGraph	keras/misc/Gen_ecalRatio_stat.py	/^from ROOT import TLegend, TCanvas, TGraph, gStyle, TProfile, TMultiGraph, TPaveStats$/;"	i
TGraph	keras/misc/Gen_ecalfit2.py	/^from ROOT import TLegend, TCanvas, TGraph, gStyle, TProfile, TMultiGraph, TPaveStats$/;"	i
TGraph	keras/misc/result_fit.py	/^from ROOT import TCanvas, TGraph, gStyle, TMultiGraph$/;"	i
TGraph	keras/misc/root_fit.py	/^from ROOT import TCanvas, TGraph, gStyle$/;"	i
TLegend	keras/analysis/RootAnalysis.py	/^from ROOT import kFALSE, TLegend, TCanvas, gPad, TGraph, gStyle, TProfile$/;"	i
TLegend	keras/archives/RootAnalysis_multi_pions.py	/^from ROOT import kFALSE, TLegend, TCanvas, gPad, TGraph, gStyle, TProfile$/;"	i
TLegend	keras/eval.py	/^from ROOT import TLegend, TCanvas, TGraph, gStyle, TProfile, TMultiGraph, TPaveStats$/;"	i
TLegend	keras/misc/Gen_ecalRatio_multi.py	/^from ROOT import TLegend, TCanvas, TGraph, gStyle, TProfile, TMultiGraph, TPaveStats$/;"	i
TLegend	keras/misc/Gen_ecalRatio_stat.py	/^from ROOT import TLegend, TCanvas, TGraph, gStyle, TProfile, TMultiGraph, TPaveStats$/;"	i
TLegend	keras/misc/Gen_ecalfit2.py	/^from ROOT import TLegend, TCanvas, TGraph, gStyle, TProfile, TMultiGraph, TPaveStats$/;"	i
TMultiGraph	keras/eval.py	/^from ROOT import TLegend, TCanvas, TGraph, gStyle, TProfile, TMultiGraph, TPaveStats$/;"	i
TMultiGraph	keras/misc/Gen_ecalRatio_multi.py	/^from ROOT import TLegend, TCanvas, TGraph, gStyle, TProfile, TMultiGraph, TPaveStats$/;"	i
TMultiGraph	keras/misc/Gen_ecalRatio_stat.py	/^from ROOT import TLegend, TCanvas, TGraph, gStyle, TProfile, TMultiGraph, TPaveStats$/;"	i
TMultiGraph	keras/misc/Gen_ecalfit2.py	/^from ROOT import TLegend, TCanvas, TGraph, gStyle, TProfile, TMultiGraph, TPaveStats$/;"	i
TMultiGraph	keras/misc/result_fit.py	/^from ROOT import TCanvas, TGraph, gStyle, TMultiGraph$/;"	i
TPaveStats	keras/eval.py	/^from ROOT import TLegend, TCanvas, TGraph, gStyle, TProfile, TMultiGraph, TPaveStats$/;"	i
TPaveStats	keras/misc/Gen_ecalRatio_multi.py	/^from ROOT import TLegend, TCanvas, TGraph, gStyle, TProfile, TMultiGraph, TPaveStats$/;"	i
TPaveStats	keras/misc/Gen_ecalRatio_stat.py	/^from ROOT import TLegend, TCanvas, TGraph, gStyle, TProfile, TMultiGraph, TPaveStats$/;"	i
TPaveStats	keras/misc/Gen_ecalfit2.py	/^from ROOT import TLegend, TCanvas, TGraph, gStyle, TProfile, TMultiGraph, TPaveStats$/;"	i
TProfile	keras/analysis/RootAnalysis.py	/^from ROOT import kFALSE, TLegend, TCanvas, gPad, TGraph, gStyle, TProfile$/;"	i
TProfile	keras/archives/RootAnalysis_multi_pions.py	/^from ROOT import kFALSE, TLegend, TCanvas, gPad, TGraph, gStyle, TProfile$/;"	i
TProfile	keras/archives/analysis/PythonAnalysis.py	/^from ROOT import TCanvas, TGraph, gStyle, TProfile$/;"	i
TProfile	keras/eval.py	/^from ROOT import TLegend, TCanvas, TGraph, gStyle, TProfile, TMultiGraph, TPaveStats$/;"	i
TProfile	keras/misc/Gen_ecalRatio_multi.py	/^from ROOT import TLegend, TCanvas, TGraph, gStyle, TProfile, TMultiGraph, TPaveStats$/;"	i
TProfile	keras/misc/Gen_ecalRatio_stat.py	/^from ROOT import TLegend, TCanvas, TGraph, gStyle, TProfile, TMultiGraph, TPaveStats$/;"	i
TProfile	keras/misc/Gen_ecalfit2.py	/^from ROOT import TLegend, TCanvas, TGraph, gStyle, TProfile, TMultiGraph, TPaveStats$/;"	i
TTree	analysis/h5toroot_evc.py	/^from ROOT import TTree, TFile, AddressOf, gROOT, std, vector$/;"	i
Tanh	neon/potential_gan.py	/^from neon.transforms import Rectlin, Logistic, GANCost, Tanh$/;"	i
Tensor	keras/AngleArch3dGAN.py	/^from tensorflow import py_func, float32, Tensor$/;"	i
Tensor	keras/AngleArch3dGAN_tf2.py	/^from tensorflow import py_function, float32, Tensor$/;"	i
Tensor	networks/AngleGAN/discriminator.py	/^from tensorflow import py_func, float32, Tensor$/;"	i
Tensor	networks/AngleGAN/generator.py	/^from tensorflow import py_func, float32, Tensor$/;"	i
Test	keras/archives/analysis/PythonAnalysis.py	/^Test = False$/;"	v
Test_cache	keras/archives/Data_Generators/GenEnergyTrain.py	/^    Test_cache = GeneratorCacher(Test_gen, BatchSize, max=NTrain,$/;"	v
Test_gen	keras/archives/Data_Generators/GenEnergyTrain.py	/^    Test_gen = Test_genC.first().generate()$/;"	v
Testgen	keras/archives/Data_Generators/AllEnergyTrain.py	/^    Testgen = Test_genC.first().generate()$/;"	v
Testgen	keras/archives/Data_Generators/GenEnergyTrain.py	/^    Testgen = Test_cache.DiskCacheGenerator()                                                             $/;"	v
Train_cache	keras/archives/Data_Generators/GenEnergyTrain.py	/^    Train_cache = GeneratorCacher(Train_gen, BatchSize, max=NTest,$/;"	v
Train_gen	keras/archives/Data_Generators/GenEnergyTrain.py	/^    Train_gen = Train_genC.first().generate()$/;"	v
Traingen	keras/archives/Data_Generators/AllEnergyTrain.py	/^    Traingen = Train_genC.first().generate()$/;"	v
Traingen	keras/archives/Data_Generators/GenEnergyTrain.py	/^    Traingen = Train_cache.DiskCacheGenerator()$/;"	v
UpSampling3D	keras/AngleArch3dGAN.py	/^from keras.layers.convolutional import (UpSampling3D, Conv3D, ZeroPadding3D,$/;"	i
UpSampling3D	keras/AngleArch3dGAN_tf2.py	/^from tensorflow.keras.layers import (UpSampling3D, Conv3D, ZeroPadding3D,$/;"	i
UpSampling3D	keras/EcalEnergyGan.py	/^from keras.layers.convolutional import (UpSampling3D, Conv3D, ZeroPadding3D,$/;"	i
UpSampling3D	keras/archives/architectures_tested/arch10.py	/^from keras.layers.convolutional import (UpSampling3D, Conv3D, ZeroPadding3D,$/;"	i
UpSampling3D	keras/archives/architectures_tested/arch11.py	/^from keras.layers.convolutional import (UpSampling3D, Conv3D, ZeroPadding3D,$/;"	i
UpSampling3D	keras/archives/architectures_tested/arch12.py	/^from keras.layers.convolutional import (UpSampling3D, Conv3D, ZeroPadding3D,$/;"	i
UpSampling3D	keras/archives/architectures_tested/arch13.py	/^from keras.layers.convolutional import (UpSampling3D, Conv3D, ZeroPadding3D,$/;"	i
UpSampling3D	keras/archives/architectures_tested/arch14.py	/^from keras.layers.convolutional import (UpSampling3D, Conv3D, ZeroPadding3D,$/;"	i
UpSampling3D	keras/archives/architectures_tested/arch15.py	/^from keras.layers.convolutional import (UpSampling3D, Conv3D, ZeroPadding3D,$/;"	i
UpSampling3D	keras/archives/architectures_tested/arch16.py	/^from keras.layers.convolutional import (UpSampling3D, Conv3D, ZeroPadding3D,$/;"	i
UpSampling3D	keras/archives/architectures_tested/arch7.py	/^from keras.layers.convolutional import (UpSampling3D, Conv3D, ZeroPadding3D,$/;"	i
UpSampling3D	keras/archives/architectures_tested/arch8.py	/^from keras.layers.convolutional import (UpSampling3D, Conv3D, ZeroPadding3D,$/;"	i
UpSampling3D	keras/archives/architectures_tested/arch9.py	/^from keras.layers.convolutional import (UpSampling3D, Conv3D, ZeroPadding3D,$/;"	i
UpSampling3D	keras/archives/architectures_tested/archlayer6.py	/^from keras.layers.convolutional import (UpSampling3D, Conv3D, ZeroPadding3D,$/;"	i
UpSampling3D	keras/archives/architectures_tested/ecalvegan2.py	/^from keras.layers.convolutional import (UpSampling3D, Conv3D, ZeroPadding3D,$/;"	i
UpSampling3D	keras/archives/architectures_tested/ecalvegan3.py	/^from keras.layers.convolutional import (UpSampling3D, Conv3D, ZeroPadding3D,$/;"	i
UpSampling3D	keras/archives/architectures_tested/ecalvegan4.py	/^from keras.layers.convolutional import (UpSampling3D, Conv3D, ZeroPadding3D,$/;"	i
UpSampling3D	keras/archives/architectures_tested/new_arch.py	/^from keras.layers.convolutional import (UpSampling3D, Conv3D, ZeroPadding3D,$/;"	i
UpSampling3D	keras/archives/log/EcalEnergyGanlog.py	/^from keras.layers.convolutional import (UpSampling3D, Conv3D, ZeroPadding3D,$/;"	i
UpSampling3D	keras/archives/normInit/normalInit.py	/^from keras.layers.convolutional import (UpSampling3D, Conv3D, ZeroPadding3D,$/;"	i
UpSampling3D	keras/paramScan/HyperParameterScan.py	/^from keras.layers.convolutional import (UpSampling3D, Conv3D, ZeroPadding3D,$/;"	i
UpSampling3D	keras/paramScan/HyperParameterScan_multi.py	/^from keras.layers.convolutional import (UpSampling3D, Conv3D, ZeroPadding3D,$/;"	i
UpSampling3D	keras/paramScan/HyperParameterScan_small.py	/^from keras.layers.convolutional import (UpSampling3D, Conv3D, ZeroPadding3D,$/;"	i
UpSampling3D	keras/paramScan/TestingObjective.py	/^from keras.layers.convolutional import (UpSampling3D, Conv3D, ZeroPadding3D,$/;"	i
UpSampling3D	networks/AngleGAN/discriminator.py	/^from keras.layers.convolutional import (UpSampling3D, Conv3D, ZeroPadding3D,$/;"	i
UpSampling3D	networks/AngleGAN/generator.py	/^from keras.layers.convolutional import (UpSampling3D, Conv3D, ZeroPadding3D,$/;"	i
X	keras/archives/Data_Generators/AllEnergyTrain.py	/^            X = np.concatenate((image_batch, generated_images))$/;"	v
X	keras/archives/Data_Generators/GenEnergyTrain.py	/^            X = np.concatenate((image_batch, generated_images))$/;"	v
X	keras/archives/analysis/analysis_fixed_cont.py	/^X=np.array(c[:n_jets])$/;"	v
X	keras/archives/analysis/detailed_analysis_flex.py	/^X=np.array(c[:n_jets])$/;"	v
X	keras/archives/normInit/normalInitTrain.py	/^        X = np.concatenate((X_test, generated_images))$/;"	v
X	keras/archives/normInit/normalInitTrain.py	/^    X=np.array(d.get('ECAL'))$/;"	v
X	keras/archives/train/particle3Dtrain.py	/^        X = np.concatenate((X_test, generated_images))$/;"	v
X	keras/eval.py	/^X = X[:num_events]$/;"	v
X	keras/generate_pred.py	/^X = X[:num_events]$/;"	v
X	keras/misc/Gen_ecalRatio_multi.py	/^X=np.array(d.get('ECAL')[0:num_events], np.float64)                             $/;"	v
X	keras/misc/Gen_ecalRatio_stat.py	/^X=np.array(d.get('ECAL')[0:num_events], np.float64)                             $/;"	v
X	keras/misc/Gen_ecalfit2.py	/^X=np.array(d.get('ECAL')[0:num_events], np.float64)                             $/;"	v
X	keras/misc/data_info.py	/^    X=np.array(d.get('ECAL'))                                                  $/;"	v
X	keras/misc/data_info.py	/^   X=np.array(d.get('ECAL'))$/;"	v
X	keras/misc/ecal_primary.py	/^    X=np.array(d.get('ECAL')[0:num_events])                                        $/;"	v
X	keras/misc/ecal_primary.py	/^   X=np.array(d.get('ECAL'))$/;"	v
X	keras/misc/root_fit.py	/^X=np.array(d.get('ECAL')[0:num_events], np.float32)                             $/;"	v
X	neon/potential_gan.py	/^X = (X- mean)\/max_elem$/;"	v
X	scripts/data_info.py	/^    X=np.array(d.get('ECAL'))                                                  $/;"	v
X	scripts/data_info.py	/^   X=np.array(d.get('ECAL'))$/;"	v
X_test	keras/archives/normInit/normalInitTrain.py	/^    X_test = X_test.astype(np.float32)$/;"	v
X_test	keras/archives/normInit/normalInitTrain.py	/^    X_test = np.array(np.expand_dims(X_test, axis=-1))$/;"	v
X_test	keras/archives/train/particle3Dtrain.py	/^    X_test = X_test.astype(np.float32) \/ 100$/;"	v
X_test	keras/archives/train/particle3Dtrain.py	/^    X_test = np.expand_dims(X_test, axis=-1)$/;"	v
X_test	keras/test.py	/^           X_test = np.concatenate((X_test, X_temp))$/;"	v
X_test	keras/test.py	/^          X_test =  np.swapaxes(X_test, -1, 1)$/;"	v
X_train	keras/archives/normInit/normalInitTrain.py	/^    X_train = X_train.astype(np.float32)  $/;"	v
X_train	keras/archives/normInit/normalInitTrain.py	/^    X_train =np.array(np.expand_dims(X_train, axis=-1))$/;"	v
X_train	keras/archives/train/particle3Dtrain.py	/^    X_train = X_train.astype(np.float32) \/ 100$/;"	v
X_train	keras/archives/train/particle3Dtrain.py	/^    X_train = np.expand_dims(X_train, axis=-1)$/;"	v
Y	keras/archives/analysis/analysis_fixed_cont.py	/^Y=np.expand_dims(y, axis=-1)$/;"	v
Y	keras/archives/analysis/detailed_analysis_flex.py	/^Y=np.expand_dims(y, axis=-1)$/;"	v
Y	keras/eval.py	/^Y = Y[:num_events]$/;"	v
Y	keras/generate_pred.py	/^Y = Y[:num_events]$/;"	v
Y	keras/misc/Gen_ecalRatio_multi.py	/^Y = Y$/;"	v
Y	keras/misc/Gen_ecalRatio_multi.py	/^Y=np.array(d.get('target')[0:num_events][:,1], np.float64)$/;"	v
Y	keras/misc/Gen_ecalRatio_stat.py	/^Y = Y$/;"	v
Y	keras/misc/Gen_ecalRatio_stat.py	/^Y=np.array(d.get('target')[0:num_events][:,1], np.float64)$/;"	v
Y	keras/misc/Gen_ecalfit2.py	/^Y = Y\/100$/;"	v
Y	keras/misc/Gen_ecalfit2.py	/^Y=np.array(d.get('target')[0:num_events][:,1], np.float64)$/;"	v
Y	keras/misc/data_info.py	/^    Y=(np.array(e[:,1]))$/;"	v
Y	keras/misc/data_info.py	/^   Y=(np.array(e[:,0, 1]))$/;"	v
Y	keras/misc/ecal_primary.py	/^    Y=(np.array(e[:,1]))$/;"	v
Y	keras/misc/ecal_primary.py	/^   Y=(np.array(e[:,0, 1]))$/;"	v
Y	keras/misc/ecal_primary.py	/^Y = Y\/100$/;"	v
Y	keras/misc/root_fit.py	/^Y = Y$/;"	v
Y	keras/misc/root_fit.py	/^Y=np.array(d.get('target')[0:num_events][:,1], np.float32)$/;"	v
Y	scripts/data_info.py	/^    Y=(np.array(e[:,1]))$/;"	v
Y	scripts/data_info.py	/^   Y=(np.array(e[:,0, 1]))$/;"	v
Y_test	keras/test.py	/^           Y_test = np.concatenate((Y_test, Y_temp))$/;"	v
Z	scripts/gaussian.py	/^Z = np.zeros(shape=(nevents*2, 25, 25, 25))$/;"	v
ZeroPadding3D	keras/AngleArch3dGAN.py	/^from keras.layers.convolutional import (UpSampling3D, Conv3D, ZeroPadding3D,$/;"	i
ZeroPadding3D	keras/AngleArch3dGAN_tf2.py	/^from tensorflow.keras.layers import (UpSampling3D, Conv3D, ZeroPadding3D,$/;"	i
ZeroPadding3D	keras/EcalEnergyGan.py	/^from keras.layers.convolutional import (UpSampling3D, Conv3D, ZeroPadding3D,$/;"	i
ZeroPadding3D	keras/archives/architectures_tested/arch10.py	/^from keras.layers.convolutional import (UpSampling3D, Conv3D, ZeroPadding3D,$/;"	i
ZeroPadding3D	keras/archives/architectures_tested/arch11.py	/^from keras.layers.convolutional import (UpSampling3D, Conv3D, ZeroPadding3D,$/;"	i
ZeroPadding3D	keras/archives/architectures_tested/arch12.py	/^from keras.layers.convolutional import (UpSampling3D, Conv3D, ZeroPadding3D,$/;"	i
ZeroPadding3D	keras/archives/architectures_tested/arch13.py	/^from keras.layers.convolutional import (UpSampling3D, Conv3D, ZeroPadding3D,$/;"	i
ZeroPadding3D	keras/archives/architectures_tested/arch14.py	/^from keras.layers.convolutional import (UpSampling3D, Conv3D, ZeroPadding3D,$/;"	i
ZeroPadding3D	keras/archives/architectures_tested/arch15.py	/^from keras.layers.convolutional import (UpSampling3D, Conv3D, ZeroPadding3D,$/;"	i
ZeroPadding3D	keras/archives/architectures_tested/arch16.py	/^from keras.layers.convolutional import (UpSampling3D, Conv3D, ZeroPadding3D,$/;"	i
ZeroPadding3D	keras/archives/architectures_tested/arch7.py	/^from keras.layers.convolutional import (UpSampling3D, Conv3D, ZeroPadding3D,$/;"	i
ZeroPadding3D	keras/archives/architectures_tested/arch8.py	/^from keras.layers.convolutional import (UpSampling3D, Conv3D, ZeroPadding3D,$/;"	i
ZeroPadding3D	keras/archives/architectures_tested/arch9.py	/^from keras.layers.convolutional import (UpSampling3D, Conv3D, ZeroPadding3D,$/;"	i
ZeroPadding3D	keras/archives/architectures_tested/archlayer6.py	/^from keras.layers.convolutional import (UpSampling3D, Conv3D, ZeroPadding3D,$/;"	i
ZeroPadding3D	keras/archives/architectures_tested/ecalvegan2.py	/^from keras.layers.convolutional import (UpSampling3D, Conv3D, ZeroPadding3D,$/;"	i
ZeroPadding3D	keras/archives/architectures_tested/ecalvegan3.py	/^from keras.layers.convolutional import (UpSampling3D, Conv3D, ZeroPadding3D,$/;"	i
ZeroPadding3D	keras/archives/architectures_tested/ecalvegan4.py	/^from keras.layers.convolutional import (UpSampling3D, Conv3D, ZeroPadding3D,$/;"	i
ZeroPadding3D	keras/archives/architectures_tested/new_arch.py	/^from keras.layers.convolutional import (UpSampling3D, Conv3D, ZeroPadding3D,$/;"	i
ZeroPadding3D	keras/archives/log/EcalEnergyGanlog.py	/^from keras.layers.convolutional import (UpSampling3D, Conv3D, ZeroPadding3D,$/;"	i
ZeroPadding3D	keras/archives/normInit/normalInit.py	/^from keras.layers.convolutional import (UpSampling3D, Conv3D, ZeroPadding3D,$/;"	i
ZeroPadding3D	keras/paramScan/HyperParameterScan.py	/^from keras.layers.convolutional import (UpSampling3D, Conv3D, ZeroPadding3D,$/;"	i
ZeroPadding3D	keras/paramScan/HyperParameterScan_multi.py	/^from keras.layers.convolutional import (UpSampling3D, Conv3D, ZeroPadding3D,$/;"	i
ZeroPadding3D	keras/paramScan/HyperParameterScan_small.py	/^from keras.layers.convolutional import (UpSampling3D, Conv3D, ZeroPadding3D,$/;"	i
ZeroPadding3D	keras/paramScan/TestingObjective.py	/^from keras.layers.convolutional import (UpSampling3D, Conv3D, ZeroPadding3D,$/;"	i
ZeroPadding3D	networks/AngleGAN/discriminator.py	/^from keras.layers.convolutional import (UpSampling3D, Conv3D, ZeroPadding3D,$/;"	i
ZeroPadding3D	networks/AngleGAN/generator.py	/^from keras.layers.convolutional import (UpSampling3D, Conv3D, ZeroPadding3D,$/;"	i
_GAUSSIAN_FILTER	metrics/swd.py	/^_GAUSSIAN_FILTER = gaussian_filter.reshape(5, 5, 5)$/;"	v
__all__	metrics/ssim.py	/^__all__ = ['structural_similarity']$/;"	v
__call__	keras/paramScan/HyperParameterScan_multi.py	/^    def __call__(self, X):$/;"	m	class:externalfunc	file:
__getitem__	dataset.py	/^    def __getitem__(self, idx):$/;"	m	class:NumpyDataset	file:
__getitem__	dataset.py	/^    def __getitem__(self, idx):$/;"	m	class:NumpyPathDataset	file:
__init__	dataset.py	/^    def __init__(self, npy_dir, scratch_dir, copy_files, is_correct_phase):$/;"	m	class:NumpyDataset
__init__	dataset.py	/^    def __init__(self, npy_dir, scratch_dir, copy_files, is_correct_phase):$/;"	m	class:NumpyPathDataset
__init__	keras/paramScan/HyperParameterScan_multi.py	/^    def __init__(self , prog, names):$/;"	m	class:externalfunc
__init__	utils.py	/^    def __init__(self, f):$/;"	m	class:MPMap
__iter__	dataset.py	/^    def __iter__(self):$/;"	m	class:NumpyDataset	file:
__iter__	dataset.py	/^    def __iter__(self):$/;"	m	class:NumpyPathDataset	file:
__len__	dataset.py	/^    def __len__(self):$/;"	m	class:NumpyDataset	file:
__len__	dataset.py	/^    def __len__(self):$/;"	m	class:NumpyPathDataset	file:
_default_graph_def_fn	metrics/fid.py	/^def _default_graph_def_fn():$/;"	f
_get_inception_layer	metrics/fid_new.py	/^def _get_inception_layer(sess):$/;"	f
_progress	metrics/fid.py	/^        def _progress(count, block_size, total_size):$/;"	f	function:get_graph_def_from_url_tarball
_symmetric_matrix_square_root	metrics/fid.py	/^def _symmetric_matrix_square_root(mat, eps=1e-10):$/;"	f
_validate_images	metrics/fid.py	/^def _validate_images(images, image_size):$/;"	f
a	keras/misc/Gen_ecalfit2.py	/^a = np.ndarray( [num_events] )$/;"	v
a	keras/misc/root_fit.py	/^a = np.ndarray( [num_events] )$/;"	v
absolute_import	metrics/fid_new.py	/^from __future__ import absolute_import, division, print_function$/;"	i
act	networks/ops.py	/^def act(x, activation, param=None):$/;"	f
actdir	keras/archives/analysis/analysis_fixed_cont.py	/^actdir = plots_dir + 'Actual'$/;"	v
actdir	keras/archives/analysis/detailed_analysis_flex.py	/^actdir = plots_dir + 'Actual'$/;"	v
activations2distance	metrics/fid.py	/^def activations2distance(session, activations1, activations2, act1, act2):$/;"	f
adam_beta_1	keras/archives/train/particle3Dtrain.py	/^    adam_beta_1 = 0.5$/;"	v
adam_lr	keras/archives/train/particle3Dtrain.py	/^    adam_lr = 0.0002$/;"	v
allow_soft_placement	main.py	/^                                allow_soft_placement=True,$/;"	v
allow_soft_placement	scripts/sara_main.py	/^                                allow_soft_placement=True,$/;"	v
analyse	keras/paramScan/HyperParameterScan.py	/^def analyse(d, g, X, Y, gen_weights, disc_weights, latent=200):$/;"	f
analyse	keras/paramScan/HyperParameterScan_multi.py	/^def analyse(g, gen_weights, datapath, optimizer, read_data=True, save_data=False):$/;"	f
analyse	keras/paramScan/HyperParameterScan_small.py	/^def analyse(g, read_data, save_data, gen_weights, Testfiles):$/;"	f
analyse	keras/paramScan/TestingObjective.py	/^def analyse(g, read_data, save_data, gen_weights, datapath, sorted_path, optimizer, xscale=100, particle="Ele"):$/;"	f
analysis	keras/AngleTrain3dGAN_hvd.py	/^import analysis.utils.GANutils as gan$/;"	i
analysis	keras/AngleTrain3dGAN_hvd_tf2.py	/^import analysis.utils.GANutils as gan$/;"	i
analysis	keras/EcalEnergyTrain_hvd.py	/^    analysis=params.analysis # if analysing$/;"	v
analysis	keras/EcalEnergyTrain_hvd.py	/^import analysis.utils.GANutils as gan # some common functions for gan$/;"	i
analysis	keras/test.py	/^    analysis=params.analysis # if analysing$/;"	v
analysis	keras/test.py	/^import analysis.utils.GANutils as gan # some common functions for gan$/;"	i
analysis	scripts/main.py	/^import analysis.utils.GANutils as gan$/;"	i
analysisTest	keras/paramScan/HyperParameterScan.py	/^def analysisTest(X, y, weightpath, resultfile):$/;"	f
analysis_history	keras/test.py	/^    analysis_history = defaultdict(list)$/;"	v
apply_bias	networks/ops.py	/^def apply_bias(x, lrmul=1):$/;"	f
apply_noise	networks/ops.py	/^def apply_noise(x):$/;"	f
argparse	analysis/analysis3D.py	/^import argparse$/;"	i
argparse	generate.py	/^import argparse$/;"	i
argparse	keras/AngleTrain3dGAN_hvd.py	/^import argparse$/;"	i
argparse	keras/AngleTrain3dGAN_hvd_tf2.py	/^import argparse$/;"	i
argparse	keras/EcalEnergyTrain_hvd.py	/^import argparse$/;"	i
argparse	keras/archives/Data_Generators/AllEnergyTrain.py	/^import argparse$/;"	i
argparse	keras/archives/Data_Generators/GenEnergyTrain.py	/^import argparse$/;"	i
argparse	keras/archives/log/TrainPionslog.py	/^import argparse$/;"	i
argparse	keras/archives/log/TrainPionslog_dual.py	/^import argparse$/;"	i
argparse	keras/archives/normInit/normalInitTrain.py	/^import argparse$/;"	i
argparse	keras/archives/train/TrainChPions.py	/^import argparse$/;"	i
argparse	keras/archives/train/Train_rootfit_scaled_2D.py	/^import argparse$/;"	i
argparse	keras/archives/train/Train_single_pass.py	/^import argparse$/;"	i
argparse	keras/archives/train/particle3Dtrain.py	/^import argparse$/;"	i
argparse	keras/test.py	/^import argparse$/;"	i
argparse	main.py	/^import argparse$/;"	i
argparse	plot.py	/^import argparse$/;"	i
argparse	scripts/main.py	/^import argparse$/;"	i
argparse	scripts/sara_main.py	/^import argparse$/;"	i
args	main.py	/^    args = parser.parse_args()$/;"	v
args	neon/gan3D.py	/^args = parser.parse_args()$/;"	v
args	scripts/sara_main.py	/^    args = parser.parse_args()$/;"	v
arr_slices	metrics/swd.py	/^            arr_slices = uniform_box_sampler(noise_black_patches1, min_width=(1, 1, 4, 8, 8,),$/;"	v
arr_slices	metrics/swd.py	/^            arr_slices = uniform_box_sampler(noise_black_patches2, min_width=(1, 1, 4, 8, 8,),$/;"	v
array	keras/eval.py	/^from array import array$/;"	i
array	keras/generate_pred.py	/^from array import array$/;"	i
array	keras/misc/Gen_ecalRatio_multi.py	/^from array import array$/;"	i
array	keras/misc/Gen_ecalRatio_stat.py	/^from array import array$/;"	i
array	keras/misc/Gen_ecalfit2.py	/^from array import array$/;"	i
array	keras/misc/result_fit.py	/^from array import array$/;"	i
array	keras/misc/root_fit.py	/^from array import array$/;"	i
array_ops	metrics/fid.py	/^from tensorflow.python.ops import array_ops$/;"	i
array_ops	utils.py	/^from tensorflow.python.ops import array_ops$/;"	i
ast	utils.py	/^import ast$/;"	i
aux_out	keras/archives/analysis/analysis_fixed_cont.py	/^    aux_out = f.get('AUX')$/;"	v
aux_out	keras/archives/analysis/detailed_analysis_flex.py	/^    aux_out = f.get('AUX')$/;"	v
aux_y	keras/archives/Data_Generators/AllEnergyTrain.py	/^            aux_y = np.concatenate((energy_batch, sampled_energies), axis=0)$/;"	v
aux_y	keras/archives/Data_Generators/GenEnergyTrain.py	/^            aux_y = np.concatenate((energy_batch, sampled_energies), axis=0)$/;"	v
aux_y	keras/archives/normInit/normalInitTrain.py	/^        aux_y = np.concatenate((y_test, sampled_energies), axis=0)$/;"	v
aux_y	keras/archives/train/particle3Dtrain.py	/^        aux_y = np.concatenate((y_test, sampled_labels), axis=0)$/;"	v
avg_pool3d	networks/ops.py	/^def avg_pool3d(x, factor=2, gain=1):$/;"	f
avg_unpool3d	networks/ops.py	/^def avg_unpool3d(x, factor=2, gain=1):$/;"	f
b	keras/misc/Gen_ecalfit2.py	/^b = np.ndarray( [num_events] )$/;"	v
b	keras/misc/root_fit.py	/^b = np.ndarray( [num_events] )$/;"	v
base_dim	networks/pgan/discriminator.py	/^    base_dim = 1024$/;"	v
base_dim	networks/pgan/generator.py	/^    base_dim = 1024$/;"	v
base_dim	networks/test_network.py	/^    base_dim = 512$/;"	v
base_lr	caffe/caffe_train.py	/^  base_lr = base_lr * np.power(gamma, (np.floor(it \/ stepsize)))$/;"	v
base_lr	caffe/caffe_train.py	/^base_lr = 0.01$/;"	v
base_shape	networks/pgan/discriminator.py	/^    base_shape = [1, 1, 4, 4]$/;"	v
base_shape	networks/pgan/generator.py	/^    base_shape = [1, 1, 4, 4]$/;"	v
base_shape	networks/test_network.py	/^    base_shape = [1, 1, 4, 4]$/;"	v
batch_size	caffe/caffe_train.py	/^batch_size = 100$/;"	v
batch_size	caffe/creating_proto.py	/^batch_size = 100$/;"	v
batch_size	keras/EcalEnergyTrain_hvd.py	/^    batch_size = params.batchsize #batch size$/;"	v
batch_size	keras/archives/Data_Generators/AllEnergyTrain.py	/^    batch_size = 100$/;"	v
batch_size	keras/archives/Data_Generators/GenEnergyTrain.py	/^    batch_size = 100$/;"	v
batch_size	keras/archives/analysis/fixed_analysis_flex.py	/^batch_size=100$/;"	v
batch_size	keras/archives/log/TrainPionslog.py	/^    batch_size = params.batchsize #batch size$/;"	v
batch_size	keras/archives/log/TrainPionslog_dual.py	/^    batch_size = params.batchsize #batch size$/;"	v
batch_size	keras/archives/normInit/normalInitTrain.py	/^    batch_size = 128$/;"	v
batch_size	keras/archives/train/Train_rootfit_scaled_2D.py	/^    batch_size = params.batchsize #batch size$/;"	v
batch_size	keras/archives/train/Train_single_pass.py	/^    batch_size = params.batchsize #batch size$/;"	v
batch_size	keras/archives/train/particle3Dtrain.py	/^    batch_size = 100$/;"	v
batch_size	keras/test.py	/^    batch_size = params.batchsize #batch size$/;"	v
batch_transform	keras/archives/train/Train_single_pass.py	/^def batch_transform(g, x, y, latent_size):$/;"	f
batches	keras/archives/Data_Generators/AllEnergyTrain.py	/^    batches = 0$/;"	v
batches	keras/archives/Data_Generators/GenEnergyTrain.py	/^    batches = 0$/;"	v
bce	networks/loss.py	/^from networks.pgan.loss_utils import bce, mae, mape  # loss functions used for loss_fn='anglegan'$/;"	i
bce	networks/pgan/loss_utils.py	/^def bce(output, target, from_logits=False):$/;"	f
be	networks/loss.py	/^from networks.pgan.loss_utils import ecal_sum, ecal_angle # physics functions used for training the discriminator (should be in conditional lambda layer)$/;"	i
bins	analysis/analysis3D.py	/^bins = np.linspace(0, 1, 30)$/;"	v
bins	keras/misc/data_info.py	/^bins = np.arange(0, 25, 1)$/;"	v
bins	scripts/data_info.py	/^bins = np.arange(0, 25, 1)$/;"	v
bit_flip	caffe/caffe_train.py	/^def bit_flip(x, prob=0.05):$/;"	f
bit_flip	keras/archives/Data_Generators/AllEnergyTrain.py	/^def bit_flip(x, prob=0.05):$/;"	f
bit_flip	keras/archives/Data_Generators/GenEnergyTrain.py	/^def bit_flip(x, prob=0.05):$/;"	f
bit_flip	keras/archives/normInit/normalInitTrain.py	/^def bit_flip(x, prob=0.05):$/;"	f
bit_flip	keras/archives/train/particle3Dtrain.py	/^def bit_flip(x, prob=0.05):$/;"	f
bit_flip	keras/paramScan/HyperParameterScan.py	/^def bit_flip(x, prob=0.05):$/;"	f
bit_flip	keras/paramScan/HyperParameterScan_multi.py	/^def bit_flip(x, prob=0.05):$/;"	f
bit_flip	keras/paramScan/HyperParameterScan_small.py	/^def bit_flip(x, prob=0.05):$/;"	f
black_noise1	metrics/swd.py	/^    black_noise1 = const_batch1 + np.random.randn(*const_batch1.shape)$/;"	v
black_noise2	metrics/swd.py	/^    black_noise2 = const_batch1 + np.random.randn(*const_batch1.shape)$/;"	v
build_discriminator	analysis/analysis3D.py	/^from gan3D import discriminator as build_discriminator$/;"	i
build_discriminator	keras/archives/analysis/analysis_fixed_cont.py	/^from ecalvegan import discriminator as build_discriminator$/;"	i
build_discriminator	keras/archives/analysis/detailed_analysis_flex.py	/^from vegan import discriminator as build_discriminator$/;"	i
build_discriminator	keras/archives/analysis/fixed_analysis_flex.py	/^from vegan import discriminator as build_discriminator$/;"	i
build_generator	analysis/analysis3D.py	/^from gan3D import generator as build_generator$/;"	i
build_generator	keras/archives/analysis/analysis_fixed_cont.py	/^from ecalvegan import generator as build_generator$/;"	i
build_generator	keras/archives/analysis/detailed_analysis_flex.py	/^from vegan import generator as build_generator$/;"	i
build_generator	keras/archives/analysis/fixed_analysis_flex.py	/^from vegan import generator as build_generator$/;"	i
c	keras/archives/analysis/analysis_fixed_cont.py	/^c=np.array(d.get('ECAL'))$/;"	v
c	keras/archives/analysis/detailed_analysis_flex.py	/^c=np.array(d.get('ECAL'))$/;"	v
c	keras/archives/analysis/fixed_analysis_flex.py	/^         c=np.array(d.get('ECAL'))$/;"	v
c	keras/eval.py	/^c=TCanvas("c" ,"Ecal\/Ep versus Ep for Data and Generated Events" ,200 ,10 ,700 ,500) #make nice$/;"	v
c	keras/misc/Gen_ecalRatio_multi.py	/^c=TCanvas("c" ,"Ecal\/Ep versus Ep for Data and Generated Events" ,200 ,10 ,700 ,500) #make nice$/;"	v
c	keras/misc/Gen_ecalRatio_stat.py	/^c=TCanvas("c" ,"Ecal\/Ep versus Ep for Data and Generated Events" ,200 ,10 ,700 ,500) #make nice$/;"	v
c	keras/misc/Gen_ecalfit2.py	/^c = np.ndarray( [num_events] )$/;"	v
c1	keras/misc/Gen_ecalfit2.py	/^c1=TCanvas("c1" ,"Ecal\/Ep versus Ep for Data and Generated Events" ,200 ,10 ,700 ,500) #make nice$/;"	v
c1	keras/misc/result_fit.py	/^c1=TCanvas("c1" ,"Data" ,200 ,10 ,700 ,500) #make nice$/;"	v
c1	keras/misc/root_fit.py	/^c1=TCanvas("c1" ,"Data" ,200 ,10 ,700 ,500) #make nice$/;"	v
cache_filename	keras/archives/Data_Generators/GenEnergyTrain.py	/^                          cache_filename=test_file,$/;"	v
cache_filename	keras/archives/Data_Generators/GenEnergyTrain.py	/^                          cache_filename=train_file,$/;"	v
caffe	caffe/caffe_train.py	/^import caffe$/;"	i
caffe	caffe/creating_proto.py	/^import caffe$/;"	i
caffe_root	caffe/caffe_train.py	/^caffe_root='\/data\/gkhattak\/caffe\/'$/;"	v
caffe_root	caffe/creating_proto.py	/^caffe_root='\/data\/gkhattak\/caffe\/'$/;"	v
calculate_activation_statistics	metrics/fid_new.py	/^def calculate_activation_statistics(images, sess, batch_size=50, verbose=False):$/;"	f
calculate_activation_statistics_from_volume	metrics/fid_new.py	/^def calculate_activation_statistics_from_volume(volume, sess, batch_size=64, verbose=False):$/;"	f
calculate_fid_given_batch_volumes	generate.py	/^from metrics import (calculate_fid_given_batch_volumes, get_swd_for_volumes,$/;"	i
calculate_fid_given_batch_volumes	main.py	/^from metrics import (calculate_fid_given_batch_volumes, get_swd_for_volumes,get_normalized_root_mse, get_mean_squared_error, get_psnr, get_ssim)$/;"	i
calculate_fid_given_batch_volumes	metrics/__init__.py	/^from metrics.fid_new import calculate_fid_given_batch_volumes$/;"	i
calculate_fid_given_batch_volumes	metrics/fid_new.py	/^def calculate_fid_given_batch_volumes(volumes_batch_real, volumes_batch_fake, sess, inception_path='', data_format='NCDHW'):$/;"	f
calculate_fid_given_batch_volumes	scripts/sara_main.py	/^from metrics import (calculate_fid_given_batch_volumes, get_swd_for_volumes,$/;"	i
calculate_fid_given_volumes	metrics/fid_new.py	/^def calculate_fid_given_volumes(volume_real, volume_fake, inception_path, sess):$/;"	f
calculate_frechet_distance	metrics/fid_new.py	/^def calculate_frechet_distance(mu1, sigma1, mu2, sigma2, eps=1e-6):$/;"	f
calculate_gain	networks/ops.py	/^def calculate_gain(activation, param=None):$/;"	f
callbacks	keras/AngleTrain3dGAN_hvd_tf2.py	/^from tensorflow.keras import callbacks$/;"	i
callbacks	neon/potential_gan.py	/^callbacks = Callbacks(gan, eval_set=valid_set)$/;"	v
check_or_download_inception	metrics/fid_new.py	/^def check_or_download_inception(inception_path):$/;"	f
check_shape_equality	metrics/ssim.py	/^from skimage._shared.utils import warn, check_shape_equality$/;"	i
chi2	keras/misc/Gen_ecalRatio_stat.py	/^   chi2 = hist_gan[0].Chi2Test(hist_gan[i], "UU")$/;"	v
chisquare	keras/misc/ecal_primary.py	/^from scipy.stats import chisquare $/;"	i
close	utils.py	/^    def close(self):$/;"	m	class:MPMap
cm	keras/archives/analysis/analysis_fixed_cont.py	/^import matplotlib.cm as cm$/;"	i
cm	keras/archives/analysis/detailed_analysis_flex.py	/^import matplotlib.cm as cm$/;"	i
cm	keras/archives/analysis/fixed_analysis_flex.py	/^import matplotlib.cm as cm$/;"	i
cm	keras/generate_pred.py	/^import matplotlib.cm as cm$/;"	i
cm	keras/misc/Gen_ecalRatio_multi.py	/^import matplotlib.cm as cm$/;"	i
cm	keras/misc/Gen_ecalRatio_stat.py	/^import matplotlib.cm as cm$/;"	i
cm	keras/misc/Gen_ecalfit2.py	/^import matplotlib.cm as cm$/;"	i
cm	keras/misc/data_info.py	/^import matplotlib.cm as cm$/;"	i
cm	keras/misc/ecal_primary.py	/^import matplotlib.cm as cm$/;"	i
cm	keras/misc/result_fit.py	/^import matplotlib.cm as cm$/;"	i
cm	keras/misc/root_fit.py	/^import matplotlib.cm as cm$/;"	i
cm	keras/paramScan/HyperParameterScan.py	/^import matplotlib.cm as cm$/;"	i
cm	keras/paramScan/HyperParameterScan_multi.py	/^import matplotlib.cm as cm$/;"	i
cm	keras/paramScan/HyperParameterScan_small.py	/^import matplotlib.cm as cm$/;"	i
cm	keras/paramScan/TestingObjective.py	/^import matplotlib.cm as cm$/;"	i
cm	scripts/data_info.py	/^import matplotlib.cm as cm$/;"	i
cm	scripts/gaussian.py	/^from matplotlib import cm $/;"	i
color	keras/eval.py	/^  color = color + 2$/;"	v
color	keras/eval.py	/^color =2$/;"	v
color	keras/generate_pred.py	/^color =2$/;"	v
color	keras/misc/Gen_ecalRatio_multi.py	/^color = [4, 2, 3, 6, 7, 8]$/;"	v
color	keras/misc/Gen_ecalRatio_stat.py	/^   color = color + 2$/;"	v
color	keras/misc/Gen_ecalRatio_stat.py	/^color =2$/;"	v
combinations	get_args.py	/^combinations = list(itertools.product(*PARAMS_LISTS))$/;"	v
combined	keras/archives/Data_Generators/AllEnergyTrain.py	/^    combined = Model($/;"	v
combined	keras/archives/Data_Generators/GenEnergyTrain.py	/^    combined = Model($/;"	v
combined	keras/archives/normInit/normalInitTrain.py	/^    combined = Model($/;"	v
combined	keras/archives/train/particle3Dtrain.py	/^    combined = Model($/;"	v
comdir	keras/archives/analysis/analysis_fixed_cont.py	/^comdir = plots_dir + 'Combined'$/;"	v
comdir	keras/archives/analysis/detailed_analysis_flex.py	/^comdir = plots_dir + 'Combined'$/;"	v
common	keras/EcalEnergyTrain_hvd.py	/^import analysis.utils.GANutils as gan # some common functions for gan$/;"	i
common	keras/analysis/utils/RootPlotsGAN.py	/^import ROOTutils as my # common utility functions for root$/;"	i
common	keras/test.py	/^import analysis.utils.GANutils as gan # some common functions for gan$/;"	i
common	scripts/RootPlotsGAN.py	/^import ROOTutils as my # common utility functions for root$/;"	i
conditional	networks/loss.py	/^from networks.pgan.loss_utils import ecal_sum, ecal_angle # physics functions used for training the discriminator (should be in conditional lambda layer)$/;"	i
config	keras/EcalEnergyTrain_hvd.py	/^    config = tf.ConfigProto()#(log_device_placement=True)$/;"	v
config	keras/archives/Data_Generators/AllEnergyTrain.py	/^    config = tf.ConfigProto(log_device_placement=True)$/;"	v
config	keras/archives/Data_Generators/GenEnergyTrain.py	/^    config = tf.ConfigProto(log_device_placement=True)$/;"	v
config	keras/archives/log/TrainPionslog.py	/^    config = tf.ConfigProto(log_device_placement=True)$/;"	v
config	keras/archives/log/TrainPionslog_dual.py	/^    config = tf.ConfigProto(log_device_placement=True)$/;"	v
config	keras/archives/normInit/normalInitTrain.py	/^    config = tf.ConfigProto(log_device_placement=True)$/;"	v
config	keras/archives/train/Train_rootfit_scaled_2D.py	/^    config = tf.ConfigProto(log_device_placement=True)$/;"	v
config	keras/archives/train/Train_single_pass.py	/^    config = tf.ConfigProto(log_device_placement=True)$/;"	v
config	keras/archives/train/particle3Dtrain.py	/^    config = tf.ConfigProto(log_device_placement=True)$/;"	v
config	keras/paramScan/HyperParameterScan.py	/^config = tf.ConfigProto(log_device_placement=True)$/;"	v
config	keras/paramScan/HyperParameterScan_multi.py	/^config = tf.ConfigProto(log_device_placement=True)$/;"	v
config	keras/paramScan/HyperParameterScan_small.py	/^config = tf.ConfigProto(log_device_placement=True)$/;"	v
config	keras/paramScan/TestingObjective.py	/^config = tf.ConfigProto(log_device_placement=True)$/;"	v
config	keras/test.py	/^    config = tf.ConfigProto()#(log_device_placement=True)$/;"	v
config	main.py	/^        config = tf.ConfigProto(graph_options=gopts,$/;"	v
config	main.py	/^    config = tf.ConfigProto(graph_options=gopts, allow_soft_placement=True)$/;"	v
config	scripts/sara_main.py	/^        config = tf.ConfigProto(graph_options=gopts,$/;"	v
config	scripts/sara_main.py	/^    config = tf.ConfigProto(graph_options=gopts, allow_soft_placement=True)$/;"	v
configure	scripts/main.py	/^def configure():$/;"	f
const_batch1	metrics/swd.py	/^    const_batch1 = np.full(shape=shape, fill_value=-1000).astype(np.int16)$/;"	v
const_batch2	metrics/swd.py	/^    const_batch2 = np.full(shape=shape, fill_value=-1000).astype(np.int16)$/;"	v
conv1	neon/gan3D.py	/^conv1 = dict(init=init, batch_norm=False, activation=lrelu) # what's about BatchNorm Layer and batch_norm parameter?$/;"	v
conv1	neon/potential_gan.py	/^conv1 = dict(init=init, batch_norm=False, activation=lrelu, bias=init)$/;"	v
conv1	neon/potential_gan.py	/^conv1 = dict(init=init_gen, batch_norm=False, activation=lrelu, padding=pad1, strides=str1, bias=init_gen)$/;"	v
conv2	neon/gan3D.py	/^conv2 = dict(init=init, batch_norm=True, activation=lrelu, padding=2)$/;"	v
conv2	neon/potential_gan.py	/^conv2 = dict(init=init, batch_norm=False, activation=lrelu, padding=2, bias=init)$/;"	v
conv2	neon/potential_gan.py	/^conv2 = dict(init=init_gen, batch_norm=False, activation=lrelu, padding=pad2, strides=str2, bias=init_gen)$/;"	v
conv3	neon/gan3D.py	/^conv3 = dict(init=init, batch_norm=True, activation=lrelu, padding=1)$/;"	v
conv3	neon/potential_gan.py	/^conv3 = dict(init=init, batch_norm=False, activation=lrelu, padding=1, bias=init)$/;"	v
conv3	neon/potential_gan.py	/^conv3 = dict(init=init_gen, batch_norm=False, activation=Tanh(), padding=pad3, strides=str3, bias=init_gen)$/;"	v
conv3d	networks/ops.py	/^def conv3d(x, fmaps, kernel, activation, param=None, lrmul=1):$/;"	f
conv3d_depthwise	networks/ops.py	/^def conv3d_depthwise(x, f, strides, padding):$/;"	f
conv4	neon/gan3D.py	/^conv4 = dict(init=init, batch_norm=True, activation=lrelu, dilation=dict(dil_h=2, dil_w=2, dil_d=2))$/;"	v
conv5	neon/gan3D.py	/^conv5 = dict(init=init, batch_norm=True, activation=lrelu, padding=dict(pad_h=2, pad_w=2, pad_d=0), dilation=dict(dil_h=2, dil_w=2, dil_d=3))$/;"	v
conv6	neon/gan3D.py	/^conv6 = dict(init=init, batch_norm=False, activation=lrelu, padding=dict(pad_h=1, pad_w=0, pad_d=3))$/;"	v
convert	scripts/hdf_to_numpy.py	/^def convert():$/;"	f
core	keras/analysis/RootAnalysis.py	/^import numpy.core.umath_tests as umath$/;"	i
core	keras/analysis/utils/GANutils.py	/^import numpy.core.umath_tests as umath$/;"	i
core	keras/analysis/utils/RootPlotsGAN.py	/^import numpy.core.umath_tests as umath$/;"	i
core	keras/archives/RootAnalysis_multi_pions.py	/^import numpy.core.umath_tests as umath$/;"	i
core	keras/archives/analysis/PythonAnalysis.py	/^import numpy.core.umath_tests as umath$/;"	i
core	keras/paramScan/HyperParameterScan.py	/^import numpy.core.umath_tests as umath$/;"	i
core	keras/paramScan/HyperParameterScan_multi.py	/^import numpy.core.umath_tests as umath$/;"	i
core	keras/paramScan/HyperParameterScan_small.py	/^import numpy.core.umath_tests as umath$/;"	i
core	keras/paramScan/TestingObjective.py	/^import numpy.core.umath_tests as umath$/;"	i
core	scripts/GANutils.py	/^import numpy.core.umath_tests as umath$/;"	i
core	scripts/RootPlotsGAN.py	/^import numpy.core.umath_tests as umath$/;"	i
cost	neon/gan3D.py	/^cost = GeneralizedGANCost(costfunc=GANCost(func="modified"))$/;"	v
cost	neon/potential_gan.py	/^cost = GeneralizedGANCost(costfunc=GANCost(func="wasserstein"))$/;"	v
count	keras/AngleArch3dGAN.py	/^def count(image, power):$/;"	f
count	keras/AngleArch3dGAN_tf2.py	/^def count(image, power):$/;"	f
count	keras/analysis/utils/GANutils.py	/^def count(image, power):$/;"	f
count	networks/AngleGAN/discriminator.py	/^from GANutils import ecal_sum, count, ecal_angle$/;"	i
count	networks/AngleGAN/generator.py	/^from GANutils import ecal_sum, count, ecal_angle$/;"	i
count_parameters	generate.py	/^from utils import count_parameters, image_grid, parse_tuple$/;"	i
count_parameters	main.py	/^from utils import count_parameters, image_grid, parse_tuple, MPMap, log0, lr_update$/;"	i
count_parameters	networks/test_network.py	/^from utils import count_parameters$/;"	i
count_parameters	scripts/main.py	/^from utils import count_parameters, image_grid, parse_tuple$/;"	i
count_parameters	scripts/sara_main.py	/^from utils import count_parameters, image_grid, parse_tuple, MPMap$/;"	i
count_parameters	utils.py	/^def count_parameters(scope):$/;"	f
createNumpyFiles	scripts/hdf_to_numpy.py	/^def createNumpyFiles(imgs3d, size, i):$/;"	f
create_inception_graph	metrics/fid_new.py	/^def create_inception_graph(pth):$/;"	f
create_numpy_en_ang_files	scripts/hdf_to_numpy.py	/^def create_numpy_en_ang_files(all_ep, all_ang, i):$/;"	f
crop	metrics/ssim.py	/^from skimage.util.arraycrop import crop$/;"	i
curr_snapshot_folder	caffe/caffe_train.py	/^    curr_snapshot_folder = snapshot_folder +'\/' + str(it)$/;"	v
curr_snapshot_folder	caffe/caffe_train.py	/^  curr_snapshot_folder = snapshot_folder +'\/' + str(start_snapshot)$/;"	v
curve_fit	keras/misc/ecal_primary.py	/^from scipy.optimize import curve_fit$/;"	i
cv2	scripts/hdf_to_numpy.py	/^import cv2$/;"	i
cv2	scripts/main.py	/^import cv2$/;"	i
d	analysis/analysis3D.py	/^d = build_discriminator()$/;"	v
d	keras/EcalEnergyTrain_hvd.py	/^    d=discriminator(keras_dformat=d_format)$/;"	v
d	keras/archives/analysis/analysis_fixed_cont.py	/^   d = build_discriminator()$/;"	v
d	keras/archives/analysis/analysis_fixed_cont.py	/^d=h5py.File(datafile,'r')$/;"	v
d	keras/archives/analysis/detailed_analysis_flex.py	/^   d = build_discriminator()$/;"	v
d	keras/archives/analysis/detailed_analysis_flex.py	/^d=h5py.File(datafile,'r')$/;"	v
d	keras/archives/analysis/fixed_analysis_flex.py	/^         d=h5py.File(infile,'r')$/;"	v
d	keras/archives/analysis/fixed_analysis_flex.py	/^   d = build_discriminator()$/;"	v
d	keras/archives/architectures_tested/arch8.py	/^d = discriminator()$/;"	v
d	keras/archives/architectures_tested/arch9.py	/^d=discriminator()$/;"	v
d	keras/archives/log/TrainPionslog.py	/^    d=discriminator()$/;"	v
d	keras/archives/normInit/normalInitTrain.py	/^    d=h5py.File("\/afs\/cern.ch\/work\/g\/gkhattak\/public\/Ele_v1_1_2.h5",'r')$/;"	v
d	keras/archives/train/Train_rootfit_scaled_2D.py	/^    d=discriminator()$/;"	v
d	keras/archives/train/Train_single_pass.py	/^    d=discriminator()$/;"	v
d	keras/misc/Gen_ecalRatio_multi.py	/^d=h5py.File("\/afs\/cern.ch\/work\/g\/gkhattak\/public\/Ele_v1_1_2.h5",'r')$/;"	v
d	keras/misc/Gen_ecalRatio_stat.py	/^d=h5py.File("\/bigdata\/shared\/LCD\/NewV1\/EleEscan\/EleEscan_1_1.h5")$/;"	v
d	keras/misc/Gen_ecalfit2.py	/^d=h5py.File("\/afs\/cern.ch\/work\/g\/gkhattak\/public\/Ele_v1_1_2.h5",'r')$/;"	v
d	keras/misc/data_info.py	/^    d=h5py.File("\/afs\/cern.ch\/work\/g\/gkhattak\/public\/Ele_v1_1_2.h5",'r')$/;"	v
d	keras/misc/data_info.py	/^   d=h5py.File("ElectronEnergyFile.h5",'r')$/;"	v
d	keras/misc/data_info.py	/^   d=h5py.File("\/afs\/cern.ch\/work\/s\/svalleco\/public\/Eshuffled100-200.h5",'r')$/;"	v
d	keras/misc/ecal_primary.py	/^    d=h5py.File("\/afs\/cern.ch\/work\/g\/gkhattak\/public\/Ele_v1_1_2.h5",'r')$/;"	v
d	keras/misc/ecal_primary.py	/^   d=h5py.File("ElectronEnergyFile.h5",'r')$/;"	v
d	keras/misc/ecal_primary.py	/^   d=h5py.File("\/afs\/cern.ch\/work\/s\/svalleco\/public\/Eshuffled100-200.h5",'r')$/;"	v
d	keras/misc/result_fit.py	/^d = np.arange(num_weights)$/;"	v
d	keras/misc/root_fit.py	/^d=h5py.File("\/afs\/cern.ch\/work\/g\/gkhattak\/public\/Ele_v1_1_2.h5",'r')$/;"	v
d	scripts/data_info.py	/^    d=h5py.File("\/afs\/cern.ch\/work\/g\/gkhattak\/public\/Ele_v1_1_2.h5",'r')$/;"	v
d	scripts/data_info.py	/^   d=h5py.File("ElectronEnergyFile.h5",'r')$/;"	v
d1	keras/archives/log/TrainPionslog_dual.py	/^    d1=discriminator()$/;"	v
d2	keras/archives/log/TrainPionslog_dual.py	/^    d2=discriminator2()$/;"	v
d_format	keras/EcalEnergyTrain_hvd.py	/^    d_format = params.channel_format$/;"	v
d_format	keras/test.py	/^    d_format = params.channel_format$/;"	v
d_weights	keras/archives/Data_Generators/AllEnergyTrain.py	/^    d_weights = 'params_discriminator_epoch_'$/;"	v
d_weights	keras/archives/Data_Generators/GenEnergyTrain.py	/^    d_weights = 'params_discriminator_epoch_'$/;"	v
d_weights	keras/archives/normInit/normalInitTrain.py	/^    d_weights = 'params_discriminator_epoch_' $/;"	v
d_weights	keras/archives/train/particle3Dtrain.py	/^    d_weights = 'params_discriminator_epoch_' $/;"	v
data	caffe/creating_proto.py	/^data = caffe.NetSpec()$/;"	v
data	keras/validation_analysis.py	/^    data = h5f['ECAL'][:num_events]$/;"	v
data_file	keras/misc/data_info.py	/^data_file=1$/;"	v
data_file	keras/misc/ecal_primary.py	/^data_file=1$/;"	v
data_file	scripts/data_info.py	/^data_file=0$/;"	v
data_reader	caffe/caffe_train.py	/^data_reader = caffe.RMSPropSolver('solver_data2.prototxt')$/;"	v
datafile	keras/archives/analysis/analysis_fixed_cont.py	/^datafile = "\/afs\/cern.ch\/work\/g\/gkhattak\/public\/Ele_v1_1_2.h5"$/;"	v
datafile	keras/archives/analysis/detailed_analysis_flex.py	/^datafile = "\/afs\/cern.ch\/work\/g\/gkhattak\/public\/Ele_v1_1_2.h5"$/;"	v
datafile	keras/paramScan/HyperParameterScan.py	/^    datafile = "\/afs\/cern.ch\/work\/g\/gkhattak\/public\/Ele_v1_1_2.h5"$/;"	v
datapath	keras/EcalEnergyTrain_hvd.py	/^    datapath = params.datapath#Data path on EOS CERN$/;"	v
datapath	keras/archives/analysis/PythonAnalysis.py	/^datapath = '\/eos\/project\/d\/dshep\/LCD\/V1\/*scan\/*.h5'$/;"	v
datapath	keras/archives/log/TrainPionslog.py	/^    datapath = '\/bigdata\/shared\/LCD\/NewV1\/*scan\/*.h5' #Data path on Caltech$/;"	v
datapath	keras/archives/log/TrainPionslog_dual.py	/^    datapath = '\/bigdata\/shared\/LCD\/NewV1\/*scan\/*.h5' #Data path on Caltech$/;"	v
datapath	keras/archives/train/Train_rootfit_scaled_2D.py	/^    datapath = params.datapath#Data path on EOS CERN$/;"	v
datapath	keras/archives/train/Train_single_pass.py	/^    datapath = '\/bigdata\/shared\/LCD\/NewV1\/*scan\/*.h5' #Data path on Caltech$/;"	v
datapath	keras/test.py	/^    datapath = params.datapath#Data path on EOS CERN$/;"	v
dataset	scripts/main.py	/^def dataset(datafile, phase, local_rank, global_size, verbose, final_shape, num_phases, image_channels):$/;"	f
datetime	neon/gan3D.py	/^from datetime import datetime$/;"	i
datetime	neon/potential_gan.py	/^from datetime import datetime$/;"	i
daxis	keras/AngleArch3dGAN.py	/^    daxis=(1,2,3)$/;"	v
daxis	keras/AngleArch3dGAN.py	/^    daxis=(2,3,4)$/;"	v
daxis	keras/AngleArch3dGAN_tf2.py	/^    daxis=(1,2,3)$/;"	v
daxis	keras/AngleArch3dGAN_tf2.py	/^    daxis=(2,3,4)$/;"	v
daxis	keras/AngleTrain3dGAN_hvd.py	/^   daxis = (1,2,3)$/;"	v
daxis	keras/AngleTrain3dGAN_hvd_tf2.py	/^   daxis = (1,2,3)  # channels_last$/;"	v
daxis	keras/analysis/utils/GANutils.py	/^    daxis=(1,2,3)$/;"	v
daxis	keras/analysis/utils/GANutils.py	/^    daxis=(2,3,4)$/;"	v
daxis	networks/AngleGAN/discriminator.py	/^    daxis=(1,2,3)$/;"	v
daxis	networks/AngleGAN/discriminator.py	/^    daxis=(2,3,4)$/;"	v
daxis	networks/AngleGAN/generator.py	/^    daxis=(1,2,3)$/;"	v
daxis	networks/AngleGAN/generator.py	/^    daxis=(2,3,4)$/;"	v
defaultdict	keras/AngleTrain3dGAN_hvd.py	/^from collections import defaultdict$/;"	i
defaultdict	keras/AngleTrain3dGAN_hvd_tf2.py	/^from collections import defaultdict$/;"	i
defaultdict	keras/EcalEnergyTrain_hvd.py	/^from collections import defaultdict$/;"	i
defaultdict	keras/archives/Data_Generators/AllEnergyTrain.py	/^from collections import defaultdict$/;"	i
defaultdict	keras/archives/Data_Generators/GenEnergyTrain.py	/^from collections import defaultdict$/;"	i
defaultdict	keras/archives/log/TrainPionslog.py	/^from collections import defaultdict$/;"	i
defaultdict	keras/archives/log/TrainPionslog_dual.py	/^from collections import defaultdict$/;"	i
defaultdict	keras/archives/normInit/normalInitTrain.py	/^from collections import defaultdict$/;"	i
defaultdict	keras/archives/train/TrainChPions.py	/^from collections import defaultdict$/;"	i
defaultdict	keras/archives/train/Train_rootfit_scaled_2D.py	/^from collections import defaultdict$/;"	i
defaultdict	keras/archives/train/Train_single_pass.py	/^from collections import defaultdict$/;"	i
defaultdict	keras/archives/train/particle3Dtrain.py	/^from collections import defaultdict$/;"	i
defaultdict	keras/paramScan/HyperParameterScan.py	/^from collections import defaultdict$/;"	i
defaultdict	keras/paramScan/HyperParameterScan_multi.py	/^from collections import defaultdict$/;"	i
defaultdict	keras/paramScan/HyperParameterScan_small.py	/^from collections import defaultdict$/;"	i
defaultdict	keras/paramScan/TestingObjective.py	/^from collections import defaultdict$/;"	i
defaultdict	keras/test.py	/^from collections import defaultdict$/;"	i
defaultdict	scripts/main.py	/^from collections import defaultdict$/;"	i
delete_cache_file	keras/archives/Data_Generators/GenEnergyTrain.py	/^                          delete_cache_file=False)$/;"	v
delivery_function	keras/archives/Data_Generators/AllEnergyTrain.py	/^    delivery_function = None$/;"	v
delivery_function	keras/archives/Data_Generators/GenEnergyTrain.py	/^                          delivery_function=None,$/;"	v
delivery_function	keras/archives/Data_Generators/GenEnergyTrain.py	/^    delivery_function = None$/;"	v
denergies	keras/archives/analysis/fixed_analysis_flex.py	/^denergies=[10, 50, 100, 200]                     #Energy for data events                            $/;"	v
dense	networks/ops.py	/^def dense(x, fmaps, activation, lrmul=1, param=None):$/;"	f
dependant	caffe/creating_proto.py	/^n.embed = L.Embed(n.clas, input_dim=num_clas, num_output=latent, weight_filler=dict(type='xavier'))  # class dependant embedding   (xavier for glorot_normal in keras)$/;"	c
derrorfile	keras/archives/analysis/PythonAnalysis.py	/^   derrorfile = "error_act" + str(energy) + ".pdf"$/;"	v
device_count	main.py	/^                                device_count={'CPU': int(os.environ['OMP_NUM_THREADS'])})$/;"	v
device_count	scripts/sara_main.py	/^                                device_count={'CPU': int(os.environ['OMP_NUM_THREADS'])})$/;"	v
disc2_time	keras/archives/analysis/analysis_fixed_cont.py	/^   disc2_time = end - start$/;"	v
disc2_time	keras/archives/analysis/detailed_analysis_flex.py	/^   disc2_time = end - start$/;"	v
disc_time	keras/archives/analysis/analysis_fixed_cont.py	/^   disc_time = end - start$/;"	v
disc_time	keras/archives/analysis/detailed_analysis_flex.py	/^   disc_time = end - start$/;"	v
disc_weights	analysis/analysis3D.py	/^disc_weights='\/data\/svalleco\/GAN\/weights_gk\/params_discriminator_epoch_029.hdf5'$/;"	v
disc_weights	keras/archives/analysis/PythonAnalysis.py	/^disc_weights="veganweights2\/params_discriminator_epoch_045.hdf5"$/;"	v
disc_weights	keras/archives/analysis/analysis_fixed_cont.py	/^disc_weights='params_discriminator_epoch_028.hdf5'$/;"	v
disc_weights	keras/archives/analysis/detailed_analysis_flex.py	/^disc_weights='veganweights\/params_discriminator_epoch_049.hdf5'$/;"	v
disc_weights	keras/archives/analysis/fixed_analysis_flex.py	/^disc_weights='veganweights\/params_discriminator_epoch_029.hdf5'$/;"	v
discdir	keras/archives/analysis/analysis_fixed_cont.py	/^discdir = plots_dir + 'disc_outputs'$/;"	v
discdir	keras/archives/analysis/detailed_analysis_flex.py	/^discdir = plots_dir + 'disc_outputs'$/;"	v
discdir	keras/archives/analysis/fixed_analysis_flex.py	/^discdir = plots_dir + 'disc_outputs'$/;"	v
discr_fake_for_generator_loss	caffe/caffe_train.py	/^      discr_fake_for_generator_loss = np.copy(discriminator.net.blobs['aux_loss'].data)$/;"	v
discr_fake_loss	caffe/caffe_train.py	/^  discr_fake_loss = np.copy(discriminator.net.blobs['loss'].data)$/;"	v
discr_real_loss	caffe/caffe_train.py	/^  discr_real_loss = np.copy(discriminator.net.blobs['loss'].data)$/;"	v
discriminate	keras/analysis/utils/GANutils.py	/^def discriminate(d, images):$/;"	f
discriminate	keras/archives/RootAnalysis_multi_pions.py	/^def discriminate(d, images):$/;"	f
discriminate	keras/archives/analysis/PythonAnalysis.py	/^def discriminate(d, images):$/;"	f
discriminate	scripts/GANutils.py	/^def discriminate(d, images):$/;"	f
discriminator	caffe/caffe_train.py	/^discriminator = caffe.RMSPropSolver('solver_discriminator2.prototxt')$/;"	v
discriminator	keras/AngleArch3dGAN.py	/^def discriminator(power=1.0):$/;"	f
discriminator	keras/AngleArch3dGAN_tf2.py	/^def discriminator(power=1.0):$/;"	f
discriminator	keras/AngleTrain3dGAN_hvd.py	/^    from AngleArch3dGAN import generator, discriminator$/;"	i
discriminator	keras/AngleTrain3dGAN_hvd_tf2.py	/^    from AngleArch3dGAN_tf2 import generator, discriminator$/;"	i
discriminator	keras/EcalEnergyGan.py	/^def discriminator(keras_dformat='channels_last'):$/;"	f
discriminator	keras/EcalEnergyTrain_hvd.py	/^    from EcalEnergyGan import generator, discriminator$/;"	i
discriminator	keras/analysis/RootAnalysis.py	/^   from EcalEnergyGan import generator, discriminator$/;"	i
discriminator	keras/archives/Data_Generators/AllEnergyTrain.py	/^    discriminator=discriminator()$/;"	v
discriminator	keras/archives/Data_Generators/AllEnergyTrain.py	/^    from ecalvegan import discriminator$/;"	i
discriminator	keras/archives/Data_Generators/GenEnergyTrain.py	/^    discriminator=discriminator()$/;"	v
discriminator	keras/archives/Data_Generators/GenEnergyTrain.py	/^    from ecalvegan import discriminator$/;"	i
discriminator	keras/archives/RootAnalysis_multi_pions.py	/^   from EcalEnergyGan import generator, discriminator$/;"	i
discriminator	keras/archives/analysis/PythonAnalysis.py	/^from ecalvegan import generator, discriminator$/;"	i
discriminator	keras/archives/architectures_tested/arch10.py	/^def discriminator():$/;"	f
discriminator	keras/archives/architectures_tested/arch11.py	/^def discriminator():$/;"	f
discriminator	keras/archives/architectures_tested/arch12.py	/^def discriminator():$/;"	f
discriminator	keras/archives/architectures_tested/arch13.py	/^def discriminator():$/;"	f
discriminator	keras/archives/architectures_tested/arch14.py	/^def discriminator():$/;"	f
discriminator	keras/archives/architectures_tested/arch15.py	/^def discriminator():$/;"	f
discriminator	keras/archives/architectures_tested/arch16.py	/^def discriminator():$/;"	f
discriminator	keras/archives/architectures_tested/arch7.py	/^def discriminator():$/;"	f
discriminator	keras/archives/architectures_tested/arch8.py	/^def discriminator():$/;"	f
discriminator	keras/archives/architectures_tested/arch9.py	/^def discriminator():$/;"	f
discriminator	keras/archives/architectures_tested/archlayer6.py	/^def discriminator():$/;"	f
discriminator	keras/archives/architectures_tested/ecalvegan2.py	/^def discriminator():$/;"	f
discriminator	keras/archives/architectures_tested/ecalvegan3.py	/^def discriminator():$/;"	f
discriminator	keras/archives/architectures_tested/ecalvegan4.py	/^def discriminator():$/;"	f
discriminator	keras/archives/architectures_tested/new_arch.py	/^def discriminator():$/;"	f
discriminator	keras/archives/log/EcalEnergyGanlog.py	/^def discriminator():$/;"	f
discriminator	keras/archives/log/TrainPionslog.py	/^    from EnergyGanlog import generator, discriminator$/;"	i
discriminator	keras/archives/log/TrainPionslog_dual.py	/^    from EcalEnergyGanlog import generator, discriminator$/;"	i
discriminator	keras/archives/normInit/normalInit.py	/^def discriminator():$/;"	f
discriminator	keras/archives/normInit/normalInitTrain.py	/^    discriminator=discriminator()$/;"	v
discriminator	keras/archives/normInit/normalInitTrain.py	/^    from ecalvegan import discriminator $/;"	i
discriminator	keras/archives/train/TrainChPions.py	/^  from EcalEnergyGan import generator, discriminator$/;"	i
discriminator	keras/archives/train/Train_rootfit_scaled_2D.py	/^    from EcalEnergyGan2D import generator, discriminator$/;"	i
discriminator	keras/archives/train/Train_single_pass.py	/^    from EcalEnergyGan import generator, discriminator$/;"	i
discriminator	keras/archives/train/particle3Dtrain.py	/^    discriminator=discriminator()$/;"	v
discriminator	keras/archives/train/particle3Dtrain.py	/^    from gan3D import discriminator $/;"	i
discriminator	keras/eval.py	/^from EcalEnergyGan import generator, discriminator$/;"	i
discriminator	keras/generate_pred.py	/^from EcalEnergyGan import generator, discriminator$/;"	i
discriminator	keras/misc/Gen_ecalRatio_multi.py	/^from ecalvegan import generator, discriminator$/;"	i
discriminator	keras/misc/Gen_ecalRatio_stat.py	/^from EcalEnergyGan import generator, discriminator$/;"	i
discriminator	keras/misc/Gen_ecalfit2.py	/^from ecalvegan import generator, discriminator$/;"	i
discriminator	keras/paramScan/HyperParameterScan.py	/^    from arch16 import generator, discriminator$/;"	i
discriminator	keras/paramScan/HyperParameterScan.py	/^def discriminator(dflag=0, df=8, dx=5, dy=5, dz=5, dp=0.2):$/;"	f
discriminator	keras/paramScan/HyperParameterScan_multi.py	/^def discriminator(dflag=0, df=8, dx=5, dy=5, dz=5, dp=0.2):$/;"	f
discriminator	keras/paramScan/HyperParameterScan_small.py	/^def discriminator(dflag=0, df=8, dx=5, dy=5, dz=5, dp=0.2):$/;"	f
discriminator	keras/test.py	/^    from EcalEnergyGan import generator, discriminator$/;"	i
discriminator	main.py	/^    discriminator = importlib.import_module(f'networks.{args.architecture}.discriminator').discriminator$/;"	v
discriminator	neon/gan3D.py	/^                               discriminator=Sequential(D_layers, name="Discriminator"))$/;"	v
discriminator	neon/potential_gan.py	/^                               discriminator=Sequential(D_layers, name="Discriminator"))$/;"	v
discriminator	networks/AngleGAN/discriminator.py	/^def discriminator(power=1.0):$/;"	f
discriminator	networks/loss.py	/^from networks.pgan.loss_utils import ecal_sum, ecal_angle # physics functions used for training the discriminator (should be in conditional lambda layer)$/;"	i
discriminator	networks/pgan/discriminator.py	/^def discriminator(x, alpha, phase, num_phases, base_shape, base_dim, latent_dim, activation, param=None, is_reuse=False, size='medium', conditioning=None):$/;"	f
discriminator	scripts/sara_main.py	/^    discriminator = importlib.import_module(f'networks.{args.architecture}.discriminator').discriminator$/;"	v
discriminator2	keras/archives/log/TrainPionslog_dual.py	/^    from EnergyGanlog import discriminator as discriminator2$/;"	i
discriminator_block	networks/pgan/discriminator.py	/^def discriminator_block(x, filters_in, filters_out, activation, param=None):$/;"	f
discriminator_caffemodel	caffe/caffe_train.py	/^    discriminator_caffemodel = curr_snapshot_folder + '\/' + 'discriminator.caffemodel'$/;"	v
discriminator_caffemodel	caffe/caffe_train.py	/^  discriminator_caffemodel = curr_snapshot_folder +'\/' + 'discriminator.caffemodel'$/;"	v
discriminator_out	networks/pgan/discriminator.py	/^def discriminator_out(x, base_dim, latent_dim, filters_out, activation, param):$/;"	f
discriminator_test_loss	keras/archives/Data_Generators/AllEnergyTrain.py	/^            discriminator_test_loss = discriminator.evaluate($/;"	v
discriminator_test_loss	keras/archives/Data_Generators/AllEnergyTrain.py	/^        discriminator_test_loss = np.mean(np.array(epoch_disc_test_loss), axis=0)$/;"	v
discriminator_test_loss	keras/archives/Data_Generators/GenEnergyTrain.py	/^            discriminator_test_loss = discriminator.evaluate($/;"	v
discriminator_test_loss	keras/archives/Data_Generators/GenEnergyTrain.py	/^        discriminator_test_loss = np.mean(np.array(epoch_disc_test_loss), axis=0)$/;"	v
discriminator_test_loss	keras/archives/normInit/normalInitTrain.py	/^        discriminator_test_loss = discriminator.evaluate($/;"	v
discriminator_test_loss	keras/archives/train/particle3Dtrain.py	/^        discriminator_test_loss = discriminator.evaluate($/;"	v
discriminator_train_loss	keras/archives/Data_Generators/AllEnergyTrain.py	/^        discriminator_train_loss = np.mean(np.array(epoch_disc_train_loss), axis=0)$/;"	v
discriminator_train_loss	keras/archives/Data_Generators/GenEnergyTrain.py	/^        discriminator_train_loss = np.mean(np.array(epoch_disc_train_loss), axis=0)$/;"	v
discriminator_train_loss	keras/archives/normInit/normalInitTrain.py	/^        discriminator_train_loss = np.mean(np.array(epoch_disc_loss), axis=0)$/;"	v
discriminator_train_loss	keras/archives/train/particle3Dtrain.py	/^        discriminator_train_loss = np.mean(np.array(epoch_disc_loss), axis=0)$/;"	v
display_every	caffe/caffe_train.py	/^display_every = 100 # show losses every so many iterations$/;"	v
division	metrics/fid_new.py	/^from __future__ import absolute_import, division, print_function$/;"	i
dlabel	keras/archives/analysis/PythonAnalysis.py	/^   dlabel = "Data " + str(energy)$/;"	v
dlabel	keras/archives/analysis/analysis_fixed_cont.py	/^   dlabel = "Data " + str(energy)$/;"	v
dlabel	keras/archives/analysis/detailed_analysis_flex.py	/^   dlabel = "Data " + str(energy)$/;"	v
dlabel	keras/archives/analysis/fixed_analysis_flex.py	/^      dlabel = "Data " + str(energy)$/;"	v
dlabel	keras/archives/analysis/fixed_analysis_flex.py	/^   dlabel = "Data " + str(energy)$/;"	v
downscale3d	networks/ops.py	/^def downscale3d(x, factor=2):$/;"	f
drealfile	keras/archives/analysis/PythonAnalysis.py	/^   drealfile = "realfake_act" + str(energy) + ".pdf"$/;"	v
dtype_range	metrics/ssim.py	/^from skimage.util.dtype import dtype_range$/;"	i
dtypes	metrics/fid.py	/^from tensorflow.python.framework import dtypes$/;"	i
e	keras/archives/analysis/analysis_fixed_cont.py	/^e=d.get('target')$/;"	v
e	keras/archives/analysis/detailed_analysis_flex.py	/^e=d.get('target')$/;"	v
e	keras/archives/analysis/fixed_analysis_flex.py	/^         e=d.get('target')$/;"	v
e	keras/archives/normInit/normalInitTrain.py	/^    e=d.get('target')$/;"	v
e	keras/misc/data_info.py	/^    e=d.get('target')$/;"	v
e	keras/misc/data_info.py	/^   e=d.get('energy')$/;"	v
e	keras/misc/ecal_primary.py	/^    e=d.get('target')[0:num_events]$/;"	v
e	keras/misc/ecal_primary.py	/^   e=d.get('energy')$/;"	v
e	scripts/data_info.py	/^    e=d.get('target')$/;"	v
e	scripts/data_info.py	/^   e=d.get('energy')$/;"	v
ebins	keras/misc/data_info.py	/^ebins=np.arange(0, 1000, 10)$/;"	v
ebins	scripts/data_info.py	/^ebins=np.arange(0, 500, 10)$/;"	v
ec	analysis/h5toroot_evc.py	/^  ec = ecal[e]$/;"	v
ecal	analysis/h5toroot_evc.py	/^ecal = np.array(ifile['ECAL'])$/;"	v
ecal	keras/archives/Data_Generators/AllEnergyTrain.py	/^            ecal = np.concatenate((ecal_batch, ecal_ip))$/;"	v
ecal	keras/archives/Data_Generators/GenEnergyTrain.py	/^            ecal = np.concatenate((ecal_batch, ecal_ip))$/;"	v
ecal	keras/archives/normInit/normalInitTrain.py	/^        ecal = np.concatenate((ecal_test, ecal_ip))$/;"	v
ecal	keras/validation_analysis.py	/^ecal = np.sum(data, axis=(1,2,3))$/;"	v
ecalTree	analysis/h5toroot_evc.py	/^ecalTree = TTree('ecalTree', "ecal Tree")$/;"	v
ecal_angle	keras/AngleArch3dGAN.py	/^def ecal_angle(image, power):$/;"	f
ecal_angle	keras/AngleArch3dGAN_tf2.py	/^def ecal_angle(image, power):$/;"	f
ecal_angle	keras/analysis/utils/GANutils.py	/^def ecal_angle(image, power):$/;"	f
ecal_angle	networks/AngleGAN/discriminator.py	/^from GANutils import ecal_sum, count, ecal_angle$/;"	i
ecal_angle	networks/AngleGAN/generator.py	/^from GANutils import ecal_sum, count, ecal_angle$/;"	i
ecal_angle	networks/loss.py	/^from networks.pgan.loss_utils import ecal_sum, ecal_angle # physics functions used for training the discriminator (should be in conditional lambda layer)$/;"	i
ecal_angle	networks/pgan/discriminator.py	/^from networks.pgan.loss_utils import ecal_sum, ecal_angle$/;"	i
ecal_angle	networks/pgan/loss_utils.py	/^def ecal_angle(images, size, power=1.0):$/;"	f
ecal_batch	keras/archives/Data_Generators/AllEnergyTrain.py	/^            ecal_batch = np.sum(image_batch, axis=(1, 2, 3))$/;"	v
ecal_batch	keras/archives/Data_Generators/GenEnergyTrain.py	/^            ecal_batch = np.sum(image_batch, axis=(1, 2, 3))$/;"	v
ecal_batch	keras/archives/normInit/normalInitTrain.py	/^            ecal_batch = ecal_train[index * batch_size:(index + 1) * batch_size]$/;"	v
ecal_gen	keras/validation_analysis.py	/^ecal_gen = np.sum(gen_imgs, axis=(1,2,3))$/;"	v
ecal_ip	keras/archives/Data_Generators/AllEnergyTrain.py	/^                ecal_ip = np.multiply(2, sampled_energies)$/;"	v
ecal_ip	keras/archives/Data_Generators/AllEnergyTrain.py	/^            ecal_ip = np.multiply(2, sampled_energies)$/;"	v
ecal_ip	keras/archives/Data_Generators/GenEnergyTrain.py	/^                ecal_ip = np.multiply(2, sampled_energies)$/;"	v
ecal_ip	keras/archives/Data_Generators/GenEnergyTrain.py	/^            ecal_ip = np.multiply(2, sampled_energies)$/;"	v
ecal_ip	keras/archives/normInit/normalInitTrain.py	/^                ecal_ip = np.polyval(poly, sampled_energies)$/;"	v
ecal_ip	keras/archives/normInit/normalInitTrain.py	/^            ecal_ip = np.polyval(poly, sampled_energies)$/;"	v
ecal_ip	keras/archives/normInit/normalInitTrain.py	/^        ecal_ip = np.polyval(poly, sampled_energies)$/;"	v
ecal_sum	keras/AngleArch3dGAN.py	/^def ecal_sum(image, power):$/;"	f
ecal_sum	keras/AngleArch3dGAN_tf2.py	/^def ecal_sum(image, power):$/;"	f
ecal_sum	keras/EcalEnergyGan.py	/^def ecal_sum(image):$/;"	f
ecal_sum	keras/analysis/utils/GANutils.py	/^def ecal_sum(image, power):$/;"	f
ecal_sum	keras/archives/architectures_tested/arch10.py	/^def ecal_sum(image):$/;"	f
ecal_sum	keras/archives/architectures_tested/arch11.py	/^def ecal_sum(image):$/;"	f
ecal_sum	keras/archives/architectures_tested/arch12.py	/^def ecal_sum(image):$/;"	f
ecal_sum	keras/archives/architectures_tested/arch13.py	/^def ecal_sum(image):$/;"	f
ecal_sum	keras/archives/architectures_tested/arch14.py	/^def ecal_sum(image):$/;"	f
ecal_sum	keras/archives/architectures_tested/arch15.py	/^def ecal_sum(image):$/;"	f
ecal_sum	keras/archives/architectures_tested/arch16.py	/^def ecal_sum(image):$/;"	f
ecal_sum	keras/archives/architectures_tested/arch7.py	/^def ecal_sum(image):$/;"	f
ecal_sum	keras/archives/architectures_tested/arch8.py	/^def ecal_sum(image):$/;"	f
ecal_sum	keras/archives/architectures_tested/arch9.py	/^def ecal_sum(image):$/;"	f
ecal_sum	keras/archives/architectures_tested/archlayer6.py	/^def ecal_sum(image):$/;"	f
ecal_sum	keras/archives/architectures_tested/ecalvegan2.py	/^def ecal_sum(image):$/;"	f
ecal_sum	keras/archives/architectures_tested/ecalvegan3.py	/^def ecal_sum(image):$/;"	f
ecal_sum	keras/archives/architectures_tested/ecalvegan4.py	/^def ecal_sum(image):$/;"	f
ecal_sum	keras/archives/architectures_tested/new_arch.py	/^def ecal_sum(image):$/;"	f
ecal_sum	keras/archives/normInit/normalInit.py	/^def ecal_sum(image):$/;"	f
ecal_sum	networks/AngleGAN/discriminator.py	/^from GANutils import ecal_sum, count, ecal_angle$/;"	i
ecal_sum	networks/AngleGAN/generator.py	/^from GANutils import ecal_sum, count, ecal_angle$/;"	i
ecal_sum	networks/loss.py	/^from networks.pgan.loss_utils import ecal_sum, ecal_angle # physics functions used for training the discriminator (should be in conditional lambda layer)$/;"	i
ecal_sum	networks/pgan/discriminator.py	/^from networks.pgan.loss_utils import ecal_sum, ecal_angle$/;"	i
ecal_sum	networks/pgan/loss_utils.py	/^def ecal_sum(images, size, power=1.0):   $/;"	f
ecal_sum_log	keras/archives/log/EcalEnergyGanlog.py	/^def ecal_sum_log(image):$/;"	f
ecal_test	keras/archives/normInit/normalInitTrain.py	/^    ecal_test = np.sum(X_test, axis=(1, 2, 3))$/;"	v
ecal_test	keras/test.py	/^           ecal_test = np.concatenate((ecal_test, ecal_temp))$/;"	v
ecal_train	keras/archives/normInit/normalInitTrain.py	/^    ecal_train = np.sum(X_train, axis=(1, 2, 3))$/;"	v
ecalerrorfile	keras/archives/analysis/PythonAnalysis.py	/^   ecalerrorfile = "ecal_error" + str(energy) + ".pdf"$/;"	v
ecalfile	keras/archives/analysis/PythonAnalysis.py	/^   ecalfile = "ecal_" + str(energy) + ".pdf"$/;"	v
ecalfile	keras/archives/analysis/analysis_fixed_cont.py	/^   ecalfile = "ecal_" + str(energy) + ".pdf"$/;"	v
ecalfile	keras/archives/analysis/detailed_analysis_flex.py	/^   ecalfile = "ecal_" + str(energy) + ".pdf"$/;"	v
ecalfile	keras/archives/analysis/fixed_analysis_flex.py	/^      ecalfile = "ecal_" + str(energy) + ".pdf"$/;"	v
ecalfile	keras/archives/analysis/fixed_analysis_flex.py	/^   ecalfile = "ecal_" + str(energy) + ".pdf"$/;"	v
ei	analysis/h5toroot_evc.py	/^ei = ecal.shape[1]$/;"	v
ej	analysis/h5toroot_evc.py	/^ej = ecal.shape[2]$/;"	v
ek	analysis/h5toroot_evc.py	/^ek = ecal.shape[3]$/;"	v
en	analysis/h5toroot_evc.py	/^en = 0$/;"	v
end	keras/archives/Data_Generators/AllEnergyTrain.py	/^end = time.time()$/;"	v
end	keras/archives/Data_Generators/GenEnergyTrain.py	/^end = time.time()$/;"	v
end	keras/archives/analysis/analysis_fixed_cont.py	/^   end = time.time()$/;"	v
end	keras/archives/analysis/detailed_analysis_flex.py	/^   end = time.time()$/;"	v
end	networks/test_network.py	/^            end = time.time()$/;"	v
energies	keras/EcalEnergyTrain_hvd.py	/^    energies =[100, 200, 300, 400] # Bins$/;"	v
energies	keras/archives/analysis/analysis_fixed_cont.py	/^energies=[50, 100, 150, 200, 300, 400, 500]  #Energy bins$/;"	v
energies	keras/archives/analysis/detailed_analysis_flex.py	/^energies=[50, 100, 150, 200, 300, 400, 500]  #Energy bins$/;"	v
energies	keras/archives/analysis/fixed_analysis_flex.py	/^energies=[10, 50, 100, 150, 200, 300, 400, 500]  #Energy for generating events. Should be superset of data energies$/;"	v
energies	keras/test.py	/^    energies =[100, 200, 300, 400] # Bins$/;"	v
energy	analysis/h5toroot_evc.py	/^        energy = ec[i][j][k]$/;"	v
energy	keras/misc/result_fit.py	/^energy = np.zeros((num_weights))$/;"	v
energy2Dfile	keras/archives/analysis/PythonAnalysis.py	/^   energy2Dfile = "energy2D" + str(energy) + ".pdf"$/;"	v
energy_batch	keras/archives/Data_Generators/AllEnergyTrain.py	/^            energy_batch = y_train.astype(np.float32)$/;"	v
energy_batch	keras/archives/Data_Generators/GenEnergyTrain.py	/^            energy_batch = y_train.astype(np.float32)$/;"	v
energy_batch	keras/archives/normInit/normalInitTrain.py	/^            energy_batch = y_train[index * batch_size:(index + 1) * batch_size]$/;"	v
energyfile	keras/archives/analysis/PythonAnalysis.py	/^   energyfile = "energy_" + str(energy) + ".pdf"$/;"	v
energyfile	keras/archives/analysis/analysis_fixed_cont.py	/^   energyfile = "energy_" + str(energy) + ".pdf"$/;"	v
energyfile	keras/archives/analysis/detailed_analysis_flex.py	/^   energyfile = "energy_" + str(energy) + ".pdf"$/;"	v
energyfile	keras/archives/analysis/fixed_analysis_flex.py	/^      energyfile = "energy_" + str(energy) + ".pdf"$/;"	v
energyfile	keras/archives/analysis/fixed_analysis_flex.py	/^   energyfile = "energy_" + str(energy) + ".pdf"$/;"	v
ensure_dirs_exist	neon/gan3D.py	/^from neon.util.persist import ensure_dirs_exist$/;"	i
ensure_dirs_exist	neon/potential_gan.py	/^from neon.util.persist import ensure_dirs_exist$/;"	i
ep	keras/test.py	/^    ep = np.expand_dims(Y_test, axis=-1)$/;"	v
epoch	keras/misc/result_fit.py	/^epoch = np.zeros((num_weights))$/;"	v
epoch_disc_loss	keras/archives/normInit/normalInitTrain.py	/^        epoch_disc_loss = []$/;"	v
epoch_disc_loss	keras/archives/train/particle3Dtrain.py	/^        epoch_disc_loss = []$/;"	v
epoch_disc_test_loss	keras/archives/Data_Generators/AllEnergyTrain.py	/^        epoch_disc_test_loss = []$/;"	v
epoch_disc_test_loss	keras/archives/Data_Generators/GenEnergyTrain.py	/^        epoch_disc_test_loss = []$/;"	v
epoch_disc_train_loss	keras/archives/Data_Generators/AllEnergyTrain.py	/^        epoch_disc_train_loss = []$/;"	v
epoch_disc_train_loss	keras/archives/Data_Generators/GenEnergyTrain.py	/^        epoch_disc_train_loss = []$/;"	v
epoch_gen_loss	keras/archives/normInit/normalInitTrain.py	/^        epoch_gen_loss = []$/;"	v
epoch_gen_loss	keras/archives/train/particle3Dtrain.py	/^        epoch_gen_loss = []$/;"	v
epoch_gen_test_loss	keras/archives/Data_Generators/AllEnergyTrain.py	/^        epoch_gen_test_loss = []$/;"	v
epoch_gen_test_loss	keras/archives/Data_Generators/GenEnergyTrain.py	/^        epoch_gen_test_loss = []$/;"	v
epoch_gen_train_loss	keras/archives/Data_Generators/AllEnergyTrain.py	/^        epoch_gen_train_loss = []$/;"	v
epoch_gen_train_loss	keras/archives/Data_Generators/GenEnergyTrain.py	/^        epoch_gen_train_loss = []$/;"	v
epoch_start	keras/archives/Data_Generators/AllEnergyTrain.py	/^        epoch_start = time.time()$/;"	v
epoch_start	keras/archives/Data_Generators/GenEnergyTrain.py	/^        epoch_start = time.time()$/;"	v
epoch_time	keras/archives/Data_Generators/AllEnergyTrain.py	/^        epoch_time = time.time() - epoch_start$/;"	v
epoch_time	keras/archives/Data_Generators/GenEnergyTrain.py	/^        epoch_time = time.time() - epoch_start$/;"	v
errorfile	keras/archives/analysis/PythonAnalysis.py	/^   errorfile = "error_" + str(energy) + ".pdf"$/;"	v
errorfile	keras/archives/analysis/analysis_fixed_cont.py	/^   errorfile = "error_" + str(energy) + ".pdf"$/;"	v
errorfile	keras/archives/analysis/detailed_analysis_flex.py	/^   errorfile = "error_" + str(energy) + ".pdf"$/;"	v
errorfile	keras/archives/analysis/fixed_analysis_flex.py	/^      errorfile = "error_" + str(energy) + ".pdf"$/;"	v
errorfile	keras/archives/analysis/fixed_analysis_flex.py	/^      errorfile = "error_act" + str(energy) + ".pdf"$/;"	v
errorfile	keras/archives/analysis/fixed_analysis_flex.py	/^   errorfile = "error_gan" + str(energy) + ".pdf"$/;"	v
evaluate	keras/paramScan/HyperParameterScan_multi.py	/^def evaluate(params):$/;"	f
evaluate	keras/paramScan/HyperParameterScan_small.py	/^def evaluate(params):$/;"	f
evaluate_threaded	keras/paramScan/HyperParameterScan_multi.py	/^def evaluate_threaded(params):$/;"	f
events	analysis/h5toroot_evc.py	/^events = []$/;"	v
events100	keras/misc/data_info.py	/^events100 = np.zeros((num_events, 25, 25, 25))$/;"	v
events100	scripts/data_info.py	/^events100 = np.zeros((num_events, 25, 25, 25))$/;"	v
events150	keras/misc/data_info.py	/^events150 = np.zeros((num_events, 25, 25, 25))$/;"	v
events150	scripts/data_info.py	/^events150 = np.zeros((num_events, 25, 25, 25))$/;"	v
events200	keras/misc/data_info.py	/^events200 = np.zeros((num_events, 25, 25, 25))$/;"	v
events200	scripts/data_info.py	/^events200 = np.zeros((num_events, 25, 25, 25))$/;"	v
events300	keras/misc/data_info.py	/^events300 = np.zeros((num_events, 25, 25, 25))$/;"	v
events300	scripts/data_info.py	/^events300 = np.zeros((num_events, 25, 25, 25))$/;"	v
events400	keras/misc/data_info.py	/^events400 = np.zeros((num_events, 25, 25, 25))$/;"	v
events400	scripts/data_info.py	/^events400 = np.zeros((num_events, 25, 25, 25))$/;"	v
events50	keras/misc/data_info.py	/^events50 = np.zeros((num_events, 25, 25, 25))$/;"	v
events50	scripts/data_info.py	/^events50 = np.zeros((num_events, 25, 25, 25))$/;"	v
events500	keras/misc/data_info.py	/^events500 = np.zeros((num_events, 25, 25, 25))$/;"	v
events500	scripts/data_info.py	/^events500 = np.zeros((num_events, 25, 25, 25))$/;"	v
expon	keras/archives/log/EcalEnergyGanlog.py	/^def expon(a):$/;"	f
expon	keras/misc/ecal_flat_python.py	/^def expon(a):$/;"	f
expon	keras/misc/ecal_flat_root.py	/^def expon(a):$/;"	f
expon	keras/misc/ecal_sum_python.py	/^def expon(a):$/;"	f
externalfunc	keras/paramScan/HyperParameterScan_multi.py	/^class externalfunc:$/;"	c
f	keras/archives/analysis/analysis_fixed_cont.py	/^    f=h5py.File(filename,'r')$/;"	v
f	keras/archives/analysis/detailed_analysis_flex.py	/^    f=h5py.File(filename,'r')$/;"	v
f	keras/archives/analysis/fixed_analysis_flex.py	/^      f=h5py.File(var["filename" + str(energy)],'r')$/;"	v
f	metrics/swd.py	/^f = f[:, np.newaxis, np.newaxis] * f[np.newaxis, np.newaxis, :] * f[np.newaxis, :, np.newaxis]$/;"	v
f	metrics/swd.py	/^f = np.array(filter_1d, dtype=np.float32)$/;"	v
fake	keras/archives/train/particle3Dtrain.py	/^    fake = generator([latent, image_class])$/;"	v
fake	keras/validation_analysis.py	/^    fake = gen_imgs[i]$/;"	v
fakeHCAL	analysis/analysis3D.py	/^fakeHCAL = np.zeros((n_events,5,5,60))$/;"	v
fakeTARGET	analysis/analysis3D.py	/^fakeTARGET = np.ones((n_events,1,5))$/;"	v
fake_batch_loss	keras/archives/Data_Generators/AllEnergyTrain.py	/^            fake_batch_loss = discriminator.train_on_batch(generated_images, [bit_flip(np.zeros(batch_size)), sampled_energies, ecal_ip])$/;"	v
fake_batch_loss	keras/archives/Data_Generators/GenEnergyTrain.py	/^            fake_batch_loss = discriminator.train_on_batch(generated_images, [bit_flip(np.zeros(batch_size)), sampled_energies, ecal_ip])$/;"	v
fake_batch_loss	keras/archives/normInit/normalInitTrain.py	/^            fake_batch_loss = discriminator.train_on_batch(generated_images, [bit_flip(np.zeros(batch_size)), sampled_energies, ecal_ip])$/;"	v
fake_batch_loss	keras/archives/train/particle3Dtrain.py	/^            fake_batch_loss = discriminator.train_on_batch($/;"	v
fake_image	keras/archives/Data_Generators/AllEnergyTrain.py	/^    fake_image = generator( latent)$/;"	v
fake_image	keras/archives/Data_Generators/GenEnergyTrain.py	/^    fake_image = generator( latent)$/;"	v
fake_image	keras/archives/normInit/normalInitTrain.py	/^    fake_image = generator( latent)$/;"	v
fake_mean_vec	keras/validation_analysis.py	/^fake_mean_vec = []$/;"	v
fake_std_vec	keras/validation_analysis.py	/^fake_std_vec = []$/;"	v
fid_value	metrics/fid_new.py	/^            fid_value = calculate_fid_given_batch_volumes(volumes_real, volumes_fake, sess)$/;"	v
fig	keras/archives/analysis/PythonAnalysis.py	/^fig = 1$/;"	v
fig	keras/archives/analysis/analysis_fixed_cont.py	/^fig = 1$/;"	v
fig	keras/archives/analysis/detailed_analysis_flex.py	/^fig = 1$/;"	v
fig	keras/archives/analysis/fixed_analysis_flex.py	/^fig = 1$/;"	v
filename	keras/archives/analysis/analysis_fixed_cont.py	/^filename = 'Gen_cont_' + str(n_jets) + 'events.h5'$/;"	v
filename	keras/archives/analysis/detailed_analysis_flex.py	/^filename = 'Gen_cont_' + str(n_jets) + 'events.h5'$/;"	v
filename	keras/archives/analysis/fixed_analysis_flex.py	/^filename= 'Gen_ecal_' + str(num_events_gan) + '3000'  # Filename from which generated events are to loaded or saved to.$/;"	v
filename	keras/eval.py	/^filename = 'ecal_ratio_multi.pdf'$/;"	v
filename	keras/misc/Gen_ecalRatio_multi.py	/^filename = 'ecal_ratio_multi.pdf'$/;"	v
filename	keras/misc/Gen_ecalRatio_stat.py	/^filename = 'ecal_ratio_stats_500.pdf'$/;"	v
fill_graph	keras/analysis/utils/ROOTutils.py	/^def fill_graph(graph, x, y):$/;"	f
fill_graph	scripts/ROOTutils.py	/^def fill_graph(graph, x, y):$/;"	f
fill_graph2D	keras/analysis/RootAnalysis.py	/^def fill_graph2D(graph, array):$/;"	f
fill_graph2D	keras/analysis/utils/RootPlotsGAN.py	/^def fill_graph2D(graph, array):$/;"	f
fill_graph2D	scripts/RootPlotsGAN.py	/^def fill_graph2D(graph, array):$/;"	f
fill_graph2D_dia	keras/analysis/RootAnalysis.py	/^def fill_graph2D_dia(graph, array):$/;"	f
fill_hist	keras/analysis/utils/ROOTutils.py	/^def fill_hist(hist, array):$/;"	f
fill_hist	keras/archives/RootAnalysis_multi_pions.py	/^def fill_hist(hist, array):$/;"	f
fill_hist	scripts/ROOTutils.py	/^def fill_hist(hist, array):$/;"	f
fill_hist_2D	scripts/ROOTutils.py	/^def fill_hist_2D(h, x, y):$/;"	f
fill_hist_wt	keras/analysis/utils/ROOTutils.py	/^def fill_hist_wt(hist, weight):$/;"	f
fill_hist_wt	keras/archives/RootAnalysis_multi_pions.py	/^def fill_hist_wt(hist, weight):$/;"	f
fill_hist_wt	scripts/ROOTutils.py	/^def fill_hist_wt(hist, weight):$/;"	f
fill_profile	keras/analysis/utils/ROOTutils.py	/^def fill_profile(prof, x, y):$/;"	f
fill_profile	keras/archives/RootAnalysis_multi_pions.py	/^def fill_profile(prof, x, y):$/;"	f
fill_profile	scripts/ROOTutils.py	/^def fill_profile(prof, x, y):$/;"	f
filter_1d	metrics/swd.py	/^filter_1d = [1, 4, 6, 4, 1]$/;"	v
final_shape	networks/test_network.py	/^    final_shape = [1, 128, 512, 512]$/;"	v
finalize_descriptors	metrics/swd.py	/^def finalize_descriptors(desc):$/;"	f
fitmod	keras/EcalEnergyTrain_hvd.py	/^    fitmod = 1 #params.mod$/;"	v
fitmod	keras/archives/log/TrainPionslog.py	/^    fitmod = 1$/;"	v
fitmod	keras/archives/log/TrainPionslog_dual.py	/^    fitmod = 1$/;"	v
fitmod	keras/archives/train/Train_rootfit_scaled_2D.py	/^    fitmod = 1 #params.mod$/;"	v
fitmod	keras/archives/train/Train_single_pass.py	/^    fitmod = 1$/;"	v
fitmod	keras/test.py	/^    fitmod = 1 #params.mod$/;"	v
fixdir	keras/archives/analysis/analysis_fixed_cont.py	/^fixdir = plots_dir + 'Fixed'$/;"	v
fixed_images	keras/archives/analysis/analysis_fixed_cont.py	/^      fixed_images = g.predict(generator_in, verbose=False, batch_size=100)$/;"	v
fixed_labels	keras/archives/analysis/analysis_fixed_cont.py	/^      fixed_labels = fixed_labels\/100$/;"	v
fixed_labels	keras/archives/analysis/analysis_fixed_cont.py	/^      fixed_labels = np.multiply(energy, fixed_labels)  #take sampled labels from actual data$/;"	v
fixed_labels	keras/archives/analysis/analysis_fixed_cont.py	/^      fixed_labels = np.ones((num_events, 1), dtype=np.float)   $/;"	v
flabel	keras/archives/analysis/analysis_fixed_cont.py	/^   flabel = "Fixed " + str(energy)$/;"	v
flatfile	keras/archives/analysis/PythonAnalysis.py	/^   flatfile = "Flat_energy_all.pdf"$/;"	v
flatfile	keras/archives/analysis/analysis_fixed_cont.py	/^   flatfile = "Flat_energy_all.pdf"$/;"	v
flatfile	keras/archives/analysis/detailed_analysis_flex.py	/^   flatfile = "Flat_energy_all.pdf"$/;"	v
flatfile	keras/archives/analysis/fixed_analysis_flex.py	/^      flatfile = "Flat_energy_all.pdf"$/;"	v
flatfile	keras/archives/analysis/fixed_analysis_flex.py	/^   flatfile = "Flat_energy_all.pdf"$/;"	v
flip	scripts/RootPlotsGAN.py	/^def flip(m, axis):$/;"	f
float32	keras/AngleArch3dGAN.py	/^from tensorflow import py_func, float32, Tensor$/;"	i
float32	keras/AngleArch3dGAN_tf2.py	/^from tensorflow import py_function, float32, Tensor$/;"	i
float32	networks/AngleGAN/discriminator.py	/^from tensorflow import py_func, float32, Tensor$/;"	i
float32	networks/AngleGAN/generator.py	/^from tensorflow import py_func, float32, Tensor$/;"	i
for	keras/EcalEnergyTrain_hvd.py	/^import analysis.utils.GANutils as gan # some common functions for gan$/;"	i
for	keras/analysis/utils/RootPlotsGAN.py	/^import ROOTutils as my # common utility functions for root$/;"	i
for	keras/test.py	/^import analysis.utils.GANutils as gan # some common functions for gan$/;"	i
for	networks/loss.py	/^from networks.pgan.loss_utils import bce, mae, mape  # loss functions used for loss_fn='anglegan'$/;"	i
for	networks/loss.py	/^from networks.pgan.loss_utils import ecal_sum, ecal_angle # physics functions used for training the discriminator (should be in conditional lambda layer)$/;"	i
for	scripts/RootPlotsGAN.py	/^import ROOTutils as my # common utility functions for root$/;"	i
forward_discriminator	main.py	/^from networks.loss import forward_simultaneous, forward_generator, forward_discriminator$/;"	i
forward_discriminator	networks/loss.py	/^def forward_discriminator(generator,$/;"	f
forward_discriminator	scripts/main.py	/^from networks.loss import forward_simultaneous, forward_generator, forward_discriminator$/;"	i
forward_discriminator	scripts/sara_main.py	/^from networks.loss import forward_simultaneous, forward_generator, forward_discriminator$/;"	i
forward_generator	main.py	/^from networks.loss import forward_simultaneous, forward_generator, forward_discriminator$/;"	i
forward_generator	networks/loss.py	/^def forward_generator(generator,$/;"	f
forward_generator	scripts/main.py	/^from networks.loss import forward_simultaneous, forward_generator, forward_discriminator$/;"	i
forward_generator	scripts/sara_main.py	/^from networks.loss import forward_simultaneous, forward_generator, forward_discriminator$/;"	i
forward_simultaneous	main.py	/^from networks.loss import forward_simultaneous, forward_generator, forward_discriminator$/;"	i
forward_simultaneous	networks/loss.py	/^def forward_simultaneous(generator,$/;"	f
forward_simultaneous	scripts/main.py	/^from networks.loss import forward_simultaneous, forward_generator, forward_discriminator$/;"	i
forward_simultaneous	scripts/sara_main.py	/^from networks.loss import forward_simultaneous, forward_generator, forward_discriminator$/;"	i
frechet_classifier_distance_from_activations	metrics/fid.py	/^def frechet_classifier_distance_from_activations(real_activations,$/;"	f
from	keras/analysis/RootAnalysis.py	/^from utils.GANutils import perform_calculations_multi, safe_mkdir #Common functions from GANutils.py$/;"	i
from_rgb	networks/ops.py	/^def from_rgb(x, filters_out, activation, param=None):$/;"	f
ftn	keras/misc/ecal_primary.py	/^def ftn(energy,	A, B, k):$/;"	f
func	networks/ops.py	/^        def func(x):$/;"	f	function:downscale3d
func	networks/ops.py	/^        def func(x):$/;"	f	function:leaky_relu
func	networks/ops.py	/^        def func(x):$/;"	f	function:upscale3d
functions	keras/EcalEnergyTrain_hvd.py	/^import analysis.utils.GANutils as gan # some common functions for gan$/;"	i
functions	keras/analysis/RootAnalysis.py	/^from utils.GANutils import perform_calculations_multi, safe_mkdir #Common functions from GANutils.py$/;"	i
functions	keras/analysis/utils/RootPlotsGAN.py	/^import ROOTutils as my # common utility functions for root$/;"	i
functions	keras/test.py	/^import analysis.utils.GANutils as gan # some common functions for gan$/;"	i
functions	networks/loss.py	/^from networks.pgan.loss_utils import bce, mae, mape  # loss functions used for loss_fn='anglegan'$/;"	i
functions	networks/loss.py	/^from networks.pgan.loss_utils import ecal_sum, ecal_angle # physics functions used for training the discriminator (should be in conditional lambda layer)$/;"	i
functions	scripts/RootPlotsGAN.py	/^import ROOTutils as my # common utility functions for root$/;"	i
functools	metrics/fid.py	/^import functools$/;"	i
g	analysis/analysis3D.py	/^g = build_generator(latent_space, return_intermediate=False)$/;"	v
g	keras/EcalEnergyTrain_hvd.py	/^    g=generator(latent_size,keras_dformat=d_format)$/;"	v
g	keras/archives/analysis/analysis_fixed_cont.py	/^   g = build_generator(latent_space, return_intermediate=False)$/;"	v
g	keras/archives/analysis/detailed_analysis_flex.py	/^   g = build_generator(latent_space, return_intermediate=False)$/;"	v
g	keras/archives/analysis/fixed_analysis_flex.py	/^   g = build_generator(latent_space, return_intermediate=False)$/;"	v
g	keras/archives/architectures_tested/arch8.py	/^g = generator()$/;"	v
g	keras/archives/architectures_tested/arch9.py	/^g=generator()$/;"	v
g	keras/archives/log/TrainPionslog.py	/^    g=generator(latent_size)$/;"	v
g	keras/archives/train/Train_rootfit_scaled_2D.py	/^    g=generator(latent_size)$/;"	v
g	keras/archives/train/Train_single_pass.py	/^    g=generator(latent_size)$/;"	v
g	keras/misc/Gen_ecalRatio_multi.py	/^g = generator(latent)$/;"	v
g	keras/misc/Gen_ecalRatio_stat.py	/^g = generator(latent)$/;"	v
g	keras/misc/Gen_ecalfit2.py	/^g = generator(latent)$/;"	v
g	keras/test.py	/^    g=generator(latent_size,keras_dformat=d_format)$/;"	v
g1	keras/archives/log/TrainPionslog_dual.py	/^    g1=generator(latent_size)$/;"	v
g2	keras/archives/log/TrainPionslog_dual.py	/^    g2=generator2(latent_size)$/;"	v
gPad	keras/analysis/RootAnalysis.py	/^from ROOT import kFALSE, TLegend, TCanvas, gPad, TGraph, gStyle, TProfile$/;"	i
gPad	keras/archives/RootAnalysis_multi_pions.py	/^from ROOT import kFALSE, TLegend, TCanvas, gPad, TGraph, gStyle, TProfile$/;"	i
gROOT	analysis/h5toroot_evc.py	/^from ROOT import TTree, TFile, AddressOf, gROOT, std, vector$/;"	i
gStyle	keras/analysis/RootAnalysis.py	/^from ROOT import kFALSE, TLegend, TCanvas, gPad, TGraph, gStyle, TProfile$/;"	i
gStyle	keras/archives/RootAnalysis_multi_pions.py	/^from ROOT import kFALSE, TLegend, TCanvas, gPad, TGraph, gStyle, TProfile$/;"	i
gStyle	keras/archives/analysis/PythonAnalysis.py	/^from ROOT import TCanvas, TGraph, gStyle, TProfile$/;"	i
gStyle	keras/eval.py	/^from ROOT import TLegend, TCanvas, TGraph, gStyle, TProfile, TMultiGraph, TPaveStats$/;"	i
gStyle	keras/misc/Gen_ecalRatio_multi.py	/^from ROOT import TLegend, TCanvas, TGraph, gStyle, TProfile, TMultiGraph, TPaveStats$/;"	i
gStyle	keras/misc/Gen_ecalRatio_stat.py	/^from ROOT import TLegend, TCanvas, TGraph, gStyle, TProfile, TMultiGraph, TPaveStats$/;"	i
gStyle	keras/misc/Gen_ecalfit2.py	/^from ROOT import TLegend, TCanvas, TGraph, gStyle, TProfile, TMultiGraph, TPaveStats$/;"	i
gStyle	keras/misc/result_fit.py	/^from ROOT import TCanvas, TGraph, gStyle, TMultiGraph$/;"	i
gStyle	keras/misc/root_fit.py	/^from ROOT import TCanvas, TGraph, gStyle$/;"	i
g_weights	keras/archives/Data_Generators/AllEnergyTrain.py	/^    g_weights = 'params_generator_epoch_'$/;"	v
g_weights	keras/archives/Data_Generators/GenEnergyTrain.py	/^    g_weights = 'params_generator_epoch_'$/;"	v
g_weights	keras/archives/normInit/normalInitTrain.py	/^    g_weights = 'params_generator_epoch_' $/;"	v
g_weights	keras/archives/train/particle3Dtrain.py	/^    g_weights = 'params_generator_epoch_' $/;"	v
gamma	caffe/caffe_train.py	/^gamma = 0.1$/;"	v
gan	keras/AngleTrain3dGAN_hvd.py	/^import analysis.utils.GANutils as gan$/;"	i
gan	keras/AngleTrain3dGAN_hvd_tf2.py	/^import analysis.utils.GANutils as gan$/;"	i
gan	keras/EcalEnergyTrain_hvd.py	/^import analysis.utils.GANutils as gan # some common functions for gan$/;"	i
gan	keras/test.py	/^import analysis.utils.GANutils as gan # some common functions for gan$/;"	i
gan	neon/potential_gan.py	/^gan = GAN(layers=layers, noise_dim=noise_dim, k=5, wgan_param_clamp=0.9)$/;"	v
gan	scripts/main.py	/^import analysis.utils.GANutils as gan$/;"	i
gaussian	scripts/gaussian.py	/^def gaussian(x,x0,sigma):$/;"	f
gaussian_filter	metrics/ssim.py	/^from scipy.ndimage import uniform_filter, gaussian_filter$/;"	i
gaussian_filter	metrics/swd.py	/^gaussian_filter = f \/ f.sum()$/;"	v
ge	keras/misc/result_fit.py	/^ge = TGraph( num_weights , epoch, energy )$/;"	v
gen_backend	neon/potential_gan.py	/^from neon.backends import gen_backend$/;"	i
gen_imgs	keras/validation_analysis.py	/^    gen_imgs = h5f['gen_imgs'][()]$/;"	v
gen_imgs	keras/validation_analysis.py	/^gen_imgs = np.squeeze(gen_imgs)$/;"	v
gen_losses	keras/archives/Data_Generators/AllEnergyTrain.py	/^            gen_losses = []$/;"	v
gen_losses	keras/archives/Data_Generators/GenEnergyTrain.py	/^            gen_losses = []$/;"	v
gen_losses	keras/archives/normInit/normalInitTrain.py	/^            gen_losses = []$/;"	v
gen_losses	keras/archives/train/particle3Dtrain.py	/^            gen_losses = []$/;"	v
gen_rhs	neon/gen_data_norm.py	/^def gen_rhs(size):$/;"	f
gen_rhs	neon/potential_gan.py	/^from gen_data_norm import gen_rhs$/;"	i
gen_time	keras/archives/analysis/analysis_fixed_cont.py	/^   gen_time = end - start$/;"	v
gen_time	keras/archives/analysis/detailed_analysis_flex.py	/^   gen_time = end - start$/;"	v
gen_time	keras/misc/Gen_ecalfit2.py	/^gen_time = time.time() - start$/;"	v
gen_weights	analysis/analysis3D.py	/^gen_weights='\/data\/svalleco\/GAN\/weights_gk\/params_generator_epoch_029.hdf5'$/;"	v
gen_weights	keras/archives/analysis/PythonAnalysis.py	/^gen_weights= "veganweights2\/params_generator_epoch_045.hdf5"$/;"	v
gen_weights	keras/archives/analysis/analysis_fixed_cont.py	/^gen_weights='params_generator_epoch_028.hdf5'$/;"	v
gen_weights	keras/archives/analysis/detailed_analysis_flex.py	/^gen_weights='veganweights\/params_generator_epoch_049.hdf5'$/;"	v
gen_weights	keras/archives/analysis/fixed_analysis_flex.py	/^gen_weights='veganweights\/params_generator_epoch_029.hdf5'$/;"	v
genbatches	keras/AngleTrain3dGAN_hvd.py	/^def genbatches(a,n):$/;"	f
genbatches	keras/AngleTrain3dGAN_hvd_tf2.py	/^def genbatches(a,n):$/;"	f
genbatches	keras/EcalEnergyTrain_hvd.py	/^def genbatches(a,n):$/;"	f
genbatches	keras/analysis/utils/GANutils.py	/^def genbatches(a,n):$/;"	f
genbatches	keras/test.py	/^def genbatches(a,n):$/;"	f
genbatches	scripts/main.py	/^from GANutils import hist_count, randomize, genbatches$/;"	i
gendir	keras/archives/analysis/analysis_fixed_cont.py	/^gendir = plots_dir + 'Generated'$/;"	v
gendir	keras/archives/analysis/detailed_analysis_flex.py	/^gendir = plots_dir + 'Generated'$/;"	v
gendir	keras/archives/analysis/fixed_analysis_flex.py	/^gendir = plots_dir + 'Generated'$/;"	v
generate	keras/analysis/utils/GANutils.py	/^def generate(g, index, cond, latent=256, concat=1, batch_size=50):$/;"	f
generate	keras/archives/RootAnalysis_multi_pions.py	/^def generate(g, index, sampled_labels, latent=200):$/;"	f
generate	keras/archives/analysis/PythonAnalysis.py	/^def generate(g, index, sampled_labels):$/;"	f
generate	keras/paramScan/HyperParameterScan_multi.py	/^def generate(g, index, latent, sampled_labels):$/;"	f
generate	keras/paramScan/HyperParameterScan_small.py	/^def generate(g, index, latent, sampled_labels):$/;"	f
generate	keras/paramScan/TestingObjective.py	/^def generate(g, index, latent, sampled_labels):$/;"	f
generate	plot.py	/^from scripts.GANutils import GetData, GetAngleData, GetDataFiles, generate, generate2,  safe_mkdir$/;"	i
generate	scripts/GANutils.py	/^def generate(g, index, cond, latent=256, concat=1, batch_size=50):$/;"	f
generate2	plot.py	/^from scripts.GANutils import GetData, GetAngleData, GetDataFiles, generate, generate2,  safe_mkdir$/;"	i
generate2	scripts/GANutils.py	/^def generate2(g, index, cond, latent=256, concat=1, batch_size=50):$/;"	f
generate_laplacian_pyramid	metrics/swd.py	/^def generate_laplacian_pyramid(minibatch, num_levels):$/;"	f
generated_images	analysis/analysis3D.py	/^generated_images = (generated_images) * 100.$/;"	v
generated_images	analysis/analysis3D.py	/^generated_images = g.predict($/;"	v
generated_images	analysis/analysis3D.py	/^generated_images = np.squeeze(generated_images)$/;"	v
generated_images	keras/archives/Data_Generators/AllEnergyTrain.py	/^            generated_images = generator.predict(generator_ip, verbose=0)$/;"	v
generated_images	keras/archives/Data_Generators/AllEnergyTrain.py	/^            generated_images = generator.predict(generator_ip, verbose=False)$/;"	v
generated_images	keras/archives/Data_Generators/GenEnergyTrain.py	/^            generated_images = generator.predict(generator_ip, verbose=0)$/;"	v
generated_images	keras/archives/Data_Generators/GenEnergyTrain.py	/^            generated_images = generator.predict(generator_ip, verbose=False)$/;"	v
generated_images	keras/archives/analysis/analysis_fixed_cont.py	/^    generated_images = np.array(f.get('ECAL'))$/;"	v
generated_images	keras/archives/analysis/analysis_fixed_cont.py	/^   generated_images = g.predict(generator_in, verbose=False, batch_size=100)$/;"	v
generated_images	keras/archives/analysis/analysis_fixed_cont.py	/^   generated_images = np.squeeze(generated_images)$/;"	v
generated_images	keras/archives/analysis/detailed_analysis_flex.py	/^    generated_images = np.array(f.get('ECAL'))$/;"	v
generated_images	keras/archives/analysis/detailed_analysis_flex.py	/^   generated_images = g.predict(generator_in, verbose=False, batch_size=100)$/;"	v
generated_images	keras/archives/analysis/detailed_analysis_flex.py	/^   generated_images = np.squeeze(generated_images)$/;"	v
generated_images	keras/archives/analysis/fixed_analysis_flex.py	/^      generated_images = (var["generated_images" + str(energy)]) $/;"	v
generated_images	keras/archives/analysis/fixed_analysis_flex.py	/^      generated_images = np.squeeze(generated_images)$/;"	v
generated_images	keras/archives/normInit/normalInitTrain.py	/^            generated_images = generator.predict(generator_ip, verbose=0)$/;"	v
generated_images	keras/archives/normInit/normalInitTrain.py	/^        generated_images = generator.predict(generator_ip, verbose=False)$/;"	v
generated_images	keras/archives/train/particle3Dtrain.py	/^            generated_images = generator.predict($/;"	v
generated_images	keras/archives/train/particle3Dtrain.py	/^        generated_images = generator.predict($/;"	v
generated_images	keras/eval.py	/^  generated_images = gm.predict(generator_in, verbose=False, batch_size=100)$/;"	v
generated_images	keras/generate_pred.py	/^  generated_images = gm.predict(generator_in, verbose=False, batch_size=16)$/;"	v
generated_images	keras/misc/Gen_ecalRatio_multi.py	/^   generated_images = g.predict(generator_in, verbose=False, batch_size=100)$/;"	v
generated_images	keras/misc/Gen_ecalRatio_stat.py	/^   generated_images = g.predict(generator_in, verbose=False, batch_size=100)$/;"	v
generated_images	keras/misc/Gen_ecalfit2.py	/^generated_images = g.predict(generator_in, verbose=False, batch_size=100)$/;"	v
generated_images	keras/test.py	/^          generated_images = np.swapaxes(generated_images, -1, 1)$/;"	v
generated_images	keras/test.py	/^    generated_images = g.predict(generator_ip, verbose=0)$/;"	v
generated_img	caffe/caffe_train.py	/^      generated_img = generator.net.blobs['generated'].data$/;"	v
generated_img	caffe/caffe_train.py	/^  generated_img = generator.net.blobs['generated'].data$/;"	v
generator	caffe/caffe_train.py	/^generator = caffe.RMSPropSolver('solver_generator2.prototxt')$/;"	v
generator	keras/AngleArch3dGAN.py	/^def generator(latent_size=200, return_intermediate=False):$/;"	f
generator	keras/AngleArch3dGAN_tf2.py	/^def generator(latent_size=200, return_intermediate=False):$/;"	f
generator	keras/AngleTrain3dGAN_hvd.py	/^    from AngleArch3dGAN import generator, discriminator$/;"	i
generator	keras/AngleTrain3dGAN_hvd_tf2.py	/^    from AngleArch3dGAN_tf2 import generator, discriminator$/;"	i
generator	keras/EcalEnergyGan.py	/^def generator(latent_size=200, return_intermediate=False, keras_dformat='channels_last'):$/;"	f
generator	keras/EcalEnergyTrain_hvd.py	/^    from EcalEnergyGan import generator, discriminator$/;"	i
generator	keras/analysis/RootAnalysis.py	/^   from EcalEnergyGan import generator, discriminator$/;"	i
generator	keras/archives/Data_Generators/AllEnergyTrain.py	/^    from ecalvegan import generator$/;"	i
generator	keras/archives/Data_Generators/AllEnergyTrain.py	/^    generator=generator(latent_size)$/;"	v
generator	keras/archives/Data_Generators/GenEnergyTrain.py	/^    from ecalvegan import generator$/;"	i
generator	keras/archives/Data_Generators/GenEnergyTrain.py	/^    generator=generator(latent_size)$/;"	v
generator	keras/archives/RootAnalysis_multi_pions.py	/^   from EcalEnergyGan import generator, discriminator$/;"	i
generator	keras/archives/analysis/PythonAnalysis.py	/^from ecalvegan import generator, discriminator$/;"	i
generator	keras/archives/architectures_tested/arch10.py	/^def generator(latent_size=1024, return_intermediate=False):$/;"	f
generator	keras/archives/architectures_tested/arch11.py	/^def generator(latent_size=1024, return_intermediate=False):$/;"	f
generator	keras/archives/architectures_tested/arch12.py	/^def generator(latent_size=1024, return_intermediate=False):$/;"	f
generator	keras/archives/architectures_tested/arch13.py	/^def generator(latent_size=1024, return_intermediate=False):$/;"	f
generator	keras/archives/architectures_tested/arch14.py	/^def generator(latent_size=1024, return_intermediate=False):$/;"	f
generator	keras/archives/architectures_tested/arch15.py	/^def generator(latent_size=1024, return_intermediate=False):$/;"	f
generator	keras/archives/architectures_tested/arch16.py	/^def generator(latent_size=1024, return_intermediate=False):$/;"	f
generator	keras/archives/architectures_tested/arch7.py	/^def generator(latent_size=1024, return_intermediate=False):$/;"	f
generator	keras/archives/architectures_tested/arch8.py	/^def generator(latent_size=200, return_intermediate=False):$/;"	f
generator	keras/archives/architectures_tested/arch9.py	/^def generator(latent_size=1024, return_intermediate=False):$/;"	f
generator	keras/archives/architectures_tested/archlayer6.py	/^def generator(latent_size=1024, return_intermediate=False):$/;"	f
generator	keras/archives/architectures_tested/ecalvegan2.py	/^def generator(latent_size=1024, return_intermediate=False):$/;"	f
generator	keras/archives/architectures_tested/ecalvegan3.py	/^def generator(latent_size=1024, return_intermediate=False):$/;"	f
generator	keras/archives/architectures_tested/ecalvegan4.py	/^def generator(latent_size=1024, return_intermediate=False):$/;"	f
generator	keras/archives/architectures_tested/new_arch.py	/^def generator(latent_size=1024, return_intermediate=False):$/;"	f
generator	keras/archives/log/EcalEnergyGanlog.py	/^def generator(latent_size=200, return_intermediate=False):$/;"	f
generator	keras/archives/log/TrainPionslog.py	/^    from EnergyGanlog import generator, discriminator$/;"	i
generator	keras/archives/log/TrainPionslog_dual.py	/^    from EcalEnergyGanlog import generator, discriminator$/;"	i
generator	keras/archives/normInit/normalInit.py	/^def generator(latent_size=1024, return_intermediate=False):$/;"	f
generator	keras/archives/normInit/normalInitTrain.py	/^    from ecalvegan import generator$/;"	i
generator	keras/archives/normInit/normalInitTrain.py	/^    generator=generator(latent_size)$/;"	v
generator	keras/archives/train/TrainChPions.py	/^  from EcalEnergyGan import generator, discriminator$/;"	i
generator	keras/archives/train/Train_rootfit_scaled_2D.py	/^    from EcalEnergyGan2D import generator, discriminator$/;"	i
generator	keras/archives/train/Train_single_pass.py	/^    from EcalEnergyGan import generator, discriminator$/;"	i
generator	keras/archives/train/particle3Dtrain.py	/^    from gan3D import generator$/;"	i
generator	keras/archives/train/particle3Dtrain.py	/^    generator=generator()$/;"	v
generator	keras/eval.py	/^from EcalEnergyGan import generator, discriminator$/;"	i
generator	keras/generate_pred.py	/^from EcalEnergyGan import generator, discriminator$/;"	i
generator	keras/misc/Gen_ecalRatio_multi.py	/^from ecalvegan import generator, discriminator$/;"	i
generator	keras/misc/Gen_ecalRatio_stat.py	/^from EcalEnergyGan import generator, discriminator$/;"	i
generator	keras/misc/Gen_ecalfit2.py	/^from ecalvegan import generator, discriminator$/;"	i
generator	keras/paramScan/HyperParameterScan.py	/^    from arch16 import generator, discriminator$/;"	i
generator	keras/paramScan/HyperParameterScan.py	/^def generator(latent_size=200, gflag=0, gf=8, gx=5, gy=5, gz=5):$/;"	f
generator	keras/paramScan/HyperParameterScan_multi.py	/^def generator(latent_size=200, gflag=0, gf=8, gx=5, gy=5, gz=5):$/;"	f
generator	keras/paramScan/HyperParameterScan_small.py	/^def generator(latent_size=200, gflag=0, gf=8, gx=5, gy=5, gz=5):$/;"	f
generator	keras/paramScan/TestingObjective.py	/^from EcalEnergyGan_5layer import generator$/;"	i
generator	keras/test.py	/^    from EcalEnergyGan import generator, discriminator$/;"	i
generator	main.py	/^    generator = importlib.import_module(f'networks.{args.architecture}.generator').generator$/;"	v
generator	networks/AngleGAN/generator.py	/^def generator(latent_size=254, return_intermediate=False):$/;"	f
generator	networks/pgan/generator.py	/^def generator(x, alpha, phase, num_phases, base_dim, base_shape, activation, param=None, size='medium', is_reuse=False, conditioning=None):$/;"	f
generator	scripts/sara_main.py	/^    generator = importlib.import_module(f'networks.{args.architecture}.generator').generator$/;"	v
generator2	keras/archives/log/TrainPionslog_dual.py	/^    from EnergyGanlog import generator as generator2$/;"	i
generator_block	networks/pgan/generator.py	/^def generator_block(x, filters_out, activation, param=None):$/;"	f
generator_caffemodel	caffe/caffe_train.py	/^    generator_caffemodel = curr_snapshot_folder + '\/' + 'generator.caffemodel'$/;"	v
generator_caffemodel	caffe/caffe_train.py	/^  generator_caffemodel = curr_snapshot_folder +'\/' + 'generator.caffemodel'$/;"	v
generator_in	keras/archives/analysis/analysis_fixed_cont.py	/^      generator_in = np.multiply(fixed_labels, noise)$/;"	v
generator_in	keras/archives/analysis/analysis_fixed_cont.py	/^   generator_in = np.multiply(sampled_labels, noise)$/;"	v
generator_in	keras/archives/analysis/detailed_analysis_flex.py	/^   generator_in = np.multiply(sampled_labels, noise)$/;"	v
generator_in	keras/archives/analysis/fixed_analysis_flex.py	/^      generator_in = np.multiply(sampled_labels, noise)$/;"	v
generator_in	keras/eval.py	/^  generator_in = np.multiply(np.reshape(Y, (-1, 1)), noise)$/;"	v
generator_in	keras/generate_pred.py	/^  generator_in = np.multiply(Y, noise)$/;"	v
generator_in	keras/misc/Gen_ecalRatio_multi.py	/^   generator_in = np.multiply(np.reshape(Y\/100, (-1, 1)), noise)$/;"	v
generator_in	keras/misc/Gen_ecalRatio_stat.py	/^   generator_in = np.multiply(np.reshape(Y\/100, (-1, 1)), noise)$/;"	v
generator_in	keras/misc/Gen_ecalfit2.py	/^generator_in = np.multiply(np.reshape(Y, (-1, 1)), noise)$/;"	v
generator_in	networks/pgan/generator.py	/^def generator_in(x, filters, shape, activation, param=None):$/;"	f
generator_ip	keras/archives/Data_Generators/AllEnergyTrain.py	/^                generator_ip = np.multiply(sampled_energies, noise)$/;"	v
generator_ip	keras/archives/Data_Generators/AllEnergyTrain.py	/^            generator_ip = np.multiply(sampled_energies, noise)$/;"	v
generator_ip	keras/archives/Data_Generators/GenEnergyTrain.py	/^                generator_ip = np.multiply(sampled_energies, noise)$/;"	v
generator_ip	keras/archives/Data_Generators/GenEnergyTrain.py	/^            generator_ip = np.multiply(sampled_energies, noise)$/;"	v
generator_ip	keras/archives/normInit/normalInitTrain.py	/^                generator_ip = np.multiply(sampled_energies, noise)$/;"	v
generator_ip	keras/archives/normInit/normalInitTrain.py	/^            generator_ip = np.multiply(sampled_energies, noise)$/;"	v
generator_ip	keras/archives/normInit/normalInitTrain.py	/^        generator_ip = np.multiply(sampled_energies, noise)$/;"	v
generator_ip	keras/test.py	/^    generator_ip = np.multiply(ep, noise)$/;"	v
generator_loss	caffe/caffe_train.py	/^      generator_loss = generator_loss + discr_fake_for_generator_loss$/;"	v
generator_loss	caffe/caffe_train.py	/^  generator_loss =0$/;"	v
generator_test_loss	keras/archives/Data_Generators/AllEnergyTrain.py	/^            generator_test_loss = combined.evaluate(generator_ip,$/;"	v
generator_test_loss	keras/archives/Data_Generators/AllEnergyTrain.py	/^        generator_test_loss = np.mean(np.array(epoch_gen_test_loss), axis=0)$/;"	v
generator_test_loss	keras/archives/Data_Generators/GenEnergyTrain.py	/^            generator_test_loss = combined.evaluate(generator_ip,$/;"	v
generator_test_loss	keras/archives/Data_Generators/GenEnergyTrain.py	/^        generator_test_loss = np.mean(np.array(epoch_gen_test_loss), axis=0)$/;"	v
generator_test_loss	keras/archives/normInit/normalInitTrain.py	/^        generator_test_loss = combined.evaluate(generator_ip,$/;"	v
generator_test_loss	keras/archives/train/particle3Dtrain.py	/^        generator_test_loss = combined.evaluate($/;"	v
generator_train_loss	keras/archives/Data_Generators/AllEnergyTrain.py	/^        generator_train_loss = np.mean(np.array(epoch_gen_train_loss), axis=0)$/;"	v
generator_train_loss	keras/archives/Data_Generators/GenEnergyTrain.py	/^        generator_train_loss = np.mean(np.array(epoch_gen_train_loss), axis=0)$/;"	v
generator_train_loss	keras/archives/normInit/normalInitTrain.py	/^        generator_train_loss = np.mean(np.array(epoch_gen_loss), axis=0)$/;"	v
generator_train_loss	keras/archives/train/particle3Dtrain.py	/^        generator_train_loss = np.mean(np.array(epoch_gen_loss), axis=0)$/;"	v
gerrorfile	keras/archives/analysis/PythonAnalysis.py	/^   gerrorfile = "error_gan" + str(energy) + ".pdf"$/;"	v
get_activations	metrics/fid_new.py	/^def get_activations(images, sess, batch_size=50, verbose=False):$/;"	f
get_activations_from_files	metrics/fid_new.py	/^def get_activations_from_files(files, sess, batch_size=50, verbose=False):$/;"	f
get_activations_from_volume	metrics/fid_new.py	/^def get_activations_from_volume(volume, sess, batch_size=64, verbose=False):$/;"	f
get_actual	keras/archives/analysis/fixed_analysis_flex.py	/^get_actual = 1    # Get actual data from file$/;"	v
get_args	scripts/main.py	/^def get_args():$/;"	f
get_correlation	keras/analysis/RootAnalysis.py	/^def get_correlation(sumx, sumy, sumz, momentx, momenty, momentz, ecal, energy, hits, ratio):$/;"	f
get_correlation	keras/analysis/utils/RootPlotsGAN.py	/^def get_correlation(sumx, sumy, sumz, momentx, momenty, momentz, ecal, energy, hits, ratio):$/;"	f
get_correlation	scripts/RootPlotsGAN.py	/^def get_correlation(sumx, sumy, sumz, momentx, momenty, momentz, ecal, energy, hits, ratio):$/;"	f
get_correlation_small	scripts/RootPlotsGAN.py	/^def get_correlation_small(momentx, momenty, momentz, ecal, energy, hits, ratio1, ratio2, ratio3):$/;"	f
get_data	keras/archives/RootAnalysis_multi_pions.py	/^def get_data(datafile, threshold=1e-6):$/;"	f
get_data	keras/archives/analysis/PythonAnalysis.py	/^def get_data(datafile):$/;"	f
get_data	keras/paramScan/HyperParameterScan.py	/^def get_data(datafile):$/;"	f
get_data	keras/paramScan/HyperParameterScan_multi.py	/^def get_data(datafile):$/;"	f
get_data	keras/paramScan/HyperParameterScan_small.py	/^def get_data(datafile):$/;"	f
get_data	keras/paramScan/TestingObjective.py	/^def get_data(datafile):$/;"	f
get_descriptors_for_minibatch	metrics/swd.py	/^def get_descriptors_for_minibatch(minibatch, nhood_size, nhoods_per_image):$/;"	f
get_dia	keras/analysis/RootAnalysis.py	/^def get_dia(array):$/;"	f
get_dia	keras/analysis/utils/RootPlotsGAN.py	/^def get_dia(array):$/;"	f
get_dia	scripts/RootPlotsGAN.py	/^def get_dia(array):$/;"	f
get_dia2	scripts/RootPlotsGAN.py	/^def get_dia2(array):$/;"	f
get_disc	keras/analysis/utils/GANutils.py	/^def get_disc(energy, discdir, angloss=1, addloss=0, ang=0):$/;"	f
get_disc	keras/archives/RootAnalysis_multi_pions.py	/^def get_disc(energy, discdir):$/;"	f
get_disc	keras/archives/analysis/PythonAnalysis.py	/^def get_disc(energy):$/;"	f
get_disc	scripts/GANutils.py	/^def get_disc(energy, discdir, angloss=1, addloss=0, ang=0):$/;"	f
get_ecal_sum	keras/misc/ecal_sum_python.py	/^def get_ecal_sum(image):$/;"	f
get_fid	metrics/fid.py	/^def get_fid(session, activations, inception_images, images1, images2):$/;"	f
get_fid_for_volumes	metrics/fid.py	/^def get_fid_for_volumes(session, activations, inception_images, volumes1, volumes2, normalize_op=None):$/;"	f
get_gen	keras/analysis/utils/GANutils.py	/^def get_gen(energy, gendir):$/;"	f
get_gen	keras/archives/RootAnalysis_multi_pions.py	/^def get_gen(energy, gendir):$/;"	f
get_gen	keras/archives/analysis/PythonAnalysis.py	/^def get_gen(energy):$/;"	f
get_gen	keras/archives/analysis/analysis_fixed_cont.py	/^get_gen=0             # whether load from file. In that case discrimination will not be performed but the file must be generated using same energies as the data file.$/;"	v
get_gen	keras/archives/analysis/detailed_analysis_flex.py	/^get_gen=0             # whether load from file. In that case discrimination will not be performed but the file must be generated using same energies as the data file.$/;"	v
get_gen	keras/archives/analysis/fixed_analysis_flex.py	/^get_gen = 0       # Get generated data from file$/;"	v
get_gen	keras/paramScan/HyperParameterScan_multi.py	/^def get_gen(energy):$/;"	f
get_gen	keras/paramScan/HyperParameterScan_small.py	/^def get_gen(energy):$/;"	f
get_gen	keras/paramScan/TestingObjective.py	/^def get_gen(energy):$/;"	f
get_gen	scripts/GANutils.py	/^def get_gen(energy, gendir):$/;"	f
get_graph_def_from_url_tarball	metrics/fid.py	/^def get_graph_def_from_url_tarball(url, filename, tar_filename=None):$/;"	f
get_hits	keras/analysis/utils/ROOTutils.py	/^def get_hits(events, thresh=0.0002):$/;"	f
get_hits	keras/archives/RootAnalysis_multi_pions.py	/^def get_hits(events, thresh):$/;"	f
get_hits	scripts/ROOTutils.py	/^def get_hits(events, thresh=0.0002):$/;"	f
get_inception_activations	metrics/fid.py	/^def get_inception_activations(session, activations, inception_images, inps):$/;"	f
get_log	keras/misc/ecal_flat_python.py	/^def get_log(image):$/;"	f
get_log	keras/misc/ecal_flat_root.py	/^def get_log(image):$/;"	f
get_max	keras/analysis/utils/GANutils.py	/^def get_max(images):$/;"	f
get_max	keras/archives/RootAnalysis_multi_pions.py	/^def get_max(images):$/;"	f
get_max	keras/archives/analysis/PythonAnalysis.py	/^def get_max(images):$/;"	f
get_max	scripts/GANutils.py	/^def get_max(images):$/;"	f
get_mean_squared_error	main.py	/^from metrics import (calculate_fid_given_batch_volumes, get_swd_for_volumes,get_normalized_root_mse, get_mean_squared_error, get_psnr, get_ssim)$/;"	i
get_mean_squared_error	metrics/__init__.py	/^from metrics.skim_metrics import get_ssim, get_psnr, get_normalized_root_mse, get_mean_squared_error$/;"	i
get_mean_squared_error	metrics/skim_metrics.py	/^def get_mean_squared_error(real, fake):$/;"	f
get_moments	keras/analysis/utils/GANutils.py	/^def get_moments(sumsx, sumsy, sumsz, totalE, m, x=51, y=51, z=25):$/;"	f
get_moments	keras/archives/RootAnalysis_multi_pions.py	/^def get_moments(images, sumsx, sumsy, sumsz, totalE, m):$/;"	f
get_moments	keras/archives/analysis/PythonAnalysis.py	/^def get_moments(images, sumsx, sumsy, sumsz, totalE, m):$/;"	f
get_moments	keras/paramScan/HyperParameterScan_multi.py	/^def get_moments(images, sumsx, sumsy, sumsz, totalE, m):$/;"	f
get_moments	keras/paramScan/HyperParameterScan_small.py	/^def get_moments(images, sumsx, sumsy, sumsz, totalE, m):$/;"	f
get_moments	keras/paramScan/TestingObjective.py	/^def get_moments(images, sumsx, sumsy, sumsz, totalE, m):$/;"	f
get_moments	scripts/GANutils.py	/^def get_moments(sumsx, sumsy, sumsz, totalE, m, x=51, y=51, z=25):$/;"	f
get_normalized_root_mse	main.py	/^from metrics import (calculate_fid_given_batch_volumes, get_swd_for_volumes,get_normalized_root_mse, get_mean_squared_error, get_psnr, get_ssim)$/;"	i
get_normalized_root_mse	metrics/__init__.py	/^from metrics.skim_metrics import get_ssim, get_psnr, get_normalized_root_mse, get_mean_squared_error$/;"	i
get_normalized_root_mse	metrics/skim_metrics.py	/^def get_normalized_root_mse(real, fake):$/;"	f
get_output	neon/temporary_utils.py	/^def get_output():$/;"	f
get_parser	analysis/analysis3D.py	/^def get_parser():$/;"	f
get_parser	keras/AngleTrain3dGAN_hvd.py	/^def get_parser():$/;"	f
get_parser	keras/AngleTrain3dGAN_hvd_tf2.py	/^def get_parser():$/;"	f
get_parser	keras/EcalEnergyTrain_hvd.py	/^def get_parser():$/;"	f
get_parser	keras/archives/log/TrainPionslog.py	/^def get_parser():$/;"	f
get_parser	keras/archives/log/TrainPionslog_dual.py	/^def get_parser():$/;"	f
get_parser	keras/archives/train/TrainChPions.py	/^def get_parser():$/;"	f
get_parser	keras/archives/train/Train_rootfit_scaled_2D.py	/^def get_parser():$/;"	f
get_parser	keras/archives/train/Train_single_pass.py	/^def get_parser():$/;"	f
get_parser	keras/test.py	/^def get_parser():$/;"	f
get_parser	plot.py	/^def get_parser():$/;"	f
get_plots	keras/archives/RootAnalysis_multi_pions.py	/^def get_plots(var, plots_dir, energies, m, n):$/;"	f
get_plots_angle	keras/analysis/utils/RootPlotsGAN.py	/^def get_plots_angle(var, labels, plots_dir, energies, angles, angtype, aindexes, m, n, ifpdf=True, stest=True, nloss=3, cell=0, corr=0):$/;"	f
get_plots_angle	scripts/RootPlotsGAN.py	/^def get_plots_angle(var, labels, plots_dir, energies, angles, angtype, m, n, ifpdf=True, stest=True, angloss=1, addloss=0, cell=0, corr=0, grid=True, leg=True, statbox=True, mono=False):$/;"	f
get_plots_multi	keras/analysis/RootAnalysis.py	/^def get_plots_multi(var, labels, plots_dir, energies, m, n, ifpdf=True, stest=True):$/;"	f
get_plots_multi	scripts/RootPlotsGAN.py	/^def get_plots_multi(var, labels, plots_dir, energies, m, n, ifpdf=True, stest=True, cell=0, corr=0, grid=True, leg=True, statbox=True, mono=0):$/;"	f
get_psnr	main.py	/^from metrics import (calculate_fid_given_batch_volumes, get_swd_for_volumes,get_normalized_root_mse, get_mean_squared_error, get_psnr, get_ssim)$/;"	i
get_psnr	metrics/__init__.py	/^from metrics.skim_metrics import get_ssim, get_psnr, get_normalized_root_mse, get_mean_squared_error$/;"	i
get_psnr	metrics/skim_metrics.py	/^def get_psnr(real, fake, data_range=3072):$/;"	f
get_session	plot.py	/^def get_session():$/;"	f
get_sorted	keras/analysis/utils/GANutils.py	/^def get_sorted(datafiles, energies, flag=False, num_events1=10000, num_events2=2000, tolerance=5, thresh=1e-6):$/;"	f
get_sorted	keras/paramScan/TestingObjective.py	/^from GANutils import get_sorted$/;"	i
get_sorted	scripts/GANutils.py	/^def get_sorted(datafiles, energies, flag=False, num_events1=10000, num_events2=2000, tolerance=5, thresh=0):$/;"	f
get_sorted_angle	keras/analysis/utils/GANutils.py	/^def get_sorted_angle(datafiles, energies, flag=False, num_events1=10000, num_events2=2000, tolerance1=5, tolerance2=0.5, Data=GetAngleData, angtype='theta', thresh=1e-6, offset=0.0):$/;"	f
get_sorted_angle	scripts/GANutils.py	/^def get_sorted_angle(datafiles, energies, flag=False, num_events1=5000, num_events2=2000, tolerance1=5, tolerance2=0.5, Data=GetAngleData, angtype='theta', thresh=0.0, offset=0.0):$/;"	f
get_ssim	main.py	/^from metrics import (calculate_fid_given_batch_volumes, get_swd_for_volumes,get_normalized_root_mse, get_mean_squared_error, get_psnr, get_ssim)$/;"	i
get_ssim	metrics/__init__.py	/^from metrics.skim_metrics import get_ssim, get_psnr, get_normalized_root_mse, get_mean_squared_error$/;"	i
get_ssim	metrics/skim_metrics.py	/^def get_ssim(real, fake, data_range=3):$/;"	f
get_sums	keras/analysis/utils/GANutils.py	/^def get_sums(images):$/;"	f
get_sums	keras/analysis/utils/RootPlotsGAN.py	/^from GANutils import safe_mkdir, get_sums$/;"	i
get_sums	keras/archives/RootAnalysis_multi_pions.py	/^def get_sums(images):$/;"	f
get_sums	keras/archives/analysis/PythonAnalysis.py	/^def get_sums(images):$/;"	f
get_sums	keras/paramScan/HyperParameterScan_multi.py	/^def get_sums(images):$/;"	f
get_sums	keras/paramScan/HyperParameterScan_small.py	/^def get_sums(images):$/;"	f
get_sums	keras/paramScan/TestingObjective.py	/^def get_sums(images):$/;"	f
get_sums	scripts/GANutils.py	/^def get_sums(images):$/;"	f
get_sums	scripts/RootPlotsGAN.py	/^from GANutils import safe_mkdir, get_sums$/;"	i
get_swd_for_volumes	generate.py	/^from metrics import (calculate_fid_given_batch_volumes, get_swd_for_volumes,$/;"	i
get_swd_for_volumes	main.py	/^from metrics import (calculate_fid_given_batch_volumes, get_swd_for_volumes,get_normalized_root_mse, get_mean_squared_error, get_psnr, get_ssim)$/;"	i
get_swd_for_volumes	metrics/__init__.py	/^from metrics.swd import get_swd_for_volumes$/;"	i
get_swd_for_volumes	metrics/swd.py	/^def get_swd_for_volumes(images1, images2, nhood_size=(2, 8, 8), nhoods_per_image=512, dir_repeats=8,$/;"	f
get_swd_for_volumes	scripts/sara_main.py	/^from metrics import (calculate_fid_given_batch_volumes, get_swd_for_volumes,$/;"	i
get_weight	networks/ops.py	/^def get_weight(shape, activation, lrmul=1, use_eq_lr=True, use_spectral_norm=False, param=None):$/;"	f
glabel	keras/archives/analysis/PythonAnalysis.py	/^   glabel = "Data " + str(energy)$/;"	v
glabel	keras/archives/analysis/PythonAnalysis.py	/^   glabel = "GAN " + str(energy)$/;"	v
glabel	keras/archives/analysis/analysis_fixed_cont.py	/^   glabel = "GAN " + str(energy)$/;"	v
glabel	keras/archives/analysis/detailed_analysis_flex.py	/^   glabel = "GAN " + str(energy)$/;"	v
glabel	keras/archives/analysis/fixed_analysis_flex.py	/^      glabel = "GAN " + str(energy)$/;"	v
glabel	keras/archives/analysis/fixed_analysis_flex.py	/^   glabel = "GAN " + str(energy)$/;"	v
glob	dataset.py	/^import glob$/;"	i
glob	keras/EcalEnergyTrain_hvd.py	/^import glob$/;"	i
glob	keras/analysis/RootAnalysis.py	/^import glob$/;"	i
glob	keras/analysis/utils/GANutils.py	/^import glob$/;"	i
glob	keras/archives/Data_Generators/AllEnergyTrain.py	/^import glob$/;"	i
glob	keras/archives/Data_Generators/GenEnergyTrain.py	/^import glob$/;"	i
glob	keras/archives/RootAnalysis_multi_pions.py	/^import glob$/;"	i
glob	keras/archives/analysis/PythonAnalysis.py	/^import glob$/;"	i
glob	keras/archives/log/TrainPionslog.py	/^import glob$/;"	i
glob	keras/archives/log/TrainPionslog_dual.py	/^import glob$/;"	i
glob	keras/archives/train/TrainChPions.py	/^import glob$/;"	i
glob	keras/archives/train/Train_rootfit_scaled_2D.py	/^import glob$/;"	i
glob	keras/archives/train/Train_single_pass.py	/^import glob$/;"	i
glob	keras/paramScan/HyperParameterScan.py	/^import glob$/;"	i
glob	keras/paramScan/HyperParameterScan_multi.py	/^import glob$/;"	i
glob	keras/paramScan/HyperParameterScan_small.py	/^import glob$/;"	i
glob	keras/paramScan/TestingObjective.py	/^import glob$/;"	i
glob	keras/test.py	/^import glob$/;"	i
glob	scripts/GANutils.py	/^import glob$/;"	i
global_batch_size	keras/EcalEnergyTrain_hvd.py	/^    global_batch_size = batch_size * hvd.size()$/;"	v
global_batch_size	keras/test.py	/^    global_batch_size = batch_size $/;"	v
gm	keras/eval.py	/^gm = generator(latent, keras_dformat)$/;"	v
gm	keras/generate_pred.py	/^gm = generator(latent)$/;"	v
gopts	main.py	/^    gopts = tf.GraphOptions(place_pruned_graph=True)$/;"	v
gopts	scripts/sara_main.py	/^    gopts = tf.GraphOptions(place_pruned_graph=True)$/;"	v
gp	keras/misc/result_fit.py	/^gp = TGraph( num_weights , epoch, position )$/;"	v
gp_minimize	keras/paramScan/HyperParameterScan.py	/^from skopt import gp_minimize$/;"	i
gp_minimize	keras/paramScan/HyperParameterScan_multi.py	/^from skopt import gp_minimize$/;"	i
gp_minimize	keras/paramScan/HyperParameterScan_small.py	/^from skopt import gp_minimize$/;"	i
gpu_id	caffe/caffe_train.py	/^gpu_id = 0$/;"	v
gr	keras/misc/root_fit.py	/^gr  = TGraph( num_events, b, a)$/;"	v
grad	networks/ops.py	/^            def grad(dy):$/;"	f	function:downscale3d.func
grad	networks/ops.py	/^            def grad(dy):$/;"	f	function:leaky_relu.func
grad	networks/ops.py	/^            def grad(dy):$/;"	f	function:upscale3d.func
graph_pb2	metrics/fid.py	/^from tensorflow.core.framework import graph_pb2$/;"	i
grealfile	keras/archives/analysis/PythonAnalysis.py	/^   grealfile = "realfake_gan" + str(energy) + ".pdf"$/;"	v
group_conv3d	networks/ops.py	/^def group_conv3d(x, filter, groups):$/;"	f
gt	keras/misc/result_fit.py	/^gt  = TGraph( num_weights , epoch, total )$/;"	v
gweight	keras/misc/Gen_ecalfit2.py	/^gweight = 'generator8p2p1_049.hdf5'$/;"	v
gweight1	keras/eval.py	/^gweight1='\/gkhattak\/hvd_weights\/generator_params_generator_epoch_004.hdf5'$/;"	v
gweight1	keras/generate_pred.py	/^gweight1= '\/gkhattak\/hvd_weights\/generator_params_generator_epoch_004.hdf5'#'generator_params_generator_epoch_017.hdf5'$/;"	v
gweight1	keras/misc/Gen_ecalRatio_multi.py	/^gweight1 = 'params_generator_epoch_041.hdf5' # 1 gpu$/;"	v
gweight1	keras/misc/Gen_ecalRatio_stat.py	/^gweight1 = 'params_generator_epoch_041.hdf5' # 1 gpu$/;"	v
gweight2	keras/misc/Gen_ecalRatio_multi.py	/^gweight2 = 'params_generator_epoch_023.hdf5' # 2 gpu$/;"	v
gweight2	keras/misc/Gen_ecalRatio_stat.py	/^gweight2 = 'params_generator_epoch_005.hdf5' # 8 gpu$/;"	v
gweight3	keras/misc/Gen_ecalRatio_multi.py	/^gweight3 = 'params_generator_epoch_011.hdf5' # 4 gpu$/;"	v
gweight3	keras/misc/Gen_ecalRatio_stat.py	/^gweight3 = 'params_generator_epoch_002.hdf5'# 16 gpu$/;"	v
gweight4	keras/misc/Gen_ecalRatio_multi.py	/^gweight4 = 'params_generator_epoch_005.hdf5' # 8 gpu$/;"	v
gweight5	keras/misc/Gen_ecalRatio_multi.py	/^gweight5 =  '16gpu_gen.hdf5' #'params_generator_epoch_002.hdf5'# 16 gpu$/;"	v
gweights	keras/eval.py	/^gweights = [gweight1]$/;"	v
gweights	keras/generate_pred.py	/^gweights = [gweight1]$/;"	v
gweights	keras/misc/Gen_ecalRatio_multi.py	/^gweights = [gweight1, gweight2, gweight3, gweight4, gweight5]$/;"	v
gweights	keras/misc/Gen_ecalRatio_stat.py	/^gweights = [gweight1, gweight2, gweight3]$/;"	v
h5f	neon/potential_gan.py	/^h5f = h5py.File('output_data.h5', 'w')$/;"	v
h5f	scripts/gaussian.py	/^h5f = h5py.File('data.h5', 'w')$/;"	v
h5py	analysis/analysis3D.py	/^import os, h5py$/;"	i
h5py	analysis/h5toroot_evc.py	/^import h5py$/;"	i
h5py	caffe/caffe_train.py	/^import h5py$/;"	i
h5py	caffe/creating_proto.py	/^import h5py$/;"	i
h5py	keras/AngleArch3dGAN.py	/^import h5py$/;"	i
h5py	keras/AngleArch3dGAN_tf2.py	/^import h5py$/;"	i
h5py	keras/AngleTrain3dGAN_hvd.py	/^import h5py $/;"	i
h5py	keras/AngleTrain3dGAN_hvd_tf2.py	/^import h5py $/;"	i
h5py	keras/EcalEnergyGan.py	/^import h5py$/;"	i
h5py	keras/EcalEnergyTrain_hvd.py	/^import h5py $/;"	i
h5py	keras/analysis/RootAnalysis.py	/^import h5py$/;"	i
h5py	keras/analysis/utils/GANutils.py	/^import h5py$/;"	i
h5py	keras/archives/Data_Generators/AllEnergyTrain.py	/^import h5py$/;"	i
h5py	keras/archives/Data_Generators/GenEnergyTrain.py	/^import h5py$/;"	i
h5py	keras/archives/RootAnalysis_multi_pions.py	/^import h5py$/;"	i
h5py	keras/archives/analysis/PythonAnalysis.py	/^import h5py$/;"	i
h5py	keras/archives/analysis/analysis_fixed_cont.py	/^import os, h5py$/;"	i
h5py	keras/archives/analysis/detailed_analysis_flex.py	/^import os, h5py$/;"	i
h5py	keras/archives/analysis/fixed_analysis_flex.py	/^import os, h5py$/;"	i
h5py	keras/archives/architectures_tested/arch10.py	/^import h5py$/;"	i
h5py	keras/archives/architectures_tested/arch11.py	/^import h5py$/;"	i
h5py	keras/archives/architectures_tested/arch12.py	/^import h5py$/;"	i
h5py	keras/archives/architectures_tested/arch13.py	/^import h5py$/;"	i
h5py	keras/archives/architectures_tested/arch14.py	/^import h5py$/;"	i
h5py	keras/archives/architectures_tested/arch15.py	/^import h5py$/;"	i
h5py	keras/archives/architectures_tested/arch16.py	/^import h5py$/;"	i
h5py	keras/archives/architectures_tested/arch7.py	/^import h5py$/;"	i
h5py	keras/archives/architectures_tested/arch8.py	/^import h5py$/;"	i
h5py	keras/archives/architectures_tested/arch9.py	/^import h5py$/;"	i
h5py	keras/archives/architectures_tested/archlayer6.py	/^import h5py$/;"	i
h5py	keras/archives/architectures_tested/ecalvegan2.py	/^import h5py$/;"	i
h5py	keras/archives/architectures_tested/ecalvegan3.py	/^import h5py$/;"	i
h5py	keras/archives/architectures_tested/ecalvegan4.py	/^import h5py$/;"	i
h5py	keras/archives/architectures_tested/new_arch.py	/^import h5py$/;"	i
h5py	keras/archives/log/EcalEnergyGanlog.py	/^import h5py$/;"	i
h5py	keras/archives/log/TrainPionslog.py	/^import h5py $/;"	i
h5py	keras/archives/log/TrainPionslog_dual.py	/^import h5py $/;"	i
h5py	keras/archives/normInit/normalInit.py	/^import h5py$/;"	i
h5py	keras/archives/normInit/normalInitTrain.py	/^import h5py $/;"	i
h5py	keras/archives/train/TrainChPions.py	/^import h5py $/;"	i
h5py	keras/archives/train/Train_rootfit_scaled_2D.py	/^import h5py $/;"	i
h5py	keras/archives/train/Train_single_pass.py	/^import h5py $/;"	i
h5py	keras/eval.py	/^import h5py$/;"	i
h5py	keras/generate_pred.py	/^import h5py$/;"	i
h5py	keras/misc/Gen_ecalRatio_multi.py	/^import h5py$/;"	i
h5py	keras/misc/Gen_ecalRatio_stat.py	/^import h5py$/;"	i
h5py	keras/misc/Gen_ecalfit2.py	/^import h5py$/;"	i
h5py	keras/misc/data_info.py	/^import h5py$/;"	i
h5py	keras/misc/ecal_flat_python.py	/^import h5py$/;"	i
h5py	keras/misc/ecal_flat_root.py	/^import h5py$/;"	i
h5py	keras/misc/ecal_primary.py	/^import h5py$/;"	i
h5py	keras/misc/ecal_sum_python.py	/^import h5py$/;"	i
h5py	keras/misc/result_fit.py	/^import h5py$/;"	i
h5py	keras/misc/root_fit.py	/^import h5py$/;"	i
h5py	keras/paramScan/HyperParameterScan.py	/^import h5py$/;"	i
h5py	keras/paramScan/HyperParameterScan_multi.py	/^import h5py$/;"	i
h5py	keras/paramScan/HyperParameterScan_small.py	/^import h5py$/;"	i
h5py	keras/paramScan/TestingObjective.py	/^import h5py$/;"	i
h5py	keras/test.py	/^import h5py $/;"	i
h5py	keras/validation_analysis.py	/^import h5py$/;"	i
h5py	neon/potential_gan.py	/^import h5py$/;"	i
h5py	neon/temporary_utils.py	/^import h5py$/;"	i
h5py	networks/AngleGAN/discriminator.py	/^import h5py$/;"	i
h5py	networks/AngleGAN/generator.py	/^import h5py$/;"	i
h5py	plot.py	/^import h5py$/;"	i
h5py	scripts/GANutils.py	/^import h5py$/;"	i
h5py	scripts/data_info.py	/^import h5py$/;"	i
h5py	scripts/gaussian.py	/^import h5py$/;"	i
h5py	scripts/hdf_to_numpy.py	/^import h5py$/;"	i
h5py	scripts/lcd_utils.py	/^import h5py$/;"	i
h5py	scripts/main.py	/^import h5py $/;"	i
hashlib	keras/paramScan/HyperParameterScan_multi.py	/^import hashlib$/;"	i
help	main.py	/^                        help='How to scale discriminator learning rate with horovod size.')$/;"	v
help	main.py	/^                        help='How to scale generator learning rate with horovod size.')$/;"	v
help	neon/gan3D.py	/^                    help='number of data batches per noise batch in training')$/;"	v
help	scripts/sara_main.py	/^                        help='How to scale discriminator learning rate with horovod size.')$/;"	v
help	scripts/sara_main.py	/^                        help='How to scale generator learning rate with horovod size.')$/;"	v
hist_count	keras/AngleTrain3dGAN_hvd.py	/^def hist_count(x, p=1):$/;"	f
hist_count	keras/AngleTrain3dGAN_hvd_tf2.py	/^def hist_count(x, p=1):$/;"	f
hist_count	keras/analysis/utils/GANutils.py	/^def hist_count(x, daxis, p=1):$/;"	f
hist_count	scripts/main.py	/^from GANutils import hist_count, randomize, genbatches$/;"	i
hist_g4	keras/misc/Gen_ecalRatio_stat.py	/^hist_g4 = ROOT.TH2F("g4", "Ratio of Ecal and Ep;Ep;Ecal\/Ep", 400, 100, 500, 100, 0, 0.04)$/;"	v
hist_gan	keras/misc/Gen_ecalRatio_stat.py	/^hist_gan = []$/;"	v
histallfile	keras/archives/analysis/PythonAnalysis.py	/^   histallfile = "hist_all.pdf"$/;"	v
histallfile	keras/archives/analysis/analysis_fixed_cont.py	/^   histallfile = "hist_all.pdf"$/;"	v
histallfile	keras/archives/analysis/detailed_analysis_flex.py	/^   histallfile = "hist_all.pdf"$/;"	v
histallfile	keras/archives/analysis/fixed_analysis_flex.py	/^      histallfile = "hist_all.pdf"$/;"	v
histallfile	keras/archives/analysis/fixed_analysis_flex.py	/^   histallfile = "hist_all.pdf"$/;"	v
histfile	keras/archives/analysis/PythonAnalysis.py	/^   histfile = "hist_" + str(energy) + ".pdf"$/;"	v
histfile	keras/archives/analysis/analysis_fixed_cont.py	/^   histfile = "hist_" + str(energy) + ".pdf"$/;"	v
histfile	keras/archives/analysis/detailed_analysis_flex.py	/^   histfile = "hist_" + str(energy) + ".pdf"$/;"	v
histfile	keras/archives/analysis/fixed_analysis_flex.py	/^      histfile = "hist_" + str(energy) + ".pdf"$/;"	v
histfile	keras/archives/analysis/fixed_analysis_flex.py	/^   histfile = "hist_" + str(energy) + ".pdf"$/;"	v
hitsfile	keras/archives/analysis/PythonAnalysis.py	/^   hitsfile= "Hits_" + str(energy) + ".pdf"$/;"	v
horovod	generate.py	/^import horovod.tensorflow as hvd$/;"	i
horovod	keras/AngleTrain3dGAN_hvd.py	/^import horovod.keras as hvd$/;"	i
horovod	keras/AngleTrain3dGAN_hvd_tf2.py	/^import horovod.tensorflow.keras as hvd$/;"	i
horovod	keras/EcalEnergyTrain_hvd.py	/^    import horovod.keras as hvd$/;"	i
horovod	main.py	/^import horovod.tensorflow as hvd$/;"	i
horovod	plot.py	/^import horovod.tensorflow as hvd$/;"	i
horovod	scripts/main.py	/^import horovod.keras as hvd$/;"	i
horovod	scripts/main.py	/^import horovod.tensorflow as hvd #pgan$/;"	i
horovod	scripts/sara_main.py	/^import horovod.tensorflow as hvd$/;"	i
horovod	utils.py	/^import horovod.tensorflow as hvd$/;"	i
hpscan	keras/paramScan/HyperParameterScan.py	/^def hpscan():$/;"	f
hpscan	keras/paramScan/HyperParameterScan_multi.py	/^def hpscan():$/;"	f
hpscan	keras/paramScan/HyperParameterScan_small.py	/^def hpscan():$/;"	f
hvd	generate.py	/^import horovod.tensorflow as hvd$/;"	i
hvd	keras/AngleTrain3dGAN_hvd.py	/^import horovod.keras as hvd$/;"	i
hvd	keras/AngleTrain3dGAN_hvd_tf2.py	/^import horovod.tensorflow.keras as hvd$/;"	i
hvd	keras/EcalEnergyTrain_hvd.py	/^    import horovod.keras as hvd$/;"	i
hvd	main.py	/^import horovod.tensorflow as hvd$/;"	i
hvd	plot.py	/^import horovod.tensorflow as hvd$/;"	i
hvd	scripts/main.py	/^import horovod as hvd #AngleGAN$/;"	i
hvd	scripts/main.py	/^import horovod.keras as hvd$/;"	i
hvd	scripts/main.py	/^import horovod.tensorflow as hvd #pgan$/;"	i
hvd	scripts/sara_main.py	/^import horovod.tensorflow as hvd$/;"	i
hvd	utils.py	/^import horovod.tensorflow as hvd$/;"	i
if	keras/AngleTrain3dGAN_hvd.py	/^    import setGPU #if Caltech$/;"	i
if	keras/AngleTrain3dGAN_hvd_tf2.py	/^    import setGPU #if Caltech$/;"	i
if	keras/archives/log/TrainPionslog.py	/^import setGPU #if Caltech$/;"	i
if	keras/archives/log/TrainPionslog_dual.py	/^import setGPU #if Caltech$/;"	i
if	keras/archives/train/TrainChPions.py	/^import setGPU #if Caltech$/;"	i
if	keras/archives/train/Train_single_pass.py	/^import setGPU #if Caltech$/;"	i
if	plot.py	/^    import setGPU #if Caltech$/;"	i
ifile	analysis/h5toroot_evc.py	/^ifile = h5py.File(sys.argv[1],'r')$/;"	v
image	keras/archives/analysis/analysis_fixed_cont.py	/^   image = np.expand_dims(X, axis=-1)$/;"	v
image	keras/archives/analysis/detailed_analysis_flex.py	/^   image = np.expand_dims(X, axis=-1)$/;"	v
image_batch	keras/archives/Data_Generators/AllEnergyTrain.py	/^            image_batch = X_train.astype(np.float32)$/;"	v
image_batch	keras/archives/Data_Generators/GenEnergyTrain.py	/^            image_batch = X_train.astype(np.float32)$/;"	v
image_batch	keras/archives/normInit/normalInitTrain.py	/^            image_batch = X_train[index * batch_size:(index + 1) * batch_size]$/;"	v
image_batch	keras/archives/train/particle3Dtrain.py	/^            image_batch = X_train[index * batch_size:(index + 1) * batch_size]$/;"	v
image_class	keras/archives/train/particle3Dtrain.py	/^    image_class = Input(shape=(1, ), name='combined_aux', dtype='int32')$/;"	v
image_grid	generate.py	/^from utils import count_parameters, image_grid, parse_tuple$/;"	i
image_grid	main.py	/^from utils import count_parameters, image_grid, parse_tuple, MPMap, log0, lr_update$/;"	i
image_grid	scripts/main.py	/^from utils import count_parameters, image_grid, parse_tuple$/;"	i
image_grid	scripts/sara_main.py	/^from utils import count_parameters, image_grid, parse_tuple, MPMap$/;"	i
image_grid	utils.py	/^def image_grid(input_tensor, grid_shape, image_shape=(32, 32), num_channels=3):$/;"	f
imageio	generate.py	/^import imageio$/;"	i
img	caffe/creating_proto.py	/^img = 25 # image size$/;"	v
importer	metrics/fid.py	/^from tensorflow.python.framework import importer$/;"	i
importlib	generate.py	/^import importlib$/;"	i
importlib	main.py	/^import importlib$/;"	i
importlib	networks/test_network.py	/^import importlib$/;"	i
importlib	plot.py	/^import importlib$/;"	i
importlib	scripts/main.py	/^import importlib$/;"	i
importlib	scripts/sara_main.py	/^import importlib$/;"	i
imread	metrics/fid_new.py	/^from imageio import imread$/;"	i
in	networks/loss.py	/^from networks.pgan.loss_utils import ecal_sum, ecal_angle # physics functions used for training the discriminator (should be in conditional lambda layer)$/;"	i
inb_classes	neon/potential_gan.py	/^inb_classes = 2$/;"	v
inception_activations	metrics/fid.py	/^def inception_activations(images, num_splits=1):$/;"	f
index	scripts/gaussian.py	/^index = 0$/;"	v
index100	keras/misc/data_info.py	/^     index100 = index100 + 1$/;"	v
index100	keras/misc/data_info.py	/^index100 = 0$/;"	v
index100	scripts/data_info.py	/^     index100 = index100 + 1$/;"	v
index100	scripts/data_info.py	/^index100 = 0$/;"	v
index150	keras/misc/data_info.py	/^     index150 = index150 + 1$/;"	v
index150	keras/misc/data_info.py	/^index150 = 0$/;"	v
index150	scripts/data_info.py	/^     index150 = index150 + 1$/;"	v
index150	scripts/data_info.py	/^index150 = 0$/;"	v
index200	keras/misc/data_info.py	/^     index200 = index200 + 1$/;"	v
index200	keras/misc/data_info.py	/^index200 = 0$/;"	v
index200	scripts/data_info.py	/^     index200 = index200 + 1$/;"	v
index200	scripts/data_info.py	/^index200 = 0$/;"	v
index300	keras/misc/data_info.py	/^     index300 = index300 + 1$/;"	v
index300	keras/misc/data_info.py	/^index300 = 0$/;"	v
index300	scripts/data_info.py	/^     index300 = index300 + 1$/;"	v
index300	scripts/data_info.py	/^index300 = 0$/;"	v
index400	keras/misc/data_info.py	/^     index400 = index400 + 1$/;"	v
index400	keras/misc/data_info.py	/^index400 = 0$/;"	v
index400	scripts/data_info.py	/^     index400 = index400 + 1$/;"	v
index400	scripts/data_info.py	/^index400 = 0$/;"	v
index50	keras/misc/data_info.py	/^     index50 = index50 + 1$/;"	v
index50	keras/misc/data_info.py	/^index50 = 0$/;"	v
index50	scripts/data_info.py	/^     index50 = index50 + 1$/;"	v
index50	scripts/data_info.py	/^index50 = 0$/;"	v
index500	keras/misc/data_info.py	/^     index500 = index500 + 1$/;"	v
index500	keras/misc/data_info.py	/^index500 = 0$/;"	v
index500	scripts/data_info.py	/^     index500 = index500 + 1$/;"	v
index500	scripts/data_info.py	/^index500 = 0$/;"	v
inference_set	neon/potential_gan.py	/^inference_set = ArrayIterator(x_new, None, nclass=2, lshape=(latent_size))$/;"	v
infile	keras/archives/analysis/fixed_analysis_flex.py	/^         infile = "\/eos\/project\/d\/dshep\/LCD\/FixedEnergy\/Ele_" + str(energy) + "GeV\/Ele_"+ str(energy) + "GeV_" + str(num) + ".h5"$/;"	v
init	neon/gan3D.py	/^init = Gaussian()$/;"	v
init	neon/potential_gan.py	/^init = Gaussian(scale=0.01)$/;"	v
init_gen	neon/potential_gan.py	/^init_gen = Gaussian(scale=0.001)$/;"	v
init_op	networks/test_network.py	/^        init_op = tf.global_variables_initializer()$/;"	v
init_start	keras/archives/Data_Generators/AllEnergyTrain.py	/^    init_start = time.time()$/;"	v
init_start	keras/archives/Data_Generators/GenEnergyTrain.py	/^    init_start = time.time()$/;"	v
init_time	keras/archives/Data_Generators/AllEnergyTrain.py	/^    init_time = time.time() - init_start$/;"	v
init_time	keras/archives/Data_Generators/GenEnergyTrain.py	/^    init_time = time.time() - init_start$/;"	v
initializers	keras/archives/normInit/normalInit.py	/^from keras import initializers$/;"	i
input	keras/archives/Data_Generators/AllEnergyTrain.py	/^        input=[latent],$/;"	v
input	keras/archives/Data_Generators/GenEnergyTrain.py	/^        input=[latent],$/;"	v
input	keras/archives/normInit/normalInitTrain.py	/^        input=[latent],$/;"	v
input	keras/archives/train/particle3Dtrain.py	/^        input=[latent, image_class],$/;"	v
instance_norm	networks/ops.py	/^def instance_norm(x, epsilon=1e-8):$/;"	f
inter_op_parallelism_threads	main.py	/^                                inter_op_parallelism_threads=args.num_inter_ops,$/;"	v
inter_op_parallelism_threads	scripts/sara_main.py	/^                                inter_op_parallelism_threads=args.num_inter_ops,$/;"	v
intra_op_parallelism_threads	main.py	/^                                intra_op_parallelism_threads=int(os.environ['OMP_NUM_THREADS']),$/;"	v
intra_op_parallelism_threads	scripts/sara_main.py	/^                                intra_op_parallelism_threads=int(os.environ['OMP_NUM_THREADS']),$/;"	v
isreal	keras/archives/analysis/analysis_fixed_cont.py	/^    isreal= f.get('ISREAL')$/;"	v
isreal	keras/archives/analysis/detailed_analysis_flex.py	/^    isreal= f.get('ISREAL')$/;"	v
itertools	dataset.py	/^import itertools$/;"	i
itertools	get_args.py	/^import itertools$/;"	i
json	keras/paramScan/HyperParameterScan_multi.py	/^import json$/;"	i
k	keras/misc/Gen_ecalRatio_stat.py	/^   k = hist_gan[0].KolmogorovTest(hist_gan[i], "UU")$/;"	v
k	networks/ops.py	/^def k(x):$/;"	f
kFALSE	keras/analysis/RootAnalysis.py	/^from ROOT import kFALSE, TLegend, TCanvas, gPad, TGraph, gStyle, TProfile$/;"	i
kFALSE	keras/archives/RootAnalysis_multi_pions.py	/^from ROOT import kFALSE, TLegend, TCanvas, gPad, TGraph, gStyle, TProfile$/;"	i
keras	keras/AngleArch3dGAN.py	/^import keras.backend as K$/;"	i
keras	keras/AngleTrain3dGAN_hvd.py	/^import keras$/;"	i
keras	keras/AngleTrain3dGAN_hvd.py	/^import keras.backend as K$/;"	i
keras	keras/AngleTrain3dGAN_hvd_tf2.py	/^from tensorflow import keras$/;"	i
keras	keras/EcalEnergyGan.py	/^import keras.backend as K$/;"	i
keras	keras/EcalEnergyTrain_hvd.py	/^    import keras.backend as K$/;"	i
keras	keras/EcalEnergyTrain_hvd.py	/^import keras$/;"	i
keras	keras/analysis/utils/GANutils.py	/^import keras$/;"	i
keras	keras/analysis/utils/GANutils.py	/^import keras.backend as K$/;"	i
keras	keras/archives/Data_Generators/AllEnergyTrain.py	/^    import keras.backend as K$/;"	i
keras	keras/archives/Data_Generators/AllEnergyTrain.py	/^import keras$/;"	i
keras	keras/archives/Data_Generators/GenEnergyTrain.py	/^    import keras.backend as K$/;"	i
keras	keras/archives/Data_Generators/GenEnergyTrain.py	/^import keras$/;"	i
keras	keras/archives/architectures_tested/arch10.py	/^import keras.backend as K$/;"	i
keras	keras/archives/architectures_tested/arch11.py	/^import keras.backend as K$/;"	i
keras	keras/archives/architectures_tested/arch12.py	/^import keras.backend as K$/;"	i
keras	keras/archives/architectures_tested/arch13.py	/^import keras.backend as K$/;"	i
keras	keras/archives/architectures_tested/arch14.py	/^import keras.backend as K$/;"	i
keras	keras/archives/architectures_tested/arch15.py	/^import keras.backend as K$/;"	i
keras	keras/archives/architectures_tested/arch16.py	/^import keras.backend as K$/;"	i
keras	keras/archives/architectures_tested/arch7.py	/^import keras.backend as K$/;"	i
keras	keras/archives/architectures_tested/arch8.py	/^import keras.backend as K$/;"	i
keras	keras/archives/architectures_tested/arch9.py	/^import keras.backend as K$/;"	i
keras	keras/archives/architectures_tested/archlayer6.py	/^import keras.backend as K$/;"	i
keras	keras/archives/architectures_tested/ecalvegan2.py	/^import keras.backend as K$/;"	i
keras	keras/archives/architectures_tested/ecalvegan3.py	/^import keras.backend as K$/;"	i
keras	keras/archives/architectures_tested/ecalvegan4.py	/^import keras.backend as K$/;"	i
keras	keras/archives/architectures_tested/new_arch.py	/^import keras.backend as K$/;"	i
keras	keras/archives/log/EcalEnergyGanlog.py	/^import keras.backend as K$/;"	i
keras	keras/archives/log/TrainPionslog.py	/^    import keras.backend as K$/;"	i
keras	keras/archives/log/TrainPionslog.py	/^import keras$/;"	i
keras	keras/archives/log/TrainPionslog_dual.py	/^    import keras.backend as K$/;"	i
keras	keras/archives/log/TrainPionslog_dual.py	/^import keras$/;"	i
keras	keras/archives/normInit/normalInit.py	/^import keras.backend as K$/;"	i
keras	keras/archives/normInit/normalInitTrain.py	/^    import keras.backend as K$/;"	i
keras	keras/archives/normInit/normalInitTrain.py	/^import keras$/;"	i
keras	keras/archives/train/TrainChPions.py	/^    import keras.backend as K$/;"	i
keras	keras/archives/train/TrainChPions.py	/^import keras$/;"	i
keras	keras/archives/train/Train_rootfit_scaled_2D.py	/^    import keras.backend as K$/;"	i
keras	keras/archives/train/Train_rootfit_scaled_2D.py	/^import keras$/;"	i
keras	keras/archives/train/Train_single_pass.py	/^    import keras.backend as K$/;"	i
keras	keras/archives/train/Train_single_pass.py	/^import keras$/;"	i
keras	keras/archives/train/particle3Dtrain.py	/^    import keras.backend as K$/;"	i
keras	keras/eval.py	/^import keras.backend as K$/;"	i
keras	keras/generate_pred.py	/^import keras.backend as K$/;"	i
keras	keras/paramScan/HyperParameterScan.py	/^import keras.backend as K$/;"	i
keras	keras/paramScan/HyperParameterScan_multi.py	/^import keras.backend as K$/;"	i
keras	keras/paramScan/HyperParameterScan_small.py	/^import keras.backend as K$/;"	i
keras	keras/paramScan/TestingObjective.py	/^import keras.backend as K$/;"	i
keras	keras/test.py	/^    import keras.backend as K$/;"	i
keras	keras/test.py	/^import keras$/;"	i
keras	networks/AngleGAN/discriminator.py	/^import keras.backend as K$/;"	i
keras	networks/AngleGAN/generator.py	/^import keras.backend as K$/;"	i
keras_dformat	keras/eval.py	/^keras_dformat='channels_last'$/;"	v
kv2	keras/AngleTrain3dGAN_hvd.py	/^kv2 = keras.__version__.startswith('2')     # written in the tf1 file as a workaround for a keras 2 bug in Gan3DTrainingAngle()$/;"	v
kv2	keras/AngleTrain3dGAN_hvd_tf2.py	/^kv2 = keras.__version__.startswith('2')   # written in the tf1 file as a workaround for a keras 2 bug in Gan3DTrainingAngle()$/;"	v
kv2	keras/analysis/utils/GANutils.py	/^kv2 = keras.__version__.startswith('2') $/;"	v
label	keras/archives/analysis/fixed_analysis_flex.py	/^      label = "DATA " + str(energy)$/;"	v
label	keras/archives/analysis/fixed_analysis_flex.py	/^   label = "GAN " + str(energy)$/;"	v
label	keras/eval.py	/^label = ['4n_16w_bs8']$/;"	v
label	keras/misc/Gen_ecalRatio_multi.py	/^label = ['1 gpu', '2 gpu', '4 gpu', '8 gpu', '16 gpu']$/;"	v
label	keras/misc/Gen_ecalRatio_stat.py	/^label = ['1 gpu','8 gpu', '16 gpu']$/;"	v
label_batch	keras/archives/train/particle3Dtrain.py	/^            label_batch = y_train[index * batch_size:(index + 1) * batch_size]$/;"	v
lambda	networks/loss.py	/^from networks.pgan.loss_utils import ecal_sum, ecal_angle # physics functions used for training the discriminator (should be in conditional lambda layer)$/;"	i
latent	caffe/caffe_train.py	/^latent = 200 # latent vector dimension$/;"	v
latent	caffe/creating_proto.py	/^latent = 200 # latent vector dimension$/;"	v
latent	keras/archives/Data_Generators/AllEnergyTrain.py	/^    latent = Input(shape=(latent_size, ), name='combined_z')$/;"	v
latent	keras/archives/Data_Generators/GenEnergyTrain.py	/^    latent = Input(shape=(latent_size, ), name='combined_z')$/;"	v
latent	keras/archives/analysis/PythonAnalysis.py	/^latent = 200$/;"	v
latent	keras/archives/normInit/normalInitTrain.py	/^    latent = Input(shape=(latent_size, ), name='combined_z')$/;"	v
latent	keras/archives/train/particle3Dtrain.py	/^    latent = Input(shape=(latent_size, ), name='combined_z')$/;"	v
latent	keras/eval.py	/^latent = 200$/;"	v
latent	keras/generate_pred.py	/^latent = 200$/;"	v
latent	keras/misc/Gen_ecalRatio_multi.py	/^latent = 200$/;"	v
latent	keras/misc/Gen_ecalRatio_stat.py	/^latent = 200$/;"	v
latent	keras/misc/Gen_ecalfit2.py	/^latent = 200$/;"	v
latent_dim	networks/pgan/discriminator.py	/^    latent_dim = 1024$/;"	v
latent_dim	networks/pgan/generator.py	/^    latent_dim = 1024$/;"	v
latent_dim	networks/test_network.py	/^    latent_dim = 512$/;"	v
latent_size	keras/EcalEnergyTrain_hvd.py	/^    latent_size = params.latentsize #latent vector size$/;"	v
latent_size	keras/archives/Data_Generators/AllEnergyTrain.py	/^    latent_size = 200$/;"	v
latent_size	keras/archives/Data_Generators/GenEnergyTrain.py	/^    latent_size = 200$/;"	v
latent_size	keras/archives/log/TrainPionslog.py	/^    latent_size = params.latentsize #latent vector size$/;"	v
latent_size	keras/archives/log/TrainPionslog_dual.py	/^    latent_size = params.latentsize #latent vector size$/;"	v
latent_size	keras/archives/normInit/normalInitTrain.py	/^    latent_size = 200$/;"	v
latent_size	keras/archives/train/Train_rootfit_scaled_2D.py	/^    latent_size = params.latentsize #latent vector size$/;"	v
latent_size	keras/archives/train/Train_single_pass.py	/^    latent_size = params.latentsize #latent vector size$/;"	v
latent_size	keras/archives/train/particle3Dtrain.py	/^    latent_size = 200$/;"	v
latent_size	keras/test.py	/^    latent_size = params.latentsize #latent vector size$/;"	v
latent_size	neon/gan3D.py	/^latent_size = 200$/;"	v
latent_size	neon/potential_gan.py	/^latent_size = 200$/;"	v
latent_space	analysis/analysis3D.py	/^latent_space = results.latent_size$/;"	v
latent_space	keras/archives/analysis/analysis_fixed_cont.py	/^latent_space =200$/;"	v
latent_space	keras/archives/analysis/detailed_analysis_flex.py	/^latent_space =200$/;"	v
latent_space	keras/archives/analysis/fixed_analysis_flex.py	/^latent_space =200                                                            $/;"	v
layer	networks/loss.py	/^from networks.pgan.loss_utils import ecal_sum, ecal_angle # physics functions used for training the discriminator (should be in conditional lambda layer)$/;"	i
layers	metrics/fid.py	/^from tensorflow.contrib.layers.python.layers import layers$/;"	i
layers	neon/gan3D.py	/^layers = GenerativeAdversarial(generator=Sequential(G_layers, name="Generator"),$/;"	v
layers	neon/potential_gan.py	/^layers = GenerativeAdversarial(generator=Sequential(G_layers, name="Generator"),$/;"	v
lcd_3Ddata	keras/archives/train/particle3Dtrain.py	/^from lcd_utils import lcd_3Ddata$/;"	i
lcd_3Ddata	scripts/lcd_utils.py	/^def lcd_3Ddata():$/;"	f
leaky_relu	networks/ops.py	/^def leaky_relu(x, alpha_lr=0.2):$/;"	f
legend	keras/eval.py	/^legend = TLegend(0.8, 0.8, 0.9, 0.9)$/;"	v
legend	keras/misc/Gen_ecalRatio_multi.py	/^legend = TLegend(0.7, 0.7, 0.9, 0.9)$/;"	v
legend	keras/misc/Gen_ecalRatio_stat.py	/^legend = TLegend(0.7, 0.7, 0.9, 0.9)$/;"	v
legend	keras/misc/Gen_ecalfit2.py	/^legend = TLegend(.82, .82, .9, .9)$/;"	v
linalg	metrics/fid_new.py	/^from scipy import linalg$/;"	i
linalg_ops	metrics/fid.py	/^from tensorflow.python.ops import linalg_ops$/;"	i
load	generate.py	/^    def load(x):$/;"	f	function:main
load_files	scripts/hdf_to_numpy.py	/^def load_files(path):$/;"	f
load_image_batch	metrics/fid_new.py	/^def load_image_batch(files):$/;"	f
load_sorted	keras/analysis/utils/GANutils.py	/^def load_sorted(sorted_path, energies, ang=0):$/;"	f
load_sorted	keras/archives/RootAnalysis_multi_pions.py	/^def load_sorted(sorted_path):$/;"	f
load_sorted	keras/archives/analysis/PythonAnalysis.py	/^def load_sorted(sorted_path):$/;"	f
load_sorted	keras/paramScan/HyperParameterScan_multi.py	/^def load_sorted(sorted_path):$/;"	f
load_sorted	keras/paramScan/HyperParameterScan_small.py	/^def load_sorted(sorted_path):$/;"	f
load_sorted	keras/paramScan/TestingObjective.py	/^def load_sorted(sorted_path):$/;"	f
load_sorted	scripts/GANutils.py	/^def load_sorted(sorted_path, energies, ang=0):$/;"	f
load_time	keras/misc/Gen_ecalfit2.py	/^load_time = time.time()- start$/;"	v
log0	main.py	/^from utils import count_parameters, image_grid, parse_tuple, MPMap, log0, lr_update$/;"	i
log0	utils.py	/^def log0(string):$/;"	f
logftn	keras/archives/log/TrainPionslog.py	/^def logftn(x, f1, f2):$/;"	f
logftn	keras/archives/log/TrainPionslog_dual.py	/^def logftn(x, f1, f2):$/;"	f
logftn	keras/misc/ecal_flat_python.py	/^def logftn(x, base, f1, f2):$/;"	f
logftn	keras/misc/ecal_flat_root.py	/^def logftn(x, base, f1, f2):$/;"	f
logftn	keras/misc/ecal_sum_python.py	/^def logftn(x, base, f1, f2):$/;"	f
logging	main.py	/^import logging$/;"	i
loss	keras/archives/Data_Generators/AllEnergyTrain.py	/^        loss='binary_crossentropy'$/;"	v
loss	keras/archives/Data_Generators/AllEnergyTrain.py	/^        loss=['binary_crossentropy', 'mean_absolute_percentage_error', 'mean_absolute_percentage_error'],$/;"	v
loss	keras/archives/Data_Generators/GenEnergyTrain.py	/^        loss='binary_crossentropy'$/;"	v
loss	keras/archives/Data_Generators/GenEnergyTrain.py	/^        loss=['binary_crossentropy', 'mean_absolute_percentage_error', 'mean_absolute_percentage_error'],$/;"	v
loss	keras/archives/normInit/normalInitTrain.py	/^        loss='binary_crossentropy'$/;"	v
loss	keras/archives/normInit/normalInitTrain.py	/^        loss=['binary_crossentropy', 'mean_absolute_percentage_error', 'mean_absolute_percentage_error'],$/;"	v
loss	keras/archives/train/particle3Dtrain.py	/^        loss='binary_crossentropy'$/;"	v
loss	keras/archives/train/particle3Dtrain.py	/^        loss=['binary_crossentropy', 'binary_crossentropy']$/;"	v
loss	networks/loss.py	/^from networks.pgan.loss_utils import bce, mae, mape  # loss functions used for loss_fn='anglegan'$/;"	i
loss	networks/pgan/discriminator.py	/^        loss = tf.reduce_sum(y)$/;"	v
loss	networks/pgan/generator.py	/^        loss = tf.reduce_sum(y)$/;"	v
loss_fn	networks/loss.py	/^from networks.pgan.loss_utils import bce, mae, mape  # loss functions used for loss_fn='anglegan'$/;"	i
loss_weights	keras/archives/Data_Generators/AllEnergyTrain.py	/^        loss_weights=[8, 0.2, 0.1]$/;"	v
loss_weights	keras/archives/Data_Generators/GenEnergyTrain.py	/^        loss_weights=[8, 0.2, 0.1]$/;"	v
loss_weights	keras/archives/normInit/normalInitTrain.py	/^        loss_weights=[10, 0.3, 0.1]$/;"	v
lr	caffe/caffe_train.py	/^lr = 0.01$/;"	v
lr_b_mult	caffe/caffe_train.py	/^lr_b_mult = 0$/;"	v
lr_update	main.py	/^from utils import count_parameters, image_grid, parse_tuple, MPMap, log0, lr_update$/;"	i
lr_update	utils.py	/^def lr_update(lr, intra_phase_step, steps_per_phase, lr_max, lr_increase, lr_decrease, lr_rise_niter, lr_decay_niter):$/;"	f
lr_update_numpy	utils.py	/^def lr_update_numpy(lr, intra_phase_step, steps_per_phase, lr_max, lr_increase, lr_decrease, lr_rise_niter, lr_decay_niter):$/;"	f
lr_w_mult	caffe/caffe_train.py	/^lr_w_mult = 1$/;"	v
lrelu	neon/gan3D.py	/^lrelu = Rectlin(slope=0.1)  # leaky relu for discriminator$/;"	v
lrelu	neon/potential_gan.py	/^lrelu = Rectlin(slope=0.1)  # leaky relu for discriminator$/;"	v
m	keras/archives/analysis/PythonAnalysis.py	/^m = 2$/;"	v
m_b	caffe/caffe_train.py	/^  m_b = np.zeros_like(generator.net.params[layer][1].data)$/;"	v
m_w	caffe/caffe_train.py	/^  m_w = np.zeros_like(generator.net.params[layer][0].data)$/;"	v
ma	keras/archives/log/TrainPionslog.py	/^from numpy import ma$/;"	i
ma	keras/archives/log/TrainPionslog_dual.py	/^from numpy import ma$/;"	i
ma	keras/archives/train/TrainChPions.py	/^from numpy import ma$/;"	i
mae	networks/loss.py	/^from networks.pgan.loss_utils import bce, mae, mape  # loss functions used for loss_fn='anglegan'$/;"	i
mae	networks/pgan/loss_utils.py	/^def mae(output, target):$/;"	f
main	generate.py	/^def main(args, config):$/;"	f
main	keras/AngleArch3dGAN.py	/^def main():$/;"	f
main	keras/AngleArch3dGAN_tf2.py	/^def main():$/;"	f
main	keras/AngleTrain3dGAN_hvd.py	/^def main():$/;"	f
main	keras/AngleTrain3dGAN_hvd_tf2.py	/^def main():$/;"	f
main	keras/analysis/LossPlots.py	/^def main():$/;"	f
main	keras/analysis/ObjectivePlots.py	/^def main():$/;"	f
main	keras/analysis/RootAnalysis.py	/^def main():$/;"	f
main	keras/archives/RootAnalysis_multi_pions.py	/^def main():$/;"	f
main	keras/archives/train/TrainChPions.py	/^def main():$/;"	f
main	keras/misc/LossvsOptftn.py	/^def main():$/;"	f
main	keras/misc/ecal_flat_python.py	/^def main():$/;"	f
main	keras/misc/ecal_flat_root.py	/^def main():$/;"	f
main	keras/misc/ecal_sum_python.py	/^def main():$/;"	f
main	keras/paramScan/TestingObjective.py	/^def main():$/;"	f
main	main.py	/^def main(args, config):$/;"	f
main	networks/test_network.py	/^def main(architecture, final_shape, real_image_input, latent_dim, base_dim, phase, loss_fn='logistic'):$/;"	f
main	plot.py	/^def main():$/;"	f
main	scripts/main.py	/^def main():   $/;"	f
main	scripts/sara_main.py	/^def main(args, config):$/;"	f
makedirs	analysis/analysis3D.py	/^    from os import makedirs$/;"	i
makedirs	keras/EcalEnergyTrain_hvd.py	/^    from os import makedirs$/;"	i
makedirs	keras/analysis/utils/GANutils.py	/^    from os import makedirs$/;"	i
makedirs	keras/archives/RootAnalysis_multi_pions.py	/^    from os import makedirs$/;"	i
makedirs	keras/archives/analysis/PythonAnalysis.py	/^    from os import makedirs$/;"	i
makedirs	keras/archives/analysis/analysis_fixed_cont.py	/^    from os import makedirs$/;"	i
makedirs	keras/archives/analysis/detailed_analysis_flex.py	/^    from os import makedirs$/;"	i
makedirs	keras/archives/analysis/fixed_analysis_flex.py	/^    from os import makedirs$/;"	i
makedirs	keras/misc/data_info.py	/^    from os import makedirs$/;"	i
makedirs	keras/test.py	/^    from os import makedirs$/;"	i
makedirs	scripts/GANutils.py	/^    from os import makedirs$/;"	i
makedirs	scripts/data_info.py	/^    from os import makedirs$/;"	i
manager	keras/paramScan/HyperParameterScan_multi.py	/^from opt import manager$/;"	i
map	utils.py	/^    def map(self, l: list):$/;"	m	class:MPMap
mape	networks/loss.py	/^from networks.pgan.loss_utils import bce, mae, mape  # loss functions used for loss_fn='anglegan'$/;"	i
mape	networks/pgan/loss_utils.py	/^def mape(output, target):$/;"	f
mapping	keras/AngleTrain3dGAN_hvd.py	/^def mapping(x):$/;"	f
mapping	keras/AngleTrain3dGAN_hvd_tf2.py	/^def mapping(x):$/;"	f
math	keras/AngleArch3dGAN.py	/^import math$/;"	i
math	keras/AngleArch3dGAN_tf2.py	/^import math$/;"	i
math	keras/AngleTrain3dGAN_hvd.py	/^import math$/;"	i
math	keras/AngleTrain3dGAN_hvd_tf2.py	/^import math$/;"	i
math	keras/EcalEnergyTrain_hvd.py	/^import math$/;"	i
math	keras/analysis/RootAnalysis.py	/^import math$/;"	i
math	keras/analysis/utils/GANutils.py	/^import math$/;"	i
math	keras/analysis/utils/RootPlotsGAN.py	/^import math$/;"	i
math	keras/archives/Data_Generators/AllEnergyTrain.py	/^import math$/;"	i
math	keras/archives/Data_Generators/GenEnergyTrain.py	/^import math$/;"	i
math	keras/archives/RootAnalysis_multi_pions.py	/^import math$/;"	i
math	keras/archives/analysis/PythonAnalysis.py	/^import math$/;"	i
math	keras/archives/log/EcalEnergyGanlog.py	/^import math$/;"	i
math	keras/archives/log/TrainPionslog.py	/^import math$/;"	i
math	keras/archives/log/TrainPionslog_dual.py	/^import math$/;"	i
math	keras/archives/train/TrainChPions.py	/^import math$/;"	i
math	keras/archives/train/Train_rootfit_scaled_2D.py	/^import math$/;"	i
math	keras/archives/train/Train_single_pass.py	/^import math$/;"	i
math	keras/misc/ecal_flat_python.py	/^import math$/;"	i
math	keras/misc/ecal_flat_root.py	/^import math$/;"	i
math	keras/misc/ecal_sum_python.py	/^import math$/;"	i
math	keras/paramScan/HyperParameterScan_multi.py	/^import math$/;"	i
math	keras/paramScan/HyperParameterScan_small.py	/^import math$/;"	i
math	keras/paramScan/TestingObjective.py	/^import math$/;"	i
math	keras/test.py	/^import math$/;"	i
math	networks/AngleGAN/discriminator.py	/^import math$/;"	i
math	networks/AngleGAN/generator.py	/^import math$/;"	i
math	networks/pgan/loss_utils.py	/^import math$/;"	i
math	scripts/GANutils.py	/^import math$/;"	i
math	scripts/RootPlotsGAN.py	/^import math$/;"	i
math	scripts/gaussian.py	/^import math$/;"	i
math	scripts/main.py	/^import math$/;"	i
math_ops	metrics/fid.py	/^from tensorflow.python.ops import math_ops$/;"	i
matplotlib	keras/analysis/LossPlots.py	/^import matplotlib.pyplot as plt$/;"	i
matplotlib	keras/analysis/ObjectivePlots.py	/^import matplotlib.pyplot as plt$/;"	i
matplotlib	keras/analysis/RootAnalysis.py	/^import matplotlib$/;"	i
matplotlib	keras/analysis/RootAnalysis.py	/^import matplotlib.pyplot as plt$/;"	i
matplotlib	keras/analysis/utils/RootPlotsGAN.py	/^import matplotlib$/;"	i
matplotlib	keras/analysis/utils/RootPlotsGAN.py	/^import matplotlib.pyplot as plt$/;"	i
matplotlib	keras/archives/analysis/PythonAnalysis.py	/^import matplotlib$/;"	i
matplotlib	keras/archives/analysis/PythonAnalysis.py	/^import matplotlib.pyplot as plt$/;"	i
matplotlib	keras/archives/analysis/analysis_fixed_cont.py	/^import matplotlib$/;"	i
matplotlib	keras/archives/analysis/analysis_fixed_cont.py	/^import matplotlib.cm as cm$/;"	i
matplotlib	keras/archives/analysis/analysis_fixed_cont.py	/^import matplotlib.pyplot as plt$/;"	i
matplotlib	keras/archives/analysis/detailed_analysis_flex.py	/^import matplotlib$/;"	i
matplotlib	keras/archives/analysis/detailed_analysis_flex.py	/^import matplotlib.cm as cm$/;"	i
matplotlib	keras/archives/analysis/detailed_analysis_flex.py	/^import matplotlib.pyplot as plt$/;"	i
matplotlib	keras/archives/analysis/fixed_analysis_flex.py	/^import matplotlib$/;"	i
matplotlib	keras/archives/analysis/fixed_analysis_flex.py	/^import matplotlib.cm as cm$/;"	i
matplotlib	keras/archives/analysis/fixed_analysis_flex.py	/^import matplotlib.pyplot as plt$/;"	i
matplotlib	keras/generate_pred.py	/^import matplotlib$/;"	i
matplotlib	keras/generate_pred.py	/^import matplotlib.cm as cm$/;"	i
matplotlib	keras/generate_pred.py	/^import matplotlib.pyplot as plt$/;"	i
matplotlib	keras/misc/Gen_ecalRatio_multi.py	/^import matplotlib$/;"	i
matplotlib	keras/misc/Gen_ecalRatio_multi.py	/^import matplotlib.cm as cm$/;"	i
matplotlib	keras/misc/Gen_ecalRatio_multi.py	/^import matplotlib.pyplot as plt$/;"	i
matplotlib	keras/misc/Gen_ecalRatio_stat.py	/^import matplotlib$/;"	i
matplotlib	keras/misc/Gen_ecalRatio_stat.py	/^import matplotlib.cm as cm$/;"	i
matplotlib	keras/misc/Gen_ecalRatio_stat.py	/^import matplotlib.pyplot as plt$/;"	i
matplotlib	keras/misc/Gen_ecalfit2.py	/^import matplotlib$/;"	i
matplotlib	keras/misc/Gen_ecalfit2.py	/^import matplotlib.cm as cm$/;"	i
matplotlib	keras/misc/Gen_ecalfit2.py	/^import matplotlib.pyplot as plt$/;"	i
matplotlib	keras/misc/LossvsOptftn.py	/^import matplotlib.pyplot as plt$/;"	i
matplotlib	keras/misc/data_info.py	/^import matplotlib$/;"	i
matplotlib	keras/misc/data_info.py	/^import matplotlib.cm as cm$/;"	i
matplotlib	keras/misc/data_info.py	/^import matplotlib.pyplot as plt$/;"	i
matplotlib	keras/misc/ecal_flat_python.py	/^import matplotlib.pyplot as plt$/;"	i
matplotlib	keras/misc/ecal_flat_root.py	/^import matplotlib.pyplot as plt$/;"	i
matplotlib	keras/misc/ecal_primary.py	/^import matplotlib$/;"	i
matplotlib	keras/misc/ecal_primary.py	/^import matplotlib.cm as cm$/;"	i
matplotlib	keras/misc/ecal_primary.py	/^import matplotlib.pyplot as plt$/;"	i
matplotlib	keras/misc/ecal_sum_python.py	/^import matplotlib.pyplot as plt$/;"	i
matplotlib	keras/misc/result_fit.py	/^import matplotlib$/;"	i
matplotlib	keras/misc/result_fit.py	/^import matplotlib.cm as cm$/;"	i
matplotlib	keras/misc/result_fit.py	/^import matplotlib.pyplot as plt$/;"	i
matplotlib	keras/misc/root_fit.py	/^import matplotlib$/;"	i
matplotlib	keras/misc/root_fit.py	/^import matplotlib.cm as cm$/;"	i
matplotlib	keras/misc/root_fit.py	/^import matplotlib.pyplot as plt$/;"	i
matplotlib	keras/paramScan/HyperParameterScan.py	/^import matplotlib$/;"	i
matplotlib	keras/paramScan/HyperParameterScan.py	/^import matplotlib.cm as cm$/;"	i
matplotlib	keras/paramScan/HyperParameterScan.py	/^import matplotlib.pyplot as plt$/;"	i
matplotlib	keras/paramScan/HyperParameterScan_multi.py	/^import matplotlib$/;"	i
matplotlib	keras/paramScan/HyperParameterScan_multi.py	/^import matplotlib.cm as cm$/;"	i
matplotlib	keras/paramScan/HyperParameterScan_multi.py	/^import matplotlib.pyplot as plt$/;"	i
matplotlib	keras/paramScan/HyperParameterScan_small.py	/^import matplotlib$/;"	i
matplotlib	keras/paramScan/HyperParameterScan_small.py	/^import matplotlib.cm as cm$/;"	i
matplotlib	keras/paramScan/HyperParameterScan_small.py	/^import matplotlib.pyplot as plt$/;"	i
matplotlib	keras/paramScan/TestingObjective.py	/^import matplotlib$/;"	i
matplotlib	keras/paramScan/TestingObjective.py	/^import matplotlib.cm as cm$/;"	i
matplotlib	keras/paramScan/TestingObjective.py	/^import matplotlib.pyplot as plt$/;"	i
matplotlib	keras/validation_analysis.py	/^import matplotlib$/;"	i
matplotlib	keras/validation_analysis.py	/^import matplotlib.pyplot as plt$/;"	i
matplotlib	scripts/RootPlotsGAN.py	/^import matplotlib$/;"	i
matplotlib	scripts/RootPlotsGAN.py	/^import matplotlib.pyplot as plt$/;"	i
matplotlib	scripts/data_info.py	/^import matplotlib$/;"	i
matplotlib	scripts/data_info.py	/^import matplotlib.cm as cm$/;"	i
matplotlib	scripts/data_info.py	/^import matplotlib.pyplot as plt$/;"	i
matplotlib	scripts/gaussian.py	/^import matplotlib$/;"	i
matplotlib	scripts/gaussian.py	/^import matplotlib.pyplot as plt$/;"	i
max_elem	neon/potential_gan.py	/^max_elem = np.max(np.abs(X))$/;"	v
max_iter	caffe/caffe_train.py	/^max_iter = 34900  # maximum number of iterations$/;"	v
max_pos_100	keras/misc/data_info.py	/^max_pos_100 = np.zeros((num_events, 3))$/;"	v
max_pos_100	scripts/data_info.py	/^max_pos_100 = np.zeros((num_events, 3))$/;"	v
max_pos_150	keras/misc/data_info.py	/^max_pos_150 = np.zeros((num_events, 3))$/;"	v
max_pos_150	scripts/data_info.py	/^max_pos_150 = np.zeros((num_events, 3))$/;"	v
max_pos_200	keras/misc/data_info.py	/^max_pos_200 = np.zeros((num_events, 3))$/;"	v
max_pos_200	scripts/data_info.py	/^max_pos_200 = np.zeros((num_events, 3))$/;"	v
max_pos_300	keras/misc/data_info.py	/^max_pos_300 = np.zeros((num_events, 3))$/;"	v
max_pos_300	scripts/data_info.py	/^max_pos_300 = np.zeros((num_events, 3))$/;"	v
max_pos_400	keras/misc/data_info.py	/^max_pos_400 = np.zeros((num_events, 3))$/;"	v
max_pos_400	scripts/data_info.py	/^max_pos_400 = np.zeros((num_events, 3))$/;"	v
max_pos_50	keras/misc/data_info.py	/^max_pos_50 = np.zeros((num_events, 3))$/;"	v
max_pos_50	scripts/data_info.py	/^max_pos_50 = np.zeros((num_events, 3))$/;"	v
max_pos_500	keras/misc/data_info.py	/^max_pos_500 = np.zeros((num_events, 3))$/;"	v
max_pos_500	scripts/data_info.py	/^max_pos_500 = np.zeros((num_events, 3))$/;"	v
max_width	metrics/swd.py	/^                                             max_width=(1, 1, 8, 16, 16))[0]$/;"	v
maxfile	keras/archives/analysis/PythonAnalysis.py	/^   maxfile = "Position_of_max_" + str(energy) + ".pdf"$/;"	v
maxfile	keras/archives/analysis/analysis_fixed_cont.py	/^   maxfile = "Position_of_max_" + str(energy) + ".pdf"$/;"	v
maxfile	keras/archives/analysis/detailed_analysis_flex.py	/^   maxfile = "Position_of_max_" + str(energy) + ".pdf"$/;"	v
maxfile	keras/archives/analysis/fixed_analysis_flex.py	/^      maxfile = "Position_of_max_" + str(energy) + ".pdf"$/;"	v
maxfile	keras/archives/analysis/fixed_analysis_flex.py	/^   maxfile = "Position_of_max_" + str(energy) + ".pdf"$/;"	v
maxn	analysis/h5toroot_evc.py	/^maxn = int(sys.argv[3])$/;"	v
mean	neon/potential_gan.py	/^mean = np.mean(X, axis=0, keepdims=True)$/;"	v
mean1	scripts/gaussian.py	/^mean1 = 10$/;"	v
mean2	scripts/gaussian.py	/^mean2 = 10$/;"	v
mean_squared_error	metrics/skim_metrics.py	/^from skimage.metrics import mean_squared_error, normalized_root_mse, peak_signal_noise_ratio, structural_similarity$/;"	i
meanallfile	keras/archives/analysis/PythonAnalysis.py	/^   meanallfile = "hist_mean_all.pdf"$/;"	v
meanallfile	keras/archives/analysis/analysis_fixed_cont.py	/^   meanallfile = "hist_mean_all.pdf"$/;"	v
meanallfile	keras/archives/analysis/detailed_analysis_flex.py	/^   meanallfile = "hist_mean_all.pdf"$/;"	v
meanallfile	keras/archives/analysis/fixed_analysis_flex.py	/^      meanallfile = "hist_mean_all.pdf"$/;"	v
meanallfile	keras/archives/analysis/fixed_analysis_flex.py	/^   meanallfile = "hist_mean_all.pdf"$/;"	v
measPython	keras/analysis/utils/GANutils.py	/^def measPython(image): # Working version:p1 and p2 are not used. 3D angle with barycenter as reference point$/;"	f
measPython	scripts/GANutils.py	/^def measPython(image): # Working version:p1 and p2 are not used. 3D angle with barycenter as reference point$/;"	f
merge	keras/AngleArch3dGAN.py	/^from keras.layers import (Input, Dense, Reshape, Flatten, Lambda, merge,$/;"	i
merge	keras/EcalEnergyGan.py	/^from keras.layers import (Input, Dense, Reshape, Flatten, Lambda, merge,$/;"	i
merge	keras/archives/architectures_tested/arch10.py	/^from keras.layers import (Input, Dense, Reshape, Flatten, Lambda, merge,$/;"	i
merge	keras/archives/architectures_tested/arch11.py	/^from keras.layers import (Input, Dense, Reshape, Flatten, Lambda, merge,$/;"	i
merge	keras/archives/architectures_tested/arch12.py	/^from keras.layers import (Input, Dense, Reshape, Flatten, Lambda, merge,$/;"	i
merge	keras/archives/architectures_tested/arch13.py	/^from keras.layers import (Input, Dense, Reshape, Flatten, Lambda, merge,$/;"	i
merge	keras/archives/architectures_tested/arch14.py	/^from keras.layers import (Input, Dense, Reshape, Flatten, Lambda, merge,$/;"	i
merge	keras/archives/architectures_tested/arch15.py	/^from keras.layers import (Input, Dense, Reshape, Flatten, Lambda, merge,$/;"	i
merge	keras/archives/architectures_tested/arch16.py	/^from keras.layers import (Input, Dense, Reshape, Flatten, Lambda, merge,$/;"	i
merge	keras/archives/architectures_tested/arch7.py	/^from keras.layers import (Input, Dense, Reshape, Flatten, Lambda, merge,$/;"	i
merge	keras/archives/architectures_tested/arch8.py	/^from keras.layers import (Input, Dense, Reshape, Flatten, Lambda, merge,$/;"	i
merge	keras/archives/architectures_tested/arch9.py	/^from keras.layers import (Input, Dense, Reshape, Flatten, Lambda, merge,$/;"	i
merge	keras/archives/architectures_tested/archlayer6.py	/^from keras.layers import (Input, Dense, Reshape, Flatten, Lambda, merge,$/;"	i
merge	keras/archives/architectures_tested/ecalvegan2.py	/^from keras.layers import (Input, Dense, Reshape, Flatten, Lambda, merge,$/;"	i
merge	keras/archives/architectures_tested/ecalvegan3.py	/^from keras.layers import (Input, Dense, Reshape, Flatten, Lambda, merge,$/;"	i
merge	keras/archives/architectures_tested/ecalvegan4.py	/^from keras.layers import (Input, Dense, Reshape, Flatten, Lambda, merge,$/;"	i
merge	keras/archives/architectures_tested/new_arch.py	/^from keras.layers import (Input, Dense, Reshape, Flatten, Lambda, merge,$/;"	i
merge	keras/archives/log/EcalEnergyGanlog.py	/^from keras.layers import (Input, Dense, Reshape, Flatten, Lambda, merge,$/;"	i
merge	keras/archives/normInit/normalInit.py	/^from keras.layers import (Input, Dense, Reshape, Flatten, Lambda, merge,$/;"	i
merge	keras/paramScan/HyperParameterScan.py	/^from keras.layers import (Input, Dense, Reshape, Flatten, Lambda, merge,$/;"	i
merge	keras/paramScan/HyperParameterScan_multi.py	/^from keras.layers import (Input, Dense, Reshape, Flatten, Lambda, merge,$/;"	i
merge	keras/paramScan/HyperParameterScan_small.py	/^from keras.layers import (Input, Dense, Reshape, Flatten, Lambda, merge,$/;"	i
merge	keras/paramScan/TestingObjective.py	/^from keras.layers import (Input, Dense, Reshape, Flatten, Lambda, merge,$/;"	i
merge	networks/AngleGAN/discriminator.py	/^from keras.layers import (Input, Dense, Reshape, Flatten, Lambda, merge,$/;"	i
merge	networks/AngleGAN/generator.py	/^from keras.layers import (Input, Dense, Reshape, Flatten, Lambda, merge,$/;"	i
metric	keras/analysis/utils/GANutils.py	/^def metric(var, energies, m, angtype='mtheta', x=25, y=25, z=25, ang=1):$/;"	f
metric	scripts/GANutils.py	/^def metric(var, energies, m, angtype='mtheta', x=25, y=25, z=25, ang=1):$/;"	f
metric3	keras/paramScan/TestingObjective.py	/^def metric3(var, energies, m):$/;"	f
metric4	keras/paramScan/HyperParameterScan_multi.py	/^def metric4(var, energies, m):$/;"	f
metric4	keras/paramScan/HyperParameterScan_small.py	/^def metric4(var, energies, m):$/;"	f
metric4	keras/paramScan/TestingObjective.py	/^def metric4(var, energies, m):$/;"	f
mfile	keras/archives/analysis/PythonAnalysis.py	/^      mfile=xfile + str(mmt) + ".pdf"$/;"	v
mfile	keras/archives/analysis/PythonAnalysis.py	/^      mfile=yfile + str(mmt) + ".pdf"$/;"	v
mfile	keras/archives/analysis/PythonAnalysis.py	/^      mfile=zfile + str(mmt) + ".pdf"$/;"	v
mg	keras/misc/Gen_ecalfit2.py	/^mg=TMultiGraph()$/;"	v
mg	keras/misc/result_fit.py	/^mg=TMultiGraph();$/;"	v
minibatch_stddev_layer	networks/ops.py	/^def minibatch_stddev_layer(x, group_size=4):$/;"	f
mod	keras/EcalEnergyTrain_hvd.py	/^    mod=0$/;"	v
mod	keras/test.py	/^    mod=0$/;"	v
model	keras/archives/log/TrainPionslog.py	/^    model = params.model$/;"	v
model	keras/archives/log/TrainPionslog_dual.py	/^    model = params.model$/;"	v
momentum	caffe/caffe_train.py	/^momentum = 0.9$/;"	v
momentum_hist	caffe/caffe_train.py	/^momentum_hist ={}$/;"	v
multiplier	keras/archives/Data_Generators/AllEnergyTrain.py	/^    multiplier=1$/;"	v
multiplier	keras/archives/Data_Generators/GenEnergyTrain.py	/^    multiplier=1$/;"	v
multiprocessing	dataset.py	/^import multiprocessing$/;"	i
my	keras/analysis/RootAnalysis.py	/^import ROOTutils as my$/;"	i
my	keras/analysis/utils/RootPlotsGAN.py	/^import ROOTutils as my # common utility functions for root$/;"	i
my	keras/misc/ecal_flat_root.py	/^import ROOTutils as my$/;"	i
my	plot.py	/^import scripts.ROOTutils as my$/;"	i
my	scripts/RootPlotsGAN.py	/^import ROOTutils as my # common utility functions for root$/;"	i
myNorm	keras/archives/Data_Generators/AllEnergyTrain.py	/^def myNorm(Norms):$/;"	f
myNorm	keras/archives/Data_Generators/GenEnergyTrain.py	/^def myNorm(Norms):$/;"	f
mySetupData	keras/archives/Data_Generators/AllEnergyTrain.py	/^def mySetupData(FileSearch,$/;"	f
mySetupData	keras/archives/Data_Generators/GenEnergyTrain.py	/^def mySetupData(FileSearch,$/;"	f
my_discriminator	neon/potential_gan.py	/^my_discriminator = Model(gan.layers.discriminator)$/;"	v
my_generator	neon/potential_gan.py	/^my_generator = Model(gan.layers.generator)$/;"	v
n	caffe/creating_proto.py	/^n = caffe.NetSpec()$/;"	v
nEvents	keras/EcalEnergyTrain_hvd.py	/^    nEvents = params.nbEvents#Total events for training$/;"	v
nEvents	keras/archives/log/TrainPionslog.py	/^    nEvents = params.nbEvents#Total events for training$/;"	v
nEvents	keras/archives/log/TrainPionslog_dual.py	/^    nEvents = params.nbEvents#Total events for training$/;"	v
nEvents	keras/archives/train/Train_rootfit_scaled_2D.py	/^    nEvents = params.nbEvents#Total events for training$/;"	v
nEvents	keras/archives/train/Train_single_pass.py	/^    nEvents = params.nbEvents#Total events for training$/;"	v
nEvents	keras/test.py	/^    nEvents = params.nbEvents#Total events for training$/;"	v
n_events	analysis/analysis3D.py	/^n_events = results.nevents$/;"	v
n_jets	keras/archives/analysis/analysis_fixed_cont.py	/^n_jets = 150000         #events to take from data file$/;"	v
n_jets	keras/archives/analysis/detailed_analysis_flex.py	/^n_jets = 150000         #events to take from data file$/;"	v
n_threads	keras/archives/Data_Generators/AllEnergyTrain.py	/^    n_threads=4$/;"	v
n_threads	keras/archives/Data_Generators/GenEnergyTrain.py	/^    n_threads=4$/;"	v
name	keras/archives/Data_Generators/AllEnergyTrain.py	/^        name='combined_model'$/;"	v
name	keras/archives/Data_Generators/GenEnergyTrain.py	/^        name='combined_model'$/;"	v
name	keras/archives/normInit/normalInitTrain.py	/^        name='combined_model'$/;"	v
name	keras/archives/train/particle3Dtrain.py	/^        name='combined_model'$/;"	v
nb_batches	keras/archives/Data_Generators/AllEnergyTrain.py	/^    nb_batches = NTrain\/batch_size$/;"	v
nb_batches	keras/archives/Data_Generators/GenEnergyTrain.py	/^    nb_batches = NTrain\/batch_size$/;"	v
nb_batches	keras/archives/normInit/normalInitTrain.py	/^        nb_batches = int(X_train.shape[0] \/ batch_size)$/;"	v
nb_batches	keras/archives/train/particle3Dtrain.py	/^        nb_batches = int(X_train.shape[0] \/ batch_size)$/;"	v
nb_classes	keras/archives/Data_Generators/AllEnergyTrain.py	/^    nb_classes = 2$/;"	v
nb_classes	keras/archives/Data_Generators/GenEnergyTrain.py	/^    nb_classes = 2$/;"	v
nb_classes	keras/archives/normInit/normalInitTrain.py	/^    nb_classes = 2$/;"	v
nb_classes	keras/archives/train/particle3Dtrain.py	/^    nb_classes = 2$/;"	v
nb_epochs	keras/EcalEnergyTrain_hvd.py	/^    nb_epochs = params.nbepochs #Total Epochs$/;"	v
nb_epochs	keras/archives/Data_Generators/AllEnergyTrain.py	/^    nb_epochs = 30$/;"	v
nb_epochs	keras/archives/Data_Generators/GenEnergyTrain.py	/^    nb_epochs = 30$/;"	v
nb_epochs	keras/archives/log/TrainPionslog.py	/^    nb_epochs = 50$/;"	v
nb_epochs	keras/archives/log/TrainPionslog_dual.py	/^    nb_epochs = 50$/;"	v
nb_epochs	keras/archives/normInit/normalInitTrain.py	/^    nb_epochs = 50 $/;"	v
nb_epochs	keras/archives/train/Train_rootfit_scaled_2D.py	/^    nb_epochs = params.nbepochs #Total Epochs$/;"	v
nb_epochs	keras/archives/train/Train_single_pass.py	/^    nb_epochs = params.nbepochs #Total Epochs$/;"	v
nb_epochs	keras/archives/train/particle3Dtrain.py	/^    nb_epochs = 50$/;"	v
nb_epochs	keras/test.py	/^    nb_epochs = params.nbepochs #Total Epochs$/;"	v
nb_epochs	neon/potential_gan.py	/^nb_epochs = 15$/;"	v
nb_test	keras/test.py	/^    nb_test = 100$/;"	v
nb_test	neon/potential_gan.py	/^nb_test = 100$/;"	v
nb_testbatches	keras/archives/Data_Generators/AllEnergyTrain.py	/^    nb_testbatches= NTest\/batch_size$/;"	v
nb_testbatches	keras/archives/Data_Generators/GenEnergyTrain.py	/^    nb_testbatches= NTest\/batch_size$/;"	v
ndimage	metrics/swd.py	/^import scipy.ndimage$/;"	i
networks	scripts/main.py	/^def networks(config, phase, generator, discriminator, g_lr, d_lr, optimizer_gen, optimizer_disc, lr_step, update_step, update_g_lr, update_d_lr, npy_data, real_image_input, real_label, base_shape, batch_size, base_dim, num_phases, var_list, verbose, logdir, writer):$/;"	f
nevents	analysis/h5toroot_evc.py	/^  nevents = maxn$/;"	v
nevents	analysis/h5toroot_evc.py	/^nevents = ecal.shape[0]$/;"	v
nevents	analysis/h5toroot_evc.py	/^nevents = maxn$/;"	v
nevents	scripts/gaussian.py	/^nevents =5 # events of one class. Total will be double$/;"	v
no_op	utils.py	/^        def no_op():$/;"	f	function:lr_update
noise	analysis/analysis3D.py	/^noise = np.random.normal(0, 1, (n_events, latent_space))$/;"	v
noise	caffe/caffe_train.py	/^      noise = np.random.normal(0, 1, (batch_size, latent)).astype(np.float32)$/;"	v
noise	caffe/caffe_train.py	/^  noise = np.random.normal(0, 1, (batch_size, latent)).astype(np.float32)$/;"	v
noise	keras/archives/Data_Generators/AllEnergyTrain.py	/^                noise = np.random.normal(0, 1, (batch_size, latent_size))$/;"	v
noise	keras/archives/Data_Generators/AllEnergyTrain.py	/^            noise = np.random.normal(0, 1, (2 * batch_size, latent_size))$/;"	v
noise	keras/archives/Data_Generators/AllEnergyTrain.py	/^            noise = np.random.normal(0, 1, (batch_size, latent_size))$/;"	v
noise	keras/archives/Data_Generators/GenEnergyTrain.py	/^                noise = np.random.normal(0, 1, (batch_size, latent_size))$/;"	v
noise	keras/archives/Data_Generators/GenEnergyTrain.py	/^            noise = np.random.normal(0, 1, (2 * batch_size, latent_size))$/;"	v
noise	keras/archives/Data_Generators/GenEnergyTrain.py	/^            noise = np.random.normal(0, 1, (batch_size, latent_size))$/;"	v
noise	keras/archives/analysis/analysis_fixed_cont.py	/^      noise = np.random.normal(0, 1, (num_events, latent_space))$/;"	v
noise	keras/archives/analysis/analysis_fixed_cont.py	/^   noise = np.random.normal(0, 1, (n_jets, latent_space))$/;"	v
noise	keras/archives/analysis/detailed_analysis_flex.py	/^   noise = np.random.normal(0, 1, (n_jets, latent_space))$/;"	v
noise	keras/archives/analysis/fixed_analysis_flex.py	/^      noise = np.random.normal(0, 1, (num_events_gan, latent_space))$/;"	v
noise	keras/archives/normInit/normalInitTrain.py	/^                noise = np.random.normal(0, 1, (batch_size, latent_size))$/;"	v
noise	keras/archives/normInit/normalInitTrain.py	/^            noise = np.random.normal(0, 1, (batch_size, latent_size))$/;"	v
noise	keras/archives/normInit/normalInitTrain.py	/^        noise = np.random.normal(0, 1, (2 * nb_test, latent_size))$/;"	v
noise	keras/archives/normInit/normalInitTrain.py	/^        noise = np.random.normal(0, 1, (nb_test, latent_size))$/;"	v
noise	keras/archives/train/particle3Dtrain.py	/^                noise = np.random.normal(0, 1, (batch_size, latent_size))$/;"	v
noise	keras/archives/train/particle3Dtrain.py	/^            noise = np.random.normal(0, 1, (batch_size, latent_size))$/;"	v
noise	keras/archives/train/particle3Dtrain.py	/^        noise = np.random.normal(0, 1, (2 * nb_test, latent_size))$/;"	v
noise	keras/archives/train/particle3Dtrain.py	/^        noise = np.random.normal(0, 1, (nb_test, latent_size))$/;"	v
noise	keras/eval.py	/^  noise = np.random.normal(0, 1, (num_events, latent))$/;"	v
noise	keras/generate_pred.py	/^  noise = np.random.normal(0, 1, (num_events, latent))$/;"	v
noise	keras/misc/Gen_ecalRatio_multi.py	/^   noise = np.random.normal(0, 1, (num_events, latent))$/;"	v
noise	keras/misc/Gen_ecalRatio_stat.py	/^   noise = np.random.normal(0, 1, (num_events, latent))$/;"	v
noise	keras/misc/Gen_ecalfit2.py	/^noise = np.random.normal(0, 1, (num_events, latent))$/;"	v
noise	keras/test.py	/^    noise = np.random.normal(0., 1., (nb_test, latent_size))$/;"	v
noise_black_patches1	metrics/swd.py	/^    noise_black_patches1 = rand_batch1.copy()$/;"	v
noise_black_patches2	metrics/swd.py	/^    noise_black_patches2 = rand_batch2.copy()$/;"	v
noise_dim	neon/potential_gan.py	/^noise_dim = (latent_size)$/;"	v
norm	scripts/gaussian.py	/^from scipy.stats import norm$/;"	i
norm_op	metrics/fid.py	/^    def norm_op(x):$/;"	f	function:test
normalize	keras/analysis/utils/ROOTutils.py	/^def normalize(hist, mod=0):$/;"	f
normalize	scripts/ROOTutils.py	/^def normalize(hist, mod=0):$/;"	f
normalized_root_mse	metrics/skim_metrics.py	/^from skimage.metrics import mean_squared_error, normalized_root_mse, peak_signal_noise_ratio, structural_similarity$/;"	i
np	analysis/analysis3D.py	/^import numpy as np$/;"	i
np	analysis/h5toroot_evc.py	/^import numpy as np$/;"	i
np	caffe/caffe_train.py	/^import numpy as np$/;"	i
np	caffe/creating_proto.py	/^import numpy as np$/;"	i
np	dataset.py	/^import numpy as np$/;"	i
np	generate.py	/^import numpy as np$/;"	i
np	keras/AngleArch3dGAN.py	/^import numpy as np$/;"	i
np	keras/AngleArch3dGAN_tf2.py	/^import numpy as np$/;"	i
np	keras/AngleTrain3dGAN_hvd.py	/^import numpy as np$/;"	i
np	keras/AngleTrain3dGAN_hvd_tf2.py	/^import numpy as np$/;"	i
np	keras/EcalEnergyGan.py	/^import numpy as np$/;"	i
np	keras/EcalEnergyTrain_hvd.py	/^import numpy as np$/;"	i
np	keras/analysis/LossPlots.py	/^import numpy as np$/;"	i
np	keras/analysis/ObjectivePlots.py	/^import numpy as np$/;"	i
np	keras/analysis/RootAnalysis.py	/^import numpy as np$/;"	i
np	keras/analysis/utils/GANutils.py	/^import numpy as np$/;"	i
np	keras/analysis/utils/ROOTutils.py	/^import numpy as np$/;"	i
np	keras/analysis/utils/RootPlotsGAN.py	/^import numpy as np$/;"	i
np	keras/archives/Data_Generators/AllEnergyTrain.py	/^import numpy as np$/;"	i
np	keras/archives/Data_Generators/GenEnergyTrain.py	/^import numpy as np$/;"	i
np	keras/archives/RootAnalysis_multi_pions.py	/^import numpy as np$/;"	i
np	keras/archives/analysis/PythonAnalysis.py	/^import numpy as np$/;"	i
np	keras/archives/analysis/analysis_fixed_cont.py	/^import numpy as np$/;"	i
np	keras/archives/analysis/detailed_analysis_flex.py	/^import numpy as np$/;"	i
np	keras/archives/analysis/fixed_analysis_flex.py	/^import numpy as np$/;"	i
np	keras/archives/architectures_tested/arch10.py	/^import numpy as np$/;"	i
np	keras/archives/architectures_tested/arch11.py	/^import numpy as np$/;"	i
np	keras/archives/architectures_tested/arch12.py	/^import numpy as np$/;"	i
np	keras/archives/architectures_tested/arch13.py	/^import numpy as np$/;"	i
np	keras/archives/architectures_tested/arch14.py	/^import numpy as np$/;"	i
np	keras/archives/architectures_tested/arch15.py	/^import numpy as np$/;"	i
np	keras/archives/architectures_tested/arch16.py	/^import numpy as np$/;"	i
np	keras/archives/architectures_tested/arch7.py	/^import numpy as np$/;"	i
np	keras/archives/architectures_tested/arch8.py	/^import numpy as np$/;"	i
np	keras/archives/architectures_tested/arch9.py	/^import numpy as np$/;"	i
np	keras/archives/architectures_tested/archlayer6.py	/^import numpy as np$/;"	i
np	keras/archives/architectures_tested/ecalvegan2.py	/^import numpy as np$/;"	i
np	keras/archives/architectures_tested/ecalvegan3.py	/^import numpy as np$/;"	i
np	keras/archives/architectures_tested/ecalvegan4.py	/^import numpy as np$/;"	i
np	keras/archives/architectures_tested/new_arch.py	/^import numpy as np$/;"	i
np	keras/archives/log/EcalEnergyGanlog.py	/^import numpy as np$/;"	i
np	keras/archives/log/TrainPionslog.py	/^import numpy as np$/;"	i
np	keras/archives/log/TrainPionslog_dual.py	/^import numpy as np$/;"	i
np	keras/archives/normInit/normalInit.py	/^import numpy as np$/;"	i
np	keras/archives/normInit/normalInitTrain.py	/^import numpy as np$/;"	i
np	keras/archives/train/TrainChPions.py	/^import numpy as np$/;"	i
np	keras/archives/train/Train_rootfit_scaled_2D.py	/^import numpy as np$/;"	i
np	keras/archives/train/Train_single_pass.py	/^import numpy as np$/;"	i
np	keras/archives/train/particle3Dtrain.py	/^import numpy as np$/;"	i
np	keras/eval.py	/^import numpy as np$/;"	i
np	keras/generate_pred.py	/^import numpy as np$/;"	i
np	keras/misc/Gen_ecalRatio_multi.py	/^import numpy as np$/;"	i
np	keras/misc/Gen_ecalRatio_stat.py	/^import numpy as np$/;"	i
np	keras/misc/Gen_ecalfit2.py	/^import numpy as np$/;"	i
np	keras/misc/LossvsOptftn.py	/^import numpy as np$/;"	i
np	keras/misc/data_info.py	/^import numpy as np$/;"	i
np	keras/misc/ecal_flat_python.py	/^import numpy as np$/;"	i
np	keras/misc/ecal_flat_root.py	/^import numpy as np$/;"	i
np	keras/misc/ecal_primary.py	/^import numpy as np$/;"	i
np	keras/misc/ecal_sum_python.py	/^import numpy as np$/;"	i
np	keras/misc/result_fit.py	/^import numpy as np$/;"	i
np	keras/misc/root_fit.py	/^import numpy as np$/;"	i
np	keras/paramScan/HyperParameterScan.py	/^import numpy as np$/;"	i
np	keras/paramScan/HyperParameterScan_multi.py	/^import numpy as np$/;"	i
np	keras/paramScan/HyperParameterScan_small.py	/^import numpy as np$/;"	i
np	keras/paramScan/TestingObjective.py	/^import numpy as np$/;"	i
np	keras/test.py	/^import numpy as np$/;"	i
np	keras/validation_analysis.py	/^import numpy as np$/;"	i
np	main.py	/^import numpy as np$/;"	i
np	metrics/fid.py	/^import numpy as np$/;"	i
np	metrics/fid_new.py	/^import numpy as np$/;"	i
np	metrics/skim_metrics.py	/^import numpy as np$/;"	i
np	metrics/ssim.py	/^import numpy as np$/;"	i
np	metrics/swd.py	/^import numpy as np$/;"	i
np	neon/gen_data_norm.py	/^import numpy as np$/;"	i
np	neon/potential_gan.py	/^import numpy as np$/;"	i
np	neon/temporary_utils.py	/^import numpy as np$/;"	i
np	networks/AngleGAN/discriminator.py	/^import numpy as np$/;"	i
np	networks/AngleGAN/generator.py	/^import numpy as np$/;"	i
np	networks/loss.py	/^import numpy as np$/;"	i
np	networks/ops.py	/^import numpy as np$/;"	i
np	networks/pgan/loss_utils.py	/^import numpy as np$/;"	i
np	networks/test_network.py	/^import numpy as np$/;"	i
np	plot.py	/^import numpy as np$/;"	i
np	scripts/GANutils.py	/^import numpy as np$/;"	i
np	scripts/ROOTutils.py	/^import numpy as np$/;"	i
np	scripts/RootPlotsGAN.py	/^import numpy as np$/;"	i
np	scripts/data_info.py	/^import numpy as np$/;"	i
np	scripts/gaussian.py	/^import numpy as np$/;"	i
np	scripts/hdf_to_numpy.py	/^import numpy as np$/;"	i
np	scripts/main.py	/^import numpy as np$/;"	i
np	scripts/sara_main.py	/^import numpy as np$/;"	i
np	utils.py	/^import numpy as np$/;"	i
num	keras/archives/analysis/fixed_analysis_flex.py	/^      num = 0$/;"	v
num	keras/archives/analysis/fixed_analysis_flex.py	/^num = 0                                     $/;"	v
num_clas	caffe/caffe_train.py	/^num_clas = 2$/;"	v
num_clas	caffe/creating_proto.py	/^num_clas = 2$/;"	v
num_data	keras/archives/analysis/PythonAnalysis.py	/^num_data = 100000$/;"	v
num_events	keras/archives/analysis/PythonAnalysis.py	/^num_events = 2000$/;"	v
num_events	keras/archives/analysis/analysis_fixed_cont.py	/^num_events=3000         #events in each bin$/;"	v
num_events	keras/archives/analysis/detailed_analysis_flex.py	/^num_events=5000         #events in each bin$/;"	v
num_events	keras/eval.py	/^num_events=1000$/;"	v
num_events	keras/generate_pred.py	/^num_events=1000$/;"	v
num_events	keras/misc/Gen_ecalRatio_multi.py	/^num_events=1000$/;"	v
num_events	keras/misc/Gen_ecalRatio_stat.py	/^num_events=1000$/;"	v
num_events	keras/misc/Gen_ecalfit2.py	/^num_events=1000$/;"	v
num_events	keras/misc/data_info.py	/^num_events= 500$/;"	v
num_events	keras/misc/ecal_primary.py	/^num_events= 1000$/;"	v
num_events	keras/misc/root_fit.py	/^num_events=10000$/;"	v
num_events	keras/validation_analysis.py	/^num_events=1000$/;"	v
num_events	scripts/data_info.py	/^num_events= 500$/;"	v
num_events_act	keras/archives/analysis/fixed_analysis_flex.py	/^num_events_act=5000$/;"	v
num_events_gan	keras/archives/analysis/fixed_analysis_flex.py	/^         num_events_gan = len(var["generated_images" + str(energy)])$/;"	v
num_events_gan	keras/archives/analysis/fixed_analysis_flex.py	/^num_events_gan=5000$/;"	v
num_files	keras/archives/analysis/fixed_analysis_flex.py	/^num_files = np.ceil(num_events_act\/1000) # As each data file has 1000 events$/;"	v
num_filters	main.py	/^from networks.ops import num_filters$/;"	i
num_filters	networks/ops.py	/^def num_filters(phase, num_phases, base_shape, base_dim=None, size=None):$/;"	f
num_filters	scripts/main.py	/^from networks.ops import num_filters$/;"	i
num_filters	scripts/sara_main.py	/^from networks.ops import num_filters$/;"	i
num_phases	networks/pgan/discriminator.py	/^    num_phases = 8$/;"	v
num_phases	networks/pgan/generator.py	/^    num_phases = 8$/;"	v
num_phases	networks/test_network.py	/^    num_phases = 8$/;"	v
num_weights	keras/misc/result_fit.py	/^num_weights=30$/;"	v
numpy	keras/analysis/RootAnalysis.py	/^import numpy.core.umath_tests as umath$/;"	i
numpy	keras/analysis/utils/GANutils.py	/^import numpy.core.umath_tests as umath$/;"	i
numpy	keras/analysis/utils/RootPlotsGAN.py	/^import numpy.core.umath_tests as umath$/;"	i
numpy	keras/archives/RootAnalysis_multi_pions.py	/^import numpy.core.umath_tests as umath$/;"	i
numpy	keras/archives/analysis/PythonAnalysis.py	/^import numpy.core.umath_tests as umath$/;"	i
numpy	keras/paramScan/HyperParameterScan.py	/^import numpy.core.umath_tests as umath$/;"	i
numpy	keras/paramScan/HyperParameterScan_multi.py	/^import numpy.core.umath_tests as umath$/;"	i
numpy	keras/paramScan/HyperParameterScan_small.py	/^import numpy.core.umath_tests as umath$/;"	i
numpy	keras/paramScan/TestingObjective.py	/^import numpy.core.umath_tests as umath$/;"	i
numpy	scripts/GANutils.py	/^import numpy.core.umath_tests as umath$/;"	i
numpy	scripts/RootPlotsGAN.py	/^import numpy.core.umath_tests as umath$/;"	i
numpy	scripts/lcd_utils.py	/^import numpy$/;"	i
nvgpu	networks/test_network.py	/^import nvgpu$/;"	i
nvgpu	scripts/sara_main.py	/^import nvgpu$/;"	i
objective	keras/paramScan/HyperParameterScan.py	/^def objective(params):$/;"	f
ofile	analysis/h5toroot_evc.py	/^ofile = ROOT.TFile(sys.argv[2],'RECREATE')$/;"	v
ops	metrics/fid.py	/^from tensorflow.python.framework import ops$/;"	i
opt	keras/EcalEnergyTrain_hvd.py	/^    opt = getattr(keras.optimizers, params.optimizer)$/;"	v
opt	keras/EcalEnergyTrain_hvd.py	/^    opt = hvd.DistributedOptimizer(opt)$/;"	v
opt	keras/EcalEnergyTrain_hvd.py	/^    opt = opt(params.learningRate * hvd.size())$/;"	v
opt	keras/test.py	/^    opt = getattr(keras.optimizers, params.optimizer)$/;"	v
optim	networks/pgan/discriminator.py	/^        optim = tf.train.GradientDescentOptimizer(1e-5)$/;"	v
optim	networks/pgan/generator.py	/^        optim = tf.train.GradientDescentOptimizer(1e-5)$/;"	v
optimizer	keras/archives/Data_Generators/AllEnergyTrain.py	/^        optimizer=RMSprop(),$/;"	v
optimizer	keras/archives/Data_Generators/GenEnergyTrain.py	/^        optimizer=RMSprop(),$/;"	v
optimizer	keras/archives/normInit/normalInitTrain.py	/^        optimizer=RMSprop(),$/;"	v
optimizer	keras/archives/train/particle3Dtrain.py	/^        optimizer=RMSprop(),$/;"	v
optimizer	neon/potential_gan.py	/^optimizer = GradientDescentMomentum(learning_rate=1e-3, momentum_coef = 0.9)$/;"	v
optimizers	scripts/main.py	/^def optimizers():$/;"	f
os	analysis/analysis3D.py	/^import os, h5py$/;"	i
os	caffe/caffe_train.py	/^import os$/;"	i
os	caffe/creating_proto.py	/^import os$/;"	i
os	dataset.py	/^import os$/;"	i
os	generate.py	/^import os$/;"	i
os	keras/AngleTrain3dGAN_hvd.py	/^import os$/;"	i
os	keras/AngleTrain3dGAN_hvd_tf2.py	/^import os$/;"	i
os	keras/EcalEnergyTrain_hvd.py	/^import os$/;"	i
os	keras/analysis/LossPlots.py	/^import os$/;"	i
os	keras/analysis/ObjectivePlots.py	/^import os$/;"	i
os	keras/analysis/RootAnalysis.py	/^import os$/;"	i
os	keras/analysis/utils/GANutils.py	/^import os$/;"	i
os	keras/analysis/utils/RootPlotsGAN.py	/^import os$/;"	i
os	keras/archives/Data_Generators/AllEnergyTrain.py	/^import os$/;"	i
os	keras/archives/Data_Generators/GenEnergyTrain.py	/^import os$/;"	i
os	keras/archives/RootAnalysis_multi_pions.py	/^import os$/;"	i
os	keras/archives/analysis/PythonAnalysis.py	/^import os$/;"	i
os	keras/archives/analysis/analysis_fixed_cont.py	/^import os, h5py$/;"	i
os	keras/archives/analysis/detailed_analysis_flex.py	/^import os, h5py$/;"	i
os	keras/archives/analysis/fixed_analysis_flex.py	/^import os, h5py$/;"	i
os	keras/archives/log/TrainPionslog.py	/^import os$/;"	i
os	keras/archives/log/TrainPionslog_dual.py	/^import os$/;"	i
os	keras/archives/normInit/normalInitTrain.py	/^import os$/;"	i
os	keras/archives/train/TrainChPions.py	/^import os$/;"	i
os	keras/archives/train/Train_rootfit_scaled_2D.py	/^import os$/;"	i
os	keras/archives/train/Train_single_pass.py	/^import os$/;"	i
os	keras/archives/train/particle3Dtrain.py	/^import os$/;"	i
os	keras/misc/LossvsOptftn.py	/^import os$/;"	i
os	keras/misc/data_info.py	/^import os$/;"	i
os	keras/misc/ecal_flat_python.py	/^import os$/;"	i
os	keras/misc/ecal_flat_root.py	/^import os$/;"	i
os	keras/misc/ecal_primary.py	/^import os$/;"	i
os	keras/misc/ecal_sum_python.py	/^import os$/;"	i
os	keras/paramScan/HyperParameterScan.py	/^import os$/;"	i
os	keras/paramScan/HyperParameterScan_multi.py	/^import os$/;"	i
os	keras/paramScan/HyperParameterScan_small.py	/^import os$/;"	i
os	keras/paramScan/TestingObjective.py	/^import os$/;"	i
os	keras/test.py	/^import os$/;"	i
os	main.py	/^import os$/;"	i
os	metrics/fid.py	/^import os$/;"	i
os	metrics/fid_new.py	/^import os$/;"	i
os	neon/gan3D.py	/^import os$/;"	i
os	neon/potential_gan.py	/^import os$/;"	i
os	networks/test_network.py	/^import os$/;"	i
os	plot.py	/^import os$/;"	i
os	scripts/GANutils.py	/^import os$/;"	i
os	scripts/RootPlotsGAN.py	/^import os$/;"	i
os	scripts/data_info.py	/^import os$/;"	i
os	scripts/hdf_to_numpy.py	/^import os$/;"	i
os	scripts/main.py	/^import os$/;"	i
os	scripts/sara_main.py	/^import os$/;"	i
os	utils.py	/^import os$/;"	i
osc	neon/gen_data_norm.py	/^def osc(x, y, z, kx, ky, kz, cx, cy, cz):$/;"	f
outdir	analysis/analysis3D.py	/^outdir = 'plots'$/;"	v
outdir	keras/misc/data_info.py	/^outdir = 'data_info_plots'$/;"	v
outdir	scripts/data_info.py	/^outdir = 'data_info_plots'$/;"	v
outfileE_name	analysis/analysis3D.py	/^outfileE_name = '\/data\/svalleco\/GAN\/generatedImages\/generationE{1:03d}.hdf5'.format(results.nrun)$/;"	v
outfileG_name	analysis/analysis3D.py	/^outfileG_name = '\/data\/svalleco\/GAN\/generatedImages\/generationG{1:03d}.hdf5'.format(results.nrun)$/;"	v
outfile_name	analysis/analysis3D.py	/^outfile_name = '\/data\/svalleco\/GAN\/generatedImages\/generation{1:03d}.hdf5'.format(results.nrun)$/;"	v
output	keras/archives/Data_Generators/AllEnergyTrain.py	/^        output=[fake, aux, ecal],$/;"	v
output	keras/archives/Data_Generators/GenEnergyTrain.py	/^        output=[fake, aux, ecal],$/;"	v
output	keras/archives/normInit/normalInitTrain.py	/^        output=[fake, aux, ecal],$/;"	v
output	keras/archives/train/particle3Dtrain.py	/^        output=[fake, aux],$/;"	v
output	scripts/hdf_to_numpy.py	/^output='\/home\/achaibi\/scratch\/CERN_anglegan\/numpy'$/;"	v
overwrite	keras/archives/Data_Generators/AllEnergyTrain.py	/^                                   overwrite=True)$/;"	v
overwrite	keras/archives/Data_Generators/AllEnergyTrain.py	/^                               overwrite=True)$/;"	v
overwrite	keras/archives/Data_Generators/GenEnergyTrain.py	/^                                   overwrite=True)$/;"	v
overwrite	keras/archives/Data_Generators/GenEnergyTrain.py	/^                               overwrite=True)$/;"	v
overwrite	keras/archives/normInit/normalInitTrain.py	/^                                   overwrite=True)$/;"	v
overwrite	keras/archives/normInit/normalInitTrain.py	/^                               overwrite=True)$/;"	v
overwrite	keras/archives/train/particle3Dtrain.py	/^                                   overwrite=True)$/;"	v
overwrite	keras/archives/train/particle3Dtrain.py	/^                               overwrite=True)$/;"	v
p1	keras/misc/ecal_primary.py	/^p1 = np.polyval(z1, Y)$/;"	v
p2	keras/misc/ecal_primary.py	/^p2 = np.polyval(z2, Y)$/;"	v
p3	keras/misc/ecal_primary.py	/^p3 = np.polyval(z3, Y)$/;"	v
pad1	neon/potential_gan.py	/^pad1 = dict(pad_h=2, pad_w=2, pad_d=2)$/;"	v
pad2	neon/potential_gan.py	/^pad2 = dict(pad_h=2, pad_w=2, pad_d=2)$/;"	v
pad3	neon/potential_gan.py	/^pad3 = dict(pad_h=0, pad_w=0, pad_d=0)$/;"	v
param	get_args.py	/^        param = PARAMS[j][0]$/;"	v
param	networks/pgan/generator.py	/^                      param=0.3)$/;"	v
params	keras/EcalEnergyTrain_hvd.py	/^    params = parser.parse_args()$/;"	v
params	keras/archives/log/TrainPionslog.py	/^    params = parser.parse_args()$/;"	v
params	keras/archives/log/TrainPionslog_dual.py	/^    params = parser.parse_args()$/;"	v
params	keras/archives/train/Train_rootfit_scaled_2D.py	/^    params = parser.parse_args()$/;"	v
params	keras/archives/train/Train_single_pass.py	/^    params = parser.parse_args()$/;"	v
params	keras/test.py	/^    params = parser.parse_args()$/;"	v
parse_tuple	generate.py	/^from utils import count_parameters, image_grid, parse_tuple$/;"	i
parse_tuple	main.py	/^from utils import count_parameters, image_grid, parse_tuple, MPMap, log0, lr_update$/;"	i
parse_tuple	scripts/main.py	/^from utils import count_parameters, image_grid, parse_tuple$/;"	i
parse_tuple	scripts/sara_main.py	/^from utils import count_parameters, image_grid, parse_tuple, MPMap$/;"	i
parse_tuple	utils.py	/^def parse_tuple(string):$/;"	f
parser	analysis/analysis3D.py	/^parser = get_parser()$/;"	v
parser	keras/EcalEnergyTrain_hvd.py	/^    parser = get_parser()$/;"	v
parser	keras/archives/log/TrainPionslog.py	/^    parser = get_parser()$/;"	v
parser	keras/archives/log/TrainPionslog_dual.py	/^    parser = get_parser()$/;"	v
parser	keras/archives/train/Train_rootfit_scaled_2D.py	/^    parser = get_parser()$/;"	v
parser	keras/archives/train/Train_single_pass.py	/^    parser = get_parser()$/;"	v
parser	keras/test.py	/^    parser = get_parser()$/;"	v
parser	main.py	/^    parser = argparse.ArgumentParser()$/;"	v
parser	neon/gan3D.py	/^parser = NeonArgparser(__doc__)$/;"	v
parser	scripts/sara_main.py	/^    parser = argparse.ArgumentParser()$/;"	v
path	keras/analysis/RootAnalysis.py	/^from os import path$/;"	i
path	keras/analysis/utils/RootPlotsGAN.py	/^from os import path$/;"	i
path	keras/archives/RootAnalysis_multi_pions.py	/^from os import path$/;"	i
path	keras/archives/analysis/PythonAnalysis.py	/^from os import path$/;"	i
path	keras/eval.py	/^from os import path$/;"	i
path	keras/generate_pred.py	/^from os import path$/;"	i
path	keras/misc/Gen_ecalRatio_multi.py	/^from os import path$/;"	i
path	keras/misc/Gen_ecalRatio_stat.py	/^from os import path$/;"	i
path	keras/misc/Gen_ecalfit2.py	/^from os import path$/;"	i
path	keras/misc/result_fit.py	/^from os import path$/;"	i
path	keras/misc/root_fit.py	/^from os import path$/;"	i
path	plot.py	/^from os import path$/;"	i
path	scripts/RootPlotsGAN.py	/^from os import path$/;"	i
pathlib	metrics/fid_new.py	/^import pathlib$/;"	i
peak_signal_noise_ratio	metrics/skim_metrics.py	/^from skimage.metrics import mean_squared_error, normalized_root_mse, peak_signal_noise_ratio, structural_similarity$/;"	i
perform_calculations	keras/archives/RootAnalysis_multi_pions.py	/^def perform_calculations(g, d, gweights, dweights, energies, datapath, sortdir, gendirs, discdirs, num_data, num_events, m, scales, flags, latent, events_per_file=10000, thresh=1e-6, particle='Pi0'):$/;"	f
perform_calculations_angle	keras/analysis/utils/GANutils.py	/^def perform_calculations_angle(g, d, gweights, dweights, energies, angles, datapath, sortdir, gendirs, discdirs, num_data, num_events, m, xscales, xpowers, angscales, dscale, flags, latent, particle='Ele', Data=GetAngleData, events_per_file=5000, angtype='theta', thresh=1e-6, offset=0.0, angloss=1, addloss=0, concat=1, pre=preproc, post=postproc, tolerance2 = 0.1):$/;"	f
perform_calculations_angle	scripts/GANutils.py	/^def perform_calculations_angle(g, d, gweights, dweights, energies, angles, datapath, sortdir, gendirs, discdirs, num_data, num_events, m, xscales, xpowers, angscales, dscale, flags, latent, particle='Ele', Data=GetAngleData, events_per_file=5000, angtype='theta', thresh=1e-6, offset=0.0, angloss=1, addloss=0, concat=1, pre=preproc, post=postproc, tolerance2 = 0.1, num_events1=10000):$/;"	f
perform_calculations_multi	keras/analysis/RootAnalysis.py	/^from utils.GANutils import perform_calculations_multi, safe_mkdir #Common functions from GANutils.py$/;"	i
perform_calculations_multi	keras/analysis/utils/GANutils.py	/^def perform_calculations_multi(g, d, gweights, dweights, energies, datapath, sortdir, gendirs, discdirs, num_data, num_events, m, scales, thresh, flags, latent, events_per_file=10000, particle='Ele', dformat='channels_last'):$/;"	f
perform_calculations_multi	scripts/GANutils.py	/^def perform_calculations_multi(g, d, gweights, dweights, energies, datapath, sortdir, gendirs, discdirs, num_data, num_events, m, scales, thresh, flags, latent, events_per_file=10000, particle='Ele', dformat='channels_last'):$/;"	f
pgan	scripts/main.py	/^import horovod.tensorflow as hvd #pgan$/;"	i
physics	networks/loss.py	/^from networks.pgan.loss_utils import ecal_sum, ecal_angle # physics functions used for training the discriminator (should be in conditional lambda layer)$/;"	i
pickle	keras/AngleTrain3dGAN_hvd.py	/^    import cPickle as pickle$/;"	i
pickle	keras/AngleTrain3dGAN_hvd.py	/^    import pickle$/;"	i
pickle	keras/AngleTrain3dGAN_hvd_tf2.py	/^    import cPickle as pickle$/;"	i
pickle	keras/AngleTrain3dGAN_hvd_tf2.py	/^    import pickle$/;"	i
pickle	keras/EcalEnergyTrain_hvd.py	/^    import cPickle as pickle$/;"	i
pickle	keras/EcalEnergyTrain_hvd.py	/^    import pickle$/;"	i
pickle	keras/analysis/LossPlots.py	/^    import cPickle as pickle$/;"	i
pickle	keras/analysis/LossPlots.py	/^    import pickle$/;"	i
pickle	keras/analysis/ObjectivePlots.py	/^    import cPickle as pickle$/;"	i
pickle	keras/analysis/ObjectivePlots.py	/^    import pickle$/;"	i
pickle	keras/archives/Data_Generators/AllEnergyTrain.py	/^    import cPickle as pickle$/;"	i
pickle	keras/archives/Data_Generators/AllEnergyTrain.py	/^    import pickle$/;"	i
pickle	keras/archives/Data_Generators/GenEnergyTrain.py	/^    import cPickle as pickle$/;"	i
pickle	keras/archives/Data_Generators/GenEnergyTrain.py	/^    import pickle$/;"	i
pickle	keras/archives/log/TrainPionslog.py	/^    import cPickle as pickle$/;"	i
pickle	keras/archives/log/TrainPionslog.py	/^    import pickle$/;"	i
pickle	keras/archives/log/TrainPionslog_dual.py	/^    import cPickle as pickle$/;"	i
pickle	keras/archives/log/TrainPionslog_dual.py	/^    import pickle$/;"	i
pickle	keras/archives/normInit/normalInitTrain.py	/^    import cPickle as pickle$/;"	i
pickle	keras/archives/normInit/normalInitTrain.py	/^    import pickle$/;"	i
pickle	keras/archives/train/TrainChPions.py	/^    import cPickle as pickle$/;"	i
pickle	keras/archives/train/TrainChPions.py	/^    import pickle$/;"	i
pickle	keras/archives/train/Train_rootfit_scaled_2D.py	/^    import cPickle as pickle$/;"	i
pickle	keras/archives/train/Train_rootfit_scaled_2D.py	/^    import pickle$/;"	i
pickle	keras/archives/train/Train_single_pass.py	/^    import cPickle as pickle$/;"	i
pickle	keras/archives/train/Train_single_pass.py	/^    import pickle$/;"	i
pickle	keras/archives/train/particle3Dtrain.py	/^    import cPickle as pickle$/;"	i
pickle	keras/archives/train/particle3Dtrain.py	/^    import pickle$/;"	i
pickle	keras/misc/LossvsOptftn.py	/^    import cPickle as pickle$/;"	i
pickle	keras/misc/LossvsOptftn.py	/^    import pickle$/;"	i
pickle	keras/paramScan/HyperParameterScan.py	/^    import cPickle as pickle$/;"	i
pickle	keras/paramScan/HyperParameterScan.py	/^    import pickle$/;"	i
pickle	keras/paramScan/HyperParameterScan_multi.py	/^    import cPickle as pickle$/;"	i
pickle	keras/paramScan/HyperParameterScan_multi.py	/^    import pickle$/;"	i
pickle	keras/paramScan/HyperParameterScan_small.py	/^    import cPickle as pickle$/;"	i
pickle	keras/paramScan/HyperParameterScan_small.py	/^    import pickle$/;"	i
pickle	keras/paramScan/TestingObjective.py	/^    import cPickle as pickle$/;"	i
pickle	keras/paramScan/TestingObjective.py	/^    import pickle$/;"	i
pickle	keras/test.py	/^    import cPickle as pickle$/;"	i
pickle	keras/test.py	/^    import pickle$/;"	i
pickle	scripts/main.py	/^    import cPickle as pickle$/;"	i
pickle	scripts/main.py	/^    import pickle$/;"	i
pid	networks/test_network.py	/^                 pid = os.getpid()$/;"	v
pixel_norm	networks/ops.py	/^def pixel_norm(x, epsilon=1e-8):$/;"	f
pklfile	keras/archives/log/TrainPionslog.py	/^    pklfile = 'dcgan-pion-history2.pkl'$/;"	v
pklfile	keras/archives/log/TrainPionslog_dual.py	/^    pklfile = 'dcgan-pion-history3.pkl'$/;"	v
plotSF	plot.py	/^def plotSF(Data, gan_images, Y, labels, out_file, session, error=0, stest=0, ifC=0, grid=0, leg=1, ):$/;"	f
plot_1to2	keras/archives/analysis/PythonAnalysis.py	/^def plot_1to2(array, index, out_file, num_fig, plot_label):$/;"	f
plot_1tototal	keras/archives/analysis/PythonAnalysis.py	/^def plot_1tototal(array, index, out_file, num_fig, plot_label):$/;"	f
plot_ang_hist	keras/analysis/utils/RootPlotsGAN.py	/^def plot_ang_hist(ang1, ang2, out_file, angle, angtype, labels, p, ifpdf=True):$/;"	f
plot_ang_hist	scripts/RootPlotsGAN.py	/^def plot_ang_hist(ang1, ang2, out_file, angle, angtype, labels, p, ifpdf=True, grid=True, leg=True, statbox=True, mono=False):$/;"	f
plot_angle_2Dhist	keras/analysis/utils/RootPlotsGAN.py	/^def plot_angle_2Dhist(ang1, ang2, y, out_file, angtype, labels, p, ifpdf=True):$/;"	f
plot_angle_2Dhist	scripts/RootPlotsGAN.py	/^def plot_angle_2Dhist(ang1, ang2, y, out_file, angtype, labels, p, ifpdf=True, grid=True, leg=True):$/;"	f
plot_angle_error_hist	keras/analysis/utils/RootPlotsGAN.py	/^def plot_angle_error_hist(ang1, ang2, y, out_file, angle, angtype, labels, p, ifpdf=True):$/;"	f
plot_angle_error_hist	scripts/RootPlotsGAN.py	/^def plot_angle_error_hist(ang1, ang2, y, out_file, angle, angtype, labels, p, ifpdf=True, grid=True, leg=True, statbox=True, mono=False):$/;"	f
plot_aux_hist	keras/analysis/RootAnalysis.py	/^def plot_aux_hist(aux1, aux2, out_file, energy, labels, ifpdf=True):$/;"	f
plot_aux_hist	keras/analysis/utils/RootPlotsGAN.py	/^def plot_aux_hist(aux1, aux2, out_file, energy, labels, p=[2, 500], ifpdf=True):$/;"	f
plot_aux_hist	scripts/RootPlotsGAN.py	/^def plot_aux_hist(aux1, aux2, out_file, energy, labels, p=[2, 500], ifpdf=True, leg=True, grid=True, stest=False, statbox=True, mono=False):$/;"	f
plot_aux_relative_profile	keras/analysis/RootAnalysis.py	/^def plot_aux_relative_profile(aux1, aux2, y, out_file, labels, ifpdf=True):$/;"	f
plot_aux_relative_profile	keras/analysis/utils/RootPlotsGAN.py	/^def plot_aux_relative_profile(aux1, aux2, y, out_file, labels, p=[2, 500], ifpdf=True):$/;"	f
plot_aux_relative_profile	keras/archives/RootAnalysis_multi_pions.py	/^def plot_aux_relative_profile(aux1, aux2, y, out_file):$/;"	f
plot_aux_relative_profile	scripts/RootPlotsGAN.py	/^def plot_aux_relative_profile(aux1, aux2, y, out_file, labels, p=[2, 500], stest=False, ifpdf=True, leg=True, grid=True, statbox=True, mono=False):$/;"	f
plot_convergence	keras/paramScan/HyperParameterScan_multi.py	/^from skopt.plots import plot_convergence$/;"	i
plot_convergence	keras/paramScan/HyperParameterScan_small.py	/^from skopt.plots import plot_convergence$/;"	i
plot_corr_python	keras/analysis/RootAnalysis.py	/^def plot_corr_python(sumx, sumy, sumz, momentx, momenty, momentz, ecal, energy, hits, ratio, out_file, label, compare=False, gprev=0):$/;"	f
plot_corr_python	keras/analysis/utils/RootPlotsGAN.py	/^def plot_corr_python(sumx, sumy, sumz, momentx, momenty, momentz, ecal, energy, hits, ratio, out_file, label, compare=False, gprev=0):$/;"	f
plot_corr_python	scripts/RootPlotsGAN.py	/^def plot_corr_python(sumx, sumy, sumz, momentx, momenty, momentz, ecal, energy, hits, ratio, out_file, label, compare=False, gprev=0, leg=True):$/;"	f
plot_corr_python_small	scripts/RootPlotsGAN.py	/^def plot_corr_python_small(momentx, momenty, momentz, ecal, energy, hits, ratio1, ratio2, ratio3, out_file, label, compare=False, gprev=0, leg=True):$/;"	f
plot_corr_root	keras/analysis/RootAnalysis.py	/^def plot_corr_root(sumx, sumy, sumz, momentx, momenty, momentz, ecal, energy, hits, ratio, out_file, label, compare=False, gprev=0):$/;"	f
plot_corr_root	keras/analysis/utils/RootPlotsGAN.py	/^def plot_corr_root(sumx, sumy, sumz, momentx, momenty, momentz, ecal, energy, hits, ratio, out_file, label, compare=False, stest=True, gprev=0):$/;"	f
plot_corr_root	scripts/RootPlotsGAN.py	/^def plot_corr_root(sumx, sumy, sumz, momentx, momenty, momentz, ecal, energy, hits, ratio, out_file, label, compare=False, stest=True, gprev=0, leg=True):$/;"	f
plot_correlation	keras/analysis/RootAnalysis.py	/^def plot_correlation(sumx, sumy, sumz, momentx, momenty, momentz, ecal, gsumx, gsumy, gsumz, gmomentx, gmomenty, gmomentz, gecal, energy, events1, events2, out_file, labels):$/;"	f
plot_correlation	keras/analysis/utils/RootPlotsGAN.py	/^def plot_correlation(sumx, sumy, sumz, momentx, momenty, momentz, ecal, gsumx, gsumy, gsumz, gmomentx, gmomenty, gmomentz, gecal, energy, events1, events2, out_file, labels):$/;"	f
plot_correlation	scripts/RootPlotsGAN.py	/^def plot_correlation(sumx, sumy, sumz, momentx, momenty, momentz, ecal, gsumx, gsumy, gsumz, gmomentx, gmomenty, gmomentz, gecal, energy, events1, events2, out_file, labels, leg=True):$/;"	f
plot_correlation_small	scripts/RootPlotsGAN.py	/^def plot_correlation_small(momentx, momenty, momentz, ecal, gmomentx, gmomenty, gmomentz, gecal, energy, events1, events2, out_file, labels, leg=True, stest=True):$/;"	f
plot_e_normalized	keras/archives/analysis/PythonAnalysis.py	/^def plot_e_normalized(array, index, out_file, num_fig, energy, color, bar=0):$/;"	f
plot_e_normalized2	keras/archives/analysis/PythonAnalysis.py	/^def plot_e_normalized2(array, index, out_file, num_fig, energy, color, bar=1):$/;"	f
plot_ecal	keras/archives/analysis/PythonAnalysis.py	/^def plot_ecal(array, index, out_file, num_fig, plot_label):$/;"	f
plot_ecal	keras/archives/analysis/analysis_fixed_cont.py	/^def plot_ecal(array, index, out_file, num_fig, plot_label):$/;"	f
plot_ecal	keras/archives/analysis/detailed_analysis_flex.py	/^def plot_ecal(array, index, out_file, num_fig, plot_label):$/;"	f
plot_ecal	keras/archives/analysis/fixed_analysis_flex.py	/^def plot_ecal(array, index, out_file, num_fig, plot_label):$/;"	f
plot_ecal_error	keras/archives/analysis/PythonAnalysis.py	/^def plot_ecal_error(array1, array2, index, out_file, num_fig, plot_label, pos=2):$/;"	f
plot_ecal_flatten_hist	keras/analysis/RootAnalysis.py	/^def plot_ecal_flatten_hist(event1, event2, out_file, energy, labels, ifpdf=True):$/;"	f
plot_ecal_flatten_hist	keras/analysis/utils/RootPlotsGAN.py	/^def plot_ecal_flatten_hist(event1, event2, penergy, out_file, energy, labels, p=[2, 500], ifpdf=True, log=0):$/;"	f
plot_ecal_flatten_hist	keras/archives/RootAnalysis_multi_pions.py	/^def plot_ecal_flatten_hist(event1, event2, out_file, energy):$/;"	f
plot_ecal_flatten_hist	scripts/RootPlotsGAN.py	/^def plot_ecal_flatten_hist(event1, event2, out_file, energy, labels, p=[2, 500], ifpdf=True, log=0, leg=True, grid=True, statbox=True, mono=False, num_events=1000):$/;"	f
plot_ecal_hist	keras/analysis/RootAnalysis.py	/^def plot_ecal_hist(ecal1, ecal2, out_file, energy, labels, ifpdf=True, stest=True):$/;"	f
plot_ecal_hist	keras/analysis/utils/RootPlotsGAN.py	/^def plot_ecal_hist(ecal1, ecal2, out_file, energy, labels, p=[2, 500], ifpdf=True, stest=True):$/;"	f
plot_ecal_hist	keras/archives/RootAnalysis_multi_pions.py	/^def plot_ecal_hist(ecal1, ecal2, out_file, energy):$/;"	f
plot_ecal_hist	scripts/RootPlotsGAN.py	/^def plot_ecal_hist(ecal1, ecal2, out_file, energy, labels, p=[2, 500], ifpdf=True, stest=True, leg=True, grid=True, statbox=True, mono=False):$/;"	f
plot_ecal_hits_hist	keras/analysis/RootAnalysis.py	/^def plot_ecal_hits_hist(event1, event2, out_file, energy, labels, ifpdf=True):$/;"	f
plot_ecal_hits_hist	keras/analysis/utils/RootPlotsGAN.py	/^def plot_ecal_hits_hist(event1, event2, out_file, energy, labels, p=[2, 500], ifpdf=True):$/;"	f
plot_ecal_hits_hist	keras/archives/RootAnalysis_multi_pions.py	/^def plot_ecal_hits_hist(event1, event2, out_file, energy):$/;"	f
plot_ecal_hits_hist	scripts/RootPlotsGAN.py	/^def plot_ecal_hits_hist(event1, event2, out_file, energy, labels, p=[2, 500], ifpdf=True, stest=False, thresh=3e-4, leg=True, grid=True, statbox=True, mono=False):$/;"	f
plot_ecal_normalized	keras/archives/analysis/PythonAnalysis.py	/^def plot_ecal_normalized(array, index, out_file, num_fig, energy, color, bar=0):$/;"	f
plot_ecal_normalized2	keras/archives/analysis/PythonAnalysis.py	/^def plot_ecal_normalized2(array, index, out_file, num_fig,  energy, color, bar=1):$/;"	f
plot_ecal_primary	keras/archives/analysis/PythonAnalysis.py	/^def plot_ecal_primary(array, index, out_file, num_fig, energy, color, bar=0):$/;"	f
plot_ecal_ratio_profile	keras/analysis/RootAnalysis.py	/^def plot_ecal_ratio_profile(ecal1, ecal2, y, labels, out_file, ifpdf=True):$/;"	f
plot_ecal_ratio_profile	keras/analysis/utils/RootPlotsGAN.py	/^def plot_ecal_ratio_profile(ecal1, ecal2, y, labels, out_file, p=[100, 200], ifpdf=True):$/;"	f
plot_ecal_ratio_profile	keras/archives/RootAnalysis_multi_pions.py	/^def plot_ecal_ratio_profile(ecal1, ecal2, y, out_file):$/;"	f
plot_ecal_ratio_profile	scripts/RootPlotsGAN.py	/^def plot_ecal_ratio_profile(ecal1, ecal2, y, labels, out_file, p=[2, 500], ifpdf=True, stest=False, leg=True, grid=True, statbox=True, mono=False):$/;"	f
plot_ecal_relative_profile	keras/analysis/utils/RootPlotsGAN.py	/^def plot_ecal_relative_profile(ecal1, ecal2, y, labels, out_file, p=[2, 500], ifpdf=True):$/;"	f
plot_ecal_relative_profile	keras/archives/RootAnalysis_multi_pions.py	/^def plot_ecal_relative_profile(ecal1, ecal2, y, out_file):$/;"	f
plot_ecal_relative_profile	scripts/RootPlotsGAN.py	/^def plot_ecal_relative_profile(ecal1, ecal2, y, labels, out_file, p=[2, 500], ifpdf=True, leg=True, grid=True, statbox=True, mono=False):$/;"	f
plot_energy	keras/archives/analysis/PythonAnalysis.py	/^def plot_energy(array, index, out_file, num_fig, plot_label, color='blue', pos=0):$/;"	f
plot_energy	keras/archives/analysis/analysis_fixed_cont.py	/^def plot_energy(array, index, out_file, num_fig, plot_label, color='blue', style='-', pos=0):$/;"	f
plot_energy	keras/archives/analysis/detailed_analysis_flex.py	/^def plot_energy(array, index, out_file, num_fig, plot_label, color='blue', style='-', pos=0):$/;"	f
plot_energy	keras/archives/analysis/fixed_analysis_flex.py	/^def plot_energy(array, index, out_file, num_fig, plot_label, color='blue', style='-', pos=0):$/;"	f
plot_energy	keras/misc/data_info.py	/^def plot_energy(array, out_file, num_fig, energy):$/;"	f
plot_energy	scripts/data_info.py	/^def plot_energy(array, out_file, num_fig, energy):$/;"	f
plot_energy_axis	keras/archives/analysis/PythonAnalysis.py	/^def plot_energy_axis(arrayx, arrayy, arrayz, index, out_file, num_fig, plot_label, pos=0):$/;"	f
plot_energy_axis	keras/archives/analysis/analysis_fixed_cont.py	/^def plot_energy_axis(array, index, out_file, num_fig, plot_label, pos=0):$/;"	f
plot_energy_axis	keras/archives/analysis/detailed_analysis_flex.py	/^def plot_energy_axis(array, index, out_file, num_fig, plot_label, pos=0):$/;"	f
plot_energy_axis	keras/archives/analysis/fixed_analysis_flex.py	/^def plot_energy_axis(array, index, out_file, num_fig, plot_label, pos=0):$/;"	f
plot_energy_axis_log	keras/archives/analysis/PythonAnalysis.py	/^def plot_energy_axis_log(arrayx, arrayy, arrayz, index, out_file, num_fig, plot_label, pos=0):$/;"	f
plot_energy_hist	keras/misc/data_info.py	/^def plot_energy_hist(array, index, out_file, num_fig, energy):$/;"	f
plot_energy_hist	scripts/data_info.py	/^def plot_energy_hist(array, index, out_file, num_fig, energy):$/;"	f
plot_energy_hist_root	keras/analysis/RootAnalysis.py	/^def plot_energy_hist_root(array1x, array1y, array1z, array2x, array2y, array2z, x, y, z, out_file1, out_file2, out_file3, energy, labels, log=0, ifpdf=True, stest=True):$/;"	f
plot_energy_hist_root	keras/analysis/utils/RootPlotsGAN.py	/^def plot_energy_hist_root(array1x, array1y, array1z, array2x, array2y, array2z, x, y, z, out_file1, out_file2, out_file3, energy, labels, log=0, p=[2, 500], ifpdf=True, stest=True):$/;"	f
plot_energy_hist_root	keras/archives/RootAnalysis_multi_pions.py	/^def plot_energy_hist_root(array1x, array1y, array1z, array2x, array2y, array2z, out_file1, out_file2, out_file3, histfile, i,energy, log=0):$/;"	f
plot_energy_hist_root	scripts/RootPlotsGAN.py	/^def plot_energy_hist_root(array1x, array1y, array1z, array2x, array2y, array2z, x, y, z, out_file1, out_file2, out_file3, energy, labels,$/;"	f
plot_energy_hist_root2	keras/archives/RootAnalysis_multi_pions.py	/^def plot_energy_hist_root2(array1x, array1y, array1z, array2x, array2y, array2z, out_file1, out_file2, out_file3, energy, log=0):$/;"	f
plot_energy_hist_root_all	keras/archives/RootAnalysis_multi_pions.py	/^def plot_energy_hist_root_all(array1z, array2z, array3z, array4z, arrayg1z, arrayg2z, arrayg3z, arrayg4z,  energy1, energy2, energy3, energy4, out_file, log=0):$/;"	f
plot_energy_mean	keras/archives/analysis/PythonAnalysis.py	/^def plot_energy_mean(arrayx, arrayy, arrayz, index, out_file, num_fig, plot_label):$/;"	f
plot_energy_mean	keras/archives/analysis/analysis_fixed_cont.py	/^def plot_energy_mean(array, index, out_file, num_fig, plot_label):$/;"	f
plot_energy_mean	keras/archives/analysis/detailed_analysis_flex.py	/^def plot_energy_mean(array, index, out_file, num_fig, plot_label):$/;"	f
plot_energy_mean	keras/archives/analysis/fixed_analysis_flex.py	/^def plot_energy_mean(array, index, out_file, num_fig, plot_label):$/;"	f
plot_energy_mean	keras/misc/data_info.py	/^def plot_energy_mean(array, index, out_file, num_fig, energy):$/;"	f
plot_energy_mean	scripts/data_info.py	/^def plot_energy_mean(array, index, out_file, num_fig, energy):$/;"	f
plot_energy_wt_hist	keras/archives/analysis/PythonAnalysis.py	/^def plot_energy_wt_hist(arrayx, arrayy, arrayz, index, out_file, num_fig, plot_label, pos=0):$/;"	f
plot_error	keras/archives/analysis/PythonAnalysis.py	/^def plot_error(array1, array2, index, out_file, num_fig, plot_label, pos=2):$/;"	f
plot_error	keras/archives/analysis/analysis_fixed_cont.py	/^def plot_error(array1, array2, index, out_file, num_fig, plot_label, pos=2):$/;"	f
plot_error	keras/archives/analysis/detailed_analysis_flex.py	/^def plot_error(array1, array2, index, out_file, num_fig, plot_label, pos=2):$/;"	f
plot_error	keras/archives/analysis/fixed_analysis_flex.py	/^def plot_error(energy, array2, index, out_file, num_fig, plot_label, pos=2):$/;"	f
plot_flat_energy	keras/archives/analysis/PythonAnalysis.py	/^def plot_flat_energy(arrayx, arrayy, arrayz, index, out_file, num_fig, plot_label):$/;"	f
plot_flat_energy	keras/archives/analysis/analysis_fixed_cont.py	/^def plot_flat_energy(array, index, out_file, num_fig, plot_label):$/;"	f
plot_flat_energy	keras/archives/analysis/detailed_analysis_flex.py	/^def plot_flat_energy(array, index, out_file, num_fig, plot_label):$/;"	f
plot_flat_energy	keras/archives/analysis/fixed_analysis_flex.py	/^def plot_flat_energy(array, index, out_file, num_fig, plot_label):$/;"	f
plot_hits	keras/archives/analysis/PythonAnalysis.py	/^def plot_hits(array, index, out_file, num_fig, plot_label):$/;"	f
plot_loss	keras/analysis/LossPlots.py	/^def plot_loss(lossfile, weights, ymax, lossdir, fig=1):$/;"	f
plot_loss	keras/analysis/ObjectivePlots.py	/^def plot_loss(infile, fig=1):$/;"	f
plot_loss	keras/misc/LossvsOptftn.py	/^def plot_loss(lossfile, resultfile, outdir, fig=1):$/;"	f
plot_max	keras/analysis/RootAnalysis.py	/^def plot_max(array1, array2, x, y, z, out_file1, out_file2, out_file3, energy, labels, log=0, ifpdf=True, stest=True):$/;"	f
plot_max	keras/analysis/utils/RootPlotsGAN.py	/^def plot_max(array1, array2, x, y, z, out_file1, out_file2, out_file3, energy, labels, log=0, p=[2, 500], ifpdf=True, stest=True):$/;"	f
plot_max	keras/archives/RootAnalysis_multi_pions.py	/^def plot_max(array1, array2, out_file1, out_file2, out_file3, energy, log=0):$/;"	f
plot_max	keras/archives/analysis/PythonAnalysis.py	/^def plot_max(array, index, out_file, num_fig, plot_label, pos=0):$/;"	f
plot_max	keras/archives/analysis/analysis_fixed_cont.py	/^def plot_max(array, index, out_file, num_fig, plot_label, pos=0):$/;"	f
plot_max	keras/archives/analysis/detailed_analysis_flex.py	/^def plot_max(array, index, out_file, num_fig, plot_label, pos=0):$/;"	f
plot_max	keras/archives/analysis/fixed_analysis_flex.py	/^def plot_max(array, index, out_file, num_fig, plot_label, pos=0):$/;"	f
plot_max	keras/misc/data_info.py	/^def plot_max(array, index, out_file, num_fig, energy):$/;"	f
plot_max	scripts/RootPlotsGAN.py	/^def plot_max(array1, array2, x, y, z, out_file1, out_file2, out_file3, energy, labels, log=0, p=[2, 500], ifpdf=True, stest=True, leg=True, grid=True, statbox=True, mono=False):$/;"	f
plot_max	scripts/data_info.py	/^def plot_max(array, index, out_file, num_fig, energy):$/;"	f
plot_model	keras/archives/architectures_tested/archlayer6.py	/^from keras.utils import plot_model$/;"	i
plot_moment	keras/analysis/RootAnalysis.py	/^def plot_moment(array1, array2, out_file, dim, energy, m, labels, ifpdf=True):$/;"	f
plot_moment	keras/analysis/utils/RootPlotsGAN.py	/^def plot_moment(array1, array2, out_file, dim, energy, m, labels, p =[2, 500], ifpdf=True):$/;"	f
plot_moment	keras/archives/RootAnalysis_multi_pions.py	/^def plot_moment(array1, array2, out_file, dim, energy, moment):$/;"	f
plot_moment	keras/archives/analysis/PythonAnalysis.py	/^def plot_moment(array, index, out_file, num_fig, plot_label, moment):$/;"	f
plot_moment	scripts/RootPlotsGAN.py	/^def plot_moment(array1, array2, out_file, dim, energy, m, labels, p =[2, 500], stest=False, ifpdf=True, grid=True, leg=True, statbox=True, mono=False, ang=1):$/;"	f
plot_primary_error_hist	keras/analysis/RootAnalysis.py	/^def plot_primary_error_hist(aux1, aux2, y, out_file, energy, labels, ifpdf=True):$/;"	f
plot_primary_error_hist	keras/analysis/utils/RootPlotsGAN.py	/^def plot_primary_error_hist(aux1, aux2, y, out_file, energy, labels, p=[2, 500], ifpdf=True):$/;"	f
plot_primary_error_hist	keras/archives/RootAnalysis_multi_pions.py	/^def plot_primary_error_hist(aux1, aux2, y, out_file, energy):$/;"	f
plot_primary_error_hist	scripts/RootPlotsGAN.py	/^def plot_primary_error_hist(aux1, aux2, y, out_file, energy, labels, p=[2, 500], ifpdf=True, leg=True, grid=True, stest= False, statbox=True, mono=False):$/;"	f
plot_primary_hist	keras/archives/RootAnalysis_multi_pions.py	/^def plot_primary_hist(aux1, aux2, out_file, energy):$/;"	f
plot_real	keras/archives/analysis/PythonAnalysis.py	/^def plot_real(array, index, out_file, num_fig, plot_label):$/;"	f
plot_real	keras/archives/analysis/analysis_fixed_cont.py	/^def plot_real(array, index, out_file, num_fig, plot_label):$/;"	f
plot_real	keras/archives/analysis/detailed_analysis_flex.py	/^def plot_real(array, index, out_file, num_fig, plot_label):$/;"	f
plot_real	keras/archives/analysis/fixed_analysis_flex.py	/^def plot_real(array, index, out_file, num_fig, plot_label):$/;"	f
plot_realfake_hist	keras/analysis/RootAnalysis.py	/^def plot_realfake_hist(array1, array2, out_file, energy, labels, ifpdf=True):$/;"	f
plot_realfake_hist	keras/analysis/utils/RootPlotsGAN.py	/^def plot_realfake_hist(array1, array2, out_file, energy, labels, p=[2, 500], ifpdf=True):$/;"	f
plot_realfake_hist	keras/archives/RootAnalysis_multi_pions.py	/^def plot_realfake_hist(array1, array2, out_file, energy):$/;"	f
plot_realfake_hist	scripts/RootPlotsGAN.py	/^def plot_realfake_hist(array1, array2, out_file, energy, labels, p=[2, 500], ifpdf=True, leg=True, grid=True, stest= False, statbox=True, mono=False):$/;"	f
plot_root_vec	analysis/plot_root_vec.C	/^void plot_root_vec()$/;"	f
plot_sparsity	scripts/RootPlotsGAN.py	/^def plot_sparsity(events1, events2, out_file, energy, labels, threshmin=-13, threshmax=1, logy=0, min_max=0, ifpdf=True, mono=False, leg=True, grid=True, statbox=True, ang=1):$/;"	f
plot_sparsity2	scripts/RootPlotsGAN.py	/^def plot_sparsity2(events1, events2, out_file, energy, labels, threshmin=-13, threshmax=1, logy=0, min_max=0, ifpdf=True, mono=False, leg=True, grid=True, statbox=True):$/;"	f
plots_dir	keras/archives/analysis/PythonAnalysis.py	/^plots_dir = "my_plots\/"$/;"	v
plots_dir	keras/archives/analysis/analysis_fixed_cont.py	/^plots_dir = 'cont_fixed_plots\/'$/;"	v
plots_dir	keras/archives/analysis/detailed_analysis_flex.py	/^plots_dir = 'continous_plots\/'$/;"	v
plots_dir	keras/archives/analysis/fixed_analysis_flex.py	/^plots_dir = 'fixed_plots\/'$/;"	v
plotshapes	plot.py	/^def plotshapes(X, generated_images, x, y, z, energy, out_file, labels, log=0, p=[2, 500], norm=0, ifC=0, stest=0, error=0, grid=0, leg=1):$/;"	f
plt	keras/analysis/LossPlots.py	/^import matplotlib.pyplot as plt$/;"	i
plt	keras/analysis/ObjectivePlots.py	/^import matplotlib.pyplot as plt$/;"	i
plt	keras/analysis/RootAnalysis.py	/^import matplotlib.pyplot as plt$/;"	i
plt	keras/analysis/utils/RootPlotsGAN.py	/^import matplotlib.pyplot as plt$/;"	i
plt	keras/archives/analysis/PythonAnalysis.py	/^import matplotlib.pyplot as plt$/;"	i
plt	keras/archives/analysis/analysis_fixed_cont.py	/^import matplotlib.pyplot as plt$/;"	i
plt	keras/archives/analysis/detailed_analysis_flex.py	/^import matplotlib.pyplot as plt$/;"	i
plt	keras/archives/analysis/fixed_analysis_flex.py	/^import matplotlib.pyplot as plt$/;"	i
plt	keras/generate_pred.py	/^import matplotlib.pyplot as plt$/;"	i
plt	keras/misc/Gen_ecalRatio_multi.py	/^import matplotlib.pyplot as plt$/;"	i
plt	keras/misc/Gen_ecalRatio_stat.py	/^import matplotlib.pyplot as plt$/;"	i
plt	keras/misc/Gen_ecalfit2.py	/^import matplotlib.pyplot as plt$/;"	i
plt	keras/misc/LossvsOptftn.py	/^import matplotlib.pyplot as plt$/;"	i
plt	keras/misc/data_info.py	/^import matplotlib.pyplot as plt$/;"	i
plt	keras/misc/ecal_flat_python.py	/^import matplotlib.pyplot as plt$/;"	i
plt	keras/misc/ecal_flat_root.py	/^import matplotlib.pyplot as plt$/;"	i
plt	keras/misc/ecal_primary.py	/^import matplotlib.pyplot as plt$/;"	i
plt	keras/misc/ecal_sum_python.py	/^import matplotlib.pyplot as plt$/;"	i
plt	keras/misc/result_fit.py	/^import matplotlib.pyplot as plt$/;"	i
plt	keras/misc/root_fit.py	/^import matplotlib.pyplot as plt$/;"	i
plt	keras/paramScan/HyperParameterScan.py	/^import matplotlib.pyplot as plt$/;"	i
plt	keras/paramScan/HyperParameterScan_multi.py	/^import matplotlib.pyplot as plt$/;"	i
plt	keras/paramScan/HyperParameterScan_small.py	/^import matplotlib.pyplot as plt$/;"	i
plt	keras/paramScan/TestingObjective.py	/^import matplotlib.pyplot as plt$/;"	i
plt	keras/validation_analysis.py	/^import matplotlib.pyplot as plt$/;"	i
plt	scripts/RootPlotsGAN.py	/^import matplotlib.pyplot as plt$/;"	i
plt	scripts/data_info.py	/^import matplotlib.pyplot as plt$/;"	i
plt	scripts/gaussian.py	/^import matplotlib.pyplot as plt$/;"	i
poly	keras/archives/normInit/normalInitTrain.py	/^    poly = [-0.03140347, 1.952197, 0.0827042 ]$/;"	v
position	keras/misc/result_fit.py	/^position = np.zeros((num_weights))$/;"	v
postproc	keras/analysis/utils/GANutils.py	/^def postproc(n, xscale=1):$/;"	f
postproc	scripts/GANutils.py	/^def postproc(n, xscale=1):$/;"	f
prep_image	networks/pgan/loss_utils.py	/^def prep_image(images, power=1.0):$/;"	f
preproc	keras/analysis/utils/GANutils.py	/^def preproc(n, xscale=1):$/;"	f
preproc	scripts/GANutils.py	/^def preproc(n, xscale=1):$/;"	f
print_function	keras/AngleTrain3dGAN_hvd.py	/^from __future__ import print_function$/;"	i
print_function	keras/AngleTrain3dGAN_hvd_tf2.py	/^from __future__ import print_function$/;"	i
print_function	keras/EcalEnergyTrain_hvd.py	/^from __future__ import print_function$/;"	i
print_function	keras/archives/Data_Generators/AllEnergyTrain.py	/^from __future__ import print_function$/;"	i
print_function	keras/archives/Data_Generators/GenEnergyTrain.py	/^from __future__ import print_function$/;"	i
print_function	keras/archives/log/TrainPionslog.py	/^from __future__ import print_function$/;"	i
print_function	keras/archives/log/TrainPionslog_dual.py	/^from __future__ import print_function$/;"	i
print_function	keras/archives/normInit/normalInitTrain.py	/^from __future__ import print_function$/;"	i
print_function	keras/archives/train/TrainChPions.py	/^from __future__ import print_function$/;"	i
print_function	keras/archives/train/Train_rootfit_scaled_2D.py	/^from __future__ import print_function$/;"	i
print_function	keras/archives/train/Train_single_pass.py	/^from __future__ import print_function$/;"	i
print_function	keras/archives/train/particle3Dtrain.py	/^from __future__ import print_function$/;"	i
print_function	keras/paramScan/HyperParameterScan.py	/^from __future__ import print_function$/;"	i
print_function	keras/paramScan/HyperParameterScan_multi.py	/^from __future__ import print_function$/;"	i
print_function	keras/paramScan/HyperParameterScan_small.py	/^from __future__ import print_function$/;"	i
print_function	keras/paramScan/TestingObjective.py	/^from __future__ import print_function$/;"	i
print_function	keras/test.py	/^from __future__ import print_function$/;"	i
print_function	metrics/fid_new.py	/^from __future__ import absolute_import, division, print_function$/;"	i
progress_bar	keras/archives/Data_Generators/AllEnergyTrain.py	/^            progress_bar = Progbar(target=nb_batches)$/;"	v
progress_bar	keras/archives/Data_Generators/GenEnergyTrain.py	/^            progress_bar = Progbar(target=nb_batches)$/;"	v
progress_bar	keras/archives/normInit/normalInitTrain.py	/^            progress_bar = Progbar(target=nb_batches)$/;"	v
progress_bar	keras/archives/train/particle3Dtrain.py	/^            progress_bar = Progbar(target=nb_batches)$/;"	v
psutil	dataset.py	/^import psutil$/;"	i
psutil	keras/EcalEnergyTrain_hvd.py	/^import psutil$/;"	i
psutil	keras/test.py	/^import psutil$/;"	i
psutil	main.py	/^import psutil$/;"	i
psutil	networks/test_network.py	/^import psutil$/;"	i
psutil	scripts/sara_main.py	/^import psutil$/;"	i
py	keras/analysis/RootAnalysis.py	/^from utils.GANutils import perform_calculations_multi, safe_mkdir #Common functions from GANutils.py$/;"	i
py	networks/test_network.py	/^                 py = psutil.Process(pid)$/;"	v
py_func	keras/AngleArch3dGAN.py	/^from tensorflow import py_func, float32, Tensor$/;"	i
py_func	networks/AngleGAN/discriminator.py	/^from tensorflow import py_func, float32, Tensor$/;"	i
py_func	networks/AngleGAN/generator.py	/^from tensorflow import py_func, float32, Tensor$/;"	i
py_function	keras/AngleArch3dGAN_tf2.py	/^from tensorflow import py_function, float32, Tensor$/;"	i
pyr_down	metrics/swd.py	/^def pyr_down(minibatch):  # matches cv2.pyrDown()$/;"	f
pyr_up	metrics/swd.py	/^def pyr_up(minibatch):  # matches cv2.pyrUp()$/;"	f
rand_batch1	metrics/swd.py	/^    rand_batch1 = (np.clip(np.random.rand(*shape), -1, 2) * 1024).astype(np.int16)$/;"	v
rand_batch2	metrics/swd.py	/^    rand_batch2 = (np.clip(np.random.rand(*shape), -1, 2) * 1024).astype(np.int16)$/;"	v
random	generate.py	/^import random$/;"	i
random	keras/EcalEnergyTrain_hvd.py	/^import random$/;"	i
random	keras/test.py	/^import random$/;"	i
random	main.py	/^import random$/;"	i
random	scripts/main.py	/^import random$/;"	i
random	scripts/sara_main.py	/^import random$/;"	i
randomize	keras/AngleTrain3dGAN_hvd.py	/^def randomize(a, b, c, d):$/;"	f
randomize	keras/AngleTrain3dGAN_hvd_tf2.py	/^def randomize(a, b, c, d):$/;"	f
randomize	keras/EcalEnergyTrain_hvd.py	/^def randomize(a, b, c):$/;"	f
randomize	keras/analysis/utils/GANutils.py	/^def randomize(a, b, c, d):$/;"	f
randomize	keras/test.py	/^def randomize(a, b, c):$/;"	f
randomize	scripts/main.py	/^from GANutils import hist_count, randomize, genbatches$/;"	i
range	keras/AngleTrain3dGAN_hvd.py	/^from six.moves import range$/;"	i
range	keras/AngleTrain3dGAN_hvd_tf2.py	/^from six.moves import range$/;"	i
range	keras/EcalEnergyTrain_hvd.py	/^from six.moves import range$/;"	i
range	keras/archives/Data_Generators/AllEnergyTrain.py	/^from six.moves import range$/;"	i
range	keras/archives/Data_Generators/GenEnergyTrain.py	/^from six.moves import range$/;"	i
range	keras/archives/log/TrainPionslog.py	/^from six.moves import range$/;"	i
range	keras/archives/log/TrainPionslog_dual.py	/^from six.moves import range$/;"	i
range	keras/archives/normInit/normalInitTrain.py	/^from six.moves import range$/;"	i
range	keras/archives/train/TrainChPions.py	/^from six.moves import range$/;"	i
range	keras/archives/train/Train_rootfit_scaled_2D.py	/^from six.moves import range$/;"	i
range	keras/archives/train/Train_single_pass.py	/^from six.moves import range$/;"	i
range	keras/archives/train/particle3Dtrain.py	/^from six.moves import range$/;"	i
range	keras/test.py	/^from six.moves import range$/;"	i
range	scripts/main.py	/^from six.moves import range$/;"	i
ratio12file	keras/archives/analysis/PythonAnalysis.py	/^   ratio12file= "RatioL1to2_" + str(energy)+ ".pdf"$/;"	v
ratio1_total	keras/analysis/utils/ROOTutils.py	/^def ratio1_total(events):$/;"	f
ratio1_total	scripts/ROOTutils.py	/^def ratio1_total(events):$/;"	f
ratio1allfile	keras/archives/analysis/PythonAnalysis.py	/^   ratio1allfile= "RatioL1tototal_" + str(energy)+ ".pdf"$/;"	v
ratio2_total	scripts/ROOTutils.py	/^def ratio2_total(events):$/;"	f
ratio3_total	scripts/ROOTutils.py	/^def ratio3_total(events):$/;"	f
read_data	keras/archives/analysis/PythonAnalysis.py	/^read_data = True$/;"	v
read_disc	keras/archives/analysis/PythonAnalysis.py	/^read_disc = True$/;"	v
read_gen	keras/archives/analysis/PythonAnalysis.py	/^read_gen = True$/;"	v
real	keras/validation_analysis.py	/^    real = data[i]$/;"	v
real_batch_loss	keras/archives/Data_Generators/AllEnergyTrain.py	/^            real_batch_loss = discriminator.train_on_batch(image_batch, [bit_flip(np.ones(batch_size)), energy_batch, ecal_batch])$/;"	v
real_batch_loss	keras/archives/Data_Generators/GenEnergyTrain.py	/^            real_batch_loss = discriminator.train_on_batch(image_batch, [bit_flip(np.ones(batch_size)), energy_batch, ecal_batch])$/;"	v
real_batch_loss	keras/archives/normInit/normalInitTrain.py	/^            real_batch_loss = discriminator.train_on_batch(image_batch, [bit_flip(np.ones(batch_size)), energy_batch, ecal_batch])$/;"	v
real_batch_loss	keras/archives/train/particle3Dtrain.py	/^            real_batch_loss = discriminator.train_on_batch($/;"	v
real_image_input	networks/test_network.py	/^        real_image_input = tf.random.normal(shape=shape)$/;"	v
real_mean_vec	keras/validation_analysis.py	/^real_mean_vec = []$/;"	v
real_std_vec	keras/validation_analysis.py	/^real_std_vec = []$/;"	v
realfile	keras/archives/analysis/PythonAnalysis.py	/^   realfile = "realfake_" + str(energy) + ".pdf"$/;"	v
realfile	keras/archives/analysis/analysis_fixed_cont.py	/^   realfile = "realfake_" + str(energy) + ".pdf"$/;"	v
realfile	keras/archives/analysis/detailed_analysis_flex.py	/^   realfile = "realfake_" + str(energy) + ".pdf"$/;"	v
realfile	keras/archives/analysis/fixed_analysis_flex.py	/^      realfile = "real_" + str(energy) + ".pdf"$/;"	v
realfile	keras/archives/analysis/fixed_analysis_flex.py	/^      realfile = "real_act" + str(energy) + ".pdf"$/;"	v
realfile	keras/archives/analysis/fixed_analysis_flex.py	/^   realfile = "real_gan" + str(energy) + ".pdf"$/;"	v
reconstruct_laplacian_pyramid	metrics/swd.py	/^def reconstruct_laplacian_pyramid(pyramid):$/;"	f
relu	neon/gan3D.py	/^relu = Rectlin(slope=0)  # relu for generator$/;"	v
relu	neon/potential_gan.py	/^relu = Rectlin(slope=0)  # relu for generator$/;"	v
request	metrics/fid_new.py	/^        from urllib import request$/;"	i
resize	metrics/fid_new.py	/^from skimage.transform import resize$/;"	i
resize	plot.py	/^from scripts.hdf_to_numpy import resize, restore_pic$/;"	i
resize	scripts/hdf_to_numpy.py	/^def resize(imgs3d, size, mode='rectangle'):$/;"	f
restore_pic	plot.py	/^from scripts.hdf_to_numpy import resize, restore_pic$/;"	i
restore_pic	scripts/hdf_to_numpy.py	/^def restore_pic(numpy_image, size, channel_included=True, format_zxy=True, channels_first=True):$/;"	f
result	keras/test.py	/^       result = gan.OptAnalysisShort(var, generated_images, energies, ang=0)$/;"	v
resultfile	keras/EcalEnergyTrain_hvd.py	/^    resultfile = '3dgan_analysis.pkl' # analysis result$/;"	v
resultfile	keras/paramScan/HyperParameterScan.py	/^    resultfile = 'result_train.pdf'          $/;"	v
resultfile	keras/test.py	/^    resultfile = '3dgan_analysis.pkl' # analysis result$/;"	v
results	analysis/analysis3D.py	/^results = parser.parse_args()$/;"	v
rewriter_config_pb2	plot.py	/^from tensorflow.core.protobuf import rewriter_config_pb2$/;"	i
root	keras/analysis/utils/RootPlotsGAN.py	/^import ROOTutils as my # common utility functions for root$/;"	i
root	scripts/RootPlotsGAN.py	/^import ROOTutils as my # common utility functions for root$/;"	i
root	scripts/hdf_to_numpy.py	/^root='\/home\/achaibi\/scratch\/CERN_anglegan\/dataset'$/;"	v
run	scripts/main.py	/^def run(config):$/;"	f
run_image_classifier	metrics/fid.py	/^def run_image_classifier(tensor,$/;"	f
run_inception	metrics/fid.py	/^def run_inception(images,$/;"	f
run_metadata	keras/EcalEnergyTrain_hvd.py	/^    run_metadata = tf.RunMetadata()$/;"	v
run_options	keras/EcalEnergyTrain_hvd.py	/^    run_options = tf.RunOptions(trace_level=tf.RunOptions.FULL_TRACE)$/;"	v
safe_mkdir	analysis/analysis3D.py	/^def safe_mkdir(path):$/;"	f
safe_mkdir	keras/EcalEnergyTrain_hvd.py	/^def safe_mkdir(path):$/;"	f
safe_mkdir	keras/analysis/LossPlots.py	/^from utils.GANutils import safe_mkdir$/;"	i
safe_mkdir	keras/analysis/ObjectivePlots.py	/^from utils.GANutils import safe_mkdir$/;"	i
safe_mkdir	keras/analysis/RootAnalysis.py	/^from utils.GANutils import perform_calculations_multi, safe_mkdir #Common functions from GANutils.py$/;"	i
safe_mkdir	keras/analysis/utils/GANutils.py	/^def safe_mkdir(path):$/;"	f
safe_mkdir	keras/analysis/utils/RootPlotsGAN.py	/^from GANutils import safe_mkdir, get_sums$/;"	i
safe_mkdir	keras/archives/RootAnalysis_multi_pions.py	/^def safe_mkdir(path):$/;"	f
safe_mkdir	keras/archives/analysis/PythonAnalysis.py	/^def safe_mkdir(path):$/;"	f
safe_mkdir	keras/archives/analysis/analysis_fixed_cont.py	/^def safe_mkdir(path):$/;"	f
safe_mkdir	keras/archives/analysis/detailed_analysis_flex.py	/^def safe_mkdir(path):$/;"	f
safe_mkdir	keras/archives/analysis/fixed_analysis_flex.py	/^def safe_mkdir(path):$/;"	f
safe_mkdir	keras/misc/LossvsOptftn.py	/^from LCDutils import safe_mkdir$/;"	i
safe_mkdir	keras/misc/data_info.py	/^def safe_mkdir(path):$/;"	f
safe_mkdir	keras/test.py	/^def safe_mkdir(path):$/;"	f
safe_mkdir	plot.py	/^from scripts.GANutils import GetData, GetAngleData, GetDataFiles, generate, generate2,  safe_mkdir$/;"	i
safe_mkdir	scripts/GANutils.py	/^def safe_mkdir(path):$/;"	f
safe_mkdir	scripts/RootPlotsGAN.py	/^from GANutils import safe_mkdir, get_sums$/;"	i
safe_mkdir	scripts/data_info.py	/^def safe_mkdir(path):$/;"	f
sampled_energies	keras/archives/Data_Generators/AllEnergyTrain.py	/^                sampled_energies = np.random.uniform(0, 5, ( batch_size,1 ))$/;"	v
sampled_energies	keras/archives/Data_Generators/AllEnergyTrain.py	/^            sampled_energies = np.random.uniform(0, 5, (2 * batch_size, 1))$/;"	v
sampled_energies	keras/archives/Data_Generators/AllEnergyTrain.py	/^            sampled_energies = np.random.uniform(0, 5, (batch_size, 1))$/;"	v
sampled_energies	keras/archives/Data_Generators/AllEnergyTrain.py	/^            sampled_energies = np.random.uniform(0, 5,( batch_size,1 ))$/;"	v
sampled_energies	keras/archives/Data_Generators/AllEnergyTrain.py	/^            sampled_energies = np.squeeze(sampled_energies, axis=(1,))$/;"	v
sampled_energies	keras/archives/Data_Generators/GenEnergyTrain.py	/^                sampled_energies = np.random.uniform(0, 5, ( batch_size,1 ))$/;"	v
sampled_energies	keras/archives/Data_Generators/GenEnergyTrain.py	/^            sampled_energies = np.random.uniform(0, 5, (2 * batch_size, 1))$/;"	v
sampled_energies	keras/archives/Data_Generators/GenEnergyTrain.py	/^            sampled_energies = np.random.uniform(0, 5, (batch_size, 1))$/;"	v
sampled_energies	keras/archives/Data_Generators/GenEnergyTrain.py	/^            sampled_energies = np.random.uniform(0, 5,( batch_size,1 ))$/;"	v
sampled_energies	keras/archives/Data_Generators/GenEnergyTrain.py	/^            sampled_energies = np.squeeze(sampled_energies, axis=(1,))$/;"	v
sampled_energies	keras/archives/normInit/normalInitTrain.py	/^                sampled_energies = np.random.uniform(0.1, 5, ( batch_size,1 ))$/;"	v
sampled_energies	keras/archives/normInit/normalInitTrain.py	/^            sampled_energies = np.random.uniform(0.1, 5,( batch_size,1 ))$/;"	v
sampled_energies	keras/archives/normInit/normalInitTrain.py	/^        sampled_energies = np.random.uniform(0.1, 5, (2 * nb_test, 1))$/;"	v
sampled_energies	keras/archives/normInit/normalInitTrain.py	/^        sampled_energies = np.random.uniform(0.1, 5, (nb_test, 1))$/;"	v
sampled_energies	keras/archives/normInit/normalInitTrain.py	/^        sampled_energies = np.squeeze(sampled_energies, axis=(1,))$/;"	v
sampled_energy	keras/archives/analysis/fixed_analysis_flex.py	/^   sampled_energy = energy\/100$/;"	v
sampled_labels	analysis/analysis3D.py	/^sampled_labels = np.random.randint(0, 2, n_events)$/;"	v
sampled_labels	caffe/caffe_train.py	/^      sampled_labels = np.random.randint(0, num_clas, batch_size)$/;"	v
sampled_labels	caffe/caffe_train.py	/^  sampled_labels = np.random.randint(0, num_clas, batch_size)$/;"	v
sampled_labels	keras/archives/analysis/analysis_fixed_cont.py	/^   sampled_labels = Y\/100  #take sampled labels from actual data                              $/;"	v
sampled_labels	keras/archives/analysis/detailed_analysis_flex.py	/^   sampled_labels = Y\/100  #take sampled labels from actual data                              $/;"	v
sampled_labels	keras/archives/analysis/fixed_analysis_flex.py	/^      sampled_labels = np.multiply(energy, np.ones((num_events_gan, 1)))$/;"	v
sampled_labels	keras/archives/analysis/fixed_analysis_flex.py	/^      sampled_labels = sampled_labels\/100$/;"	v
sampled_labels	keras/archives/train/particle3Dtrain.py	/^                sampled_labels = np.random.randint(0, nb_classes, batch_size)$/;"	v
sampled_labels	keras/archives/train/particle3Dtrain.py	/^            sampled_labels = np.random.randint(0, nb_classes, batch_size)$/;"	v
sampled_labels	keras/archives/train/particle3Dtrain.py	/^        sampled_labels = np.random.randint(0, nb_classes, 2 * nb_test)$/;"	v
sampled_labels	keras/archives/train/particle3Dtrain.py	/^        sampled_labels = np.random.randint(0, nb_classes, nb_test)$/;"	v
save	keras/archives/analysis/analysis_fixed_cont.py	/^save=0                #whether save generated output in a file$/;"	v
save	keras/archives/analysis/detailed_analysis_flex.py	/^save=0                #whether save generated output in a file$/;"	v
save	keras/archives/analysis/fixed_analysis_flex.py	/^save = 0$/;"	v
save_data	keras/archives/analysis/PythonAnalysis.py	/^save_data = True$/;"	v
save_disc	keras/archives/analysis/PythonAnalysis.py	/^save_disc = True$/;"	v
save_discriminated	keras/analysis/utils/GANutils.py	/^def save_discriminated(disc, energy, discdir, angloss=1, addloss=0, ang=0):$/;"	f
save_discriminated	keras/archives/RootAnalysis_multi_pions.py	/^def save_discriminated(disc, energies, discdir):$/;"	f
save_discriminated	keras/archives/analysis/PythonAnalysis.py	/^def save_discriminated(disc, energies):$/;"	f
save_discriminated	scripts/GANutils.py	/^def save_discriminated(disc, energy, discdir, angloss=1, addloss=0, ang=0):$/;"	f
save_gen	keras/archives/analysis/PythonAnalysis.py	/^save_gen = True$/;"	v
save_generated	keras/analysis/utils/GANutils.py	/^def save_generated(events, cond, energy, gendir):$/;"	f
save_generated	keras/archives/RootAnalysis_multi_pions.py	/^def save_generated(events, sampled_energies, energy, gendir):$/;"	f
save_generated	keras/archives/analysis/PythonAnalysis.py	/^def save_generated(events, sampled_energies, energy):$/;"	f
save_generated	scripts/GANutils.py	/^def save_generated(events, cond, energy, gendir):$/;"	f
save_sorted	keras/analysis/utils/GANutils.py	/^def save_sorted(srt, energies, srtdir, ang=0):$/;"	f
save_sorted	keras/archives/RootAnalysis_multi_pions.py	/^def save_sorted(srt, energies, srtdir):$/;"	f
save_sorted	keras/archives/analysis/PythonAnalysis.py	/^def save_sorted(srt, energies):$/;"	f
save_sorted	keras/paramScan/HyperParameterScan_multi.py	/^def save_sorted(srt, energies, sorted_file):$/;"	f
save_sorted	keras/paramScan/HyperParameterScan_small.py	/^def save_sorted(srt, energies):$/;"	f
save_sorted	keras/paramScan/TestingObjective.py	/^def save_sorted(srt, energies, sorted_path):$/;"	f
save_sorted	scripts/GANutils.py	/^def save_sorted(srt, energies, srtdir, ang=0):$/;"	f
sb1	keras/misc/Gen_ecalfit2.py	/^sb1=Eprof.GetListOfFunctions().FindObject("stats")$/;"	v
sb2	keras/misc/Gen_ecalfit2.py	/^sb2=Gprof.GetListOfFunctions().FindObject("stats")$/;"	v
scales	keras/eval.py	/^scales = [1]$/;"	v
scales	keras/generate_pred.py	/^scales=[1]$/;"	v
scales	keras/misc/Gen_ecalRatio_multi.py	/^scales = [100, 1, 1, 1, 1]$/;"	v
scales	keras/misc/Gen_ecalRatio_stat.py	/^scales = [100, 1, 1]$/;"	v
scipy	main.py	/^import scipy$/;"	i
scipy	metrics/swd.py	/^import scipy.ndimage$/;"	i
scripts	plot.py	/^import scripts.ROOTutils as my$/;"	i
setGPU	keras/AngleTrain3dGAN_hvd.py	/^    import setGPU #if Caltech$/;"	i
setGPU	keras/AngleTrain3dGAN_hvd_tf2.py	/^    import setGPU #if Caltech$/;"	i
setGPU	keras/archives/RootAnalysis_multi_pions.py	/^import setGPU$/;"	i
setGPU	keras/archives/log/TrainPionslog.py	/^import setGPU #if Caltech$/;"	i
setGPU	keras/archives/log/TrainPionslog_dual.py	/^import setGPU #if Caltech$/;"	i
setGPU	keras/archives/train/TrainChPions.py	/^import setGPU #if Caltech$/;"	i
setGPU	keras/archives/train/Train_single_pass.py	/^import setGPU #if Caltech$/;"	i
setGPU	keras/misc/Gen_ecalRatio_stat.py	/^import setGPU$/;"	i
setGPU	keras/misc/ecal_sum_python.py	/^import setGPU$/;"	i
setGPU	keras/paramScan/HyperParameterScan_multi.py	/^import setGPU$/;"	i
setGPU	keras/paramScan/TestingObjective.py	/^import setGPU$/;"	i
setGPU	plot.py	/^    import setGPU #if Caltech$/;"	i
setup_horovod	scripts/main.py	/^def setup_horovod():$/;"	f
shape	metrics/swd.py	/^    shape = (128, 1, 32, 128, 128)$/;"	v
shape	networks/pgan/discriminator.py	/^        shape = [1, 1] + list(np.array(base_shape)[1:] * 2 ** (phase - 1))$/;"	v
shape	networks/pgan/generator.py	/^        shape = [1, latent_dim]$/;"	v
shape	networks/test_network.py	/^        shape = [1, 1] + list(np.array(base_shape)[1:] * 2 ** (phase - 1))$/;"	v
should	networks/loss.py	/^from networks.pgan.loss_utils import ecal_sum, ecal_angle # physics functions used for training the discriminator (should be in conditional lambda layer)$/;"	i
shutil	dataset.py	/^import shutil$/;"	i
sigma1	scripts/gaussian.py	/^sigma1 = 2$/;"	v
sigma2	scripts/gaussian.py	/^sigma2 = 4$/;"	v
size_data	keras/archives/analysis/analysis_fixed_cont.py	/^size_data = int(X.shape[0])$/;"	v
size_data	keras/archives/analysis/detailed_analysis_flex.py	/^size_data = int(X.shape[0])$/;"	v
size_data	keras/misc/data_info.py	/^size_data = int(X.shape[0])$/;"	v
size_data	scripts/data_info.py	/^size_data = int(X.shape[0])$/;"	v
sliced_wasserstein	metrics/swd.py	/^def sliced_wasserstein(a, b, dir_repeats, dirs_per_repeat):$/;"	f
snapshot_at_iter	caffe/caffe_train.py	/^        snapshot_at_iter = int(myfile.read())$/;"	v
snapshot_at_iter	caffe/caffe_train.py	/^snapshot_at_iter = -1$/;"	v
snapshot_at_iter_file	caffe/caffe_train.py	/^snapshot_at_iter_file = 'snapshot_at_iter.txt'$/;"	v
snapshot_every	caffe/caffe_train.py	/^snapshot_every = 10000 # snapshot every so many iterations$/;"	v
snapshot_folder	caffe/caffe_train.py	/^snapshot_folder = 'snapshots_test' # where to save the snapshots (and load from)$/;"	v
socket	keras/EcalEnergyTrain_hvd.py	/^import socket$/;"	i
socket	keras/test.py	/^import socket$/;"	i
solver_template	caffe/creating_proto.py	/^  solver_template=myfile.read()$/;"	v	class:dependant
some	keras/EcalEnergyTrain_hvd.py	/^import analysis.utils.GANutils as gan # some common functions for gan$/;"	i
some	keras/test.py	/^import analysis.utils.GANutils as gan # some common functions for gan$/;"	i
sort	keras/analysis/utils/GANutils.py	/^def sort(data, bins, flag=False, num_events=1000, tolerance=5):$/;"	f
sort	keras/archives/RootAnalysis_multi_pions.py	/^def sort(data, energies, flag=False, num_events=2000):$/;"	f
sort	keras/archives/analysis/PythonAnalysis.py	/^def sort(data, energies):$/;"	f
sort	keras/paramScan/HyperParameterScan_multi.py	/^def sort(data, energies, num_events):$/;"	f
sort	keras/paramScan/HyperParameterScan_small.py	/^def sort(data, energies, num_events):$/;"	f
sort	keras/paramScan/TestingObjective.py	/^def sort(data, energies, num_events):$/;"	f
sort	scripts/GANutils.py	/^def sort(data, bins, flag=False, num_events=1000, tolerance=5):$/;"	f
sortEnergy	keras/analysis/utils/GANutils.py	/^def sortEnergy(data, ecal, energies, ang=1):$/;"	f
sortEnergy	scripts/GANutils.py	/^def sortEnergy(data, ecal, energies, ang=1):$/;"	f
sortedpath	keras/archives/analysis/PythonAnalysis.py	/^sortedpath = 'sorted_*.hdf5'$/;"	v
sp	neon/gen_data_norm.py	/^import scipy as sp$/;"	i
spectral_norm	networks/ops.py	/^def spectral_norm(w, iteration=1):$/;"	f
start	caffe/caffe_train.py	/^    start = time.time()$/;"	v
start	caffe/caffe_train.py	/^start = time.time()$/;"	v
start	keras/archives/Data_Generators/AllEnergyTrain.py	/^    start = time.time()$/;"	v
start	keras/archives/Data_Generators/GenEnergyTrain.py	/^    start = time.time()$/;"	v
start	keras/archives/analysis/analysis_fixed_cont.py	/^   start = time.time()$/;"	v
start	keras/archives/analysis/analysis_fixed_cont.py	/^   start =time.time()$/;"	v
start	keras/archives/analysis/detailed_analysis_flex.py	/^   start = time.time()$/;"	v
start	keras/archives/analysis/detailed_analysis_flex.py	/^   start =time.time()$/;"	v
start	keras/eval.py	/^  start = time.time()$/;"	v
start	keras/generate_pred.py	/^  start = time.time()$/;"	v
start	keras/misc/Gen_ecalfit2.py	/^start = time.time()$/;"	v
start	networks/test_network.py	/^            start = time.time()$/;"	v
start_snapshot	caffe/caffe_train.py	/^  start_snapshot = 0$/;"	v
stat_pos	keras/analysis/utils/ROOTutils.py	/^def stat_pos(a, pos=0):$/;"	f
stat_pos	keras/archives/RootAnalysis_multi_pions.py	/^def stat_pos(a, pos=0):$/;"	f
stat_pos	scripts/ROOTutils.py	/^def stat_pos(a, pos=0):$/;"	f
stats	keras/misc/ecal_primary.py	/^from scipy import stats$/;"	i
std	analysis/h5toroot_evc.py	/^from ROOT import TTree, TFile, AddressOf, gROOT, std, vector$/;"	i
stepsize	caffe/caffe_train.py	/^stepsize = 5000$/;"	v
str1	neon/potential_gan.py	/^str1 = dict(str_h=2, str_w=2, str_d=2)$/;"	v
str2	neon/potential_gan.py	/^str2 = dict(str_h=2, str_w=2, str_d=2)$/;"	v
str3	neon/potential_gan.py	/^str3 = dict(str_h=1, str_w=1, str_d=1)$/;"	v
structural_similarity	metrics/skim_metrics.py	/^from skimage.metrics import mean_squared_error, normalized_root_mse, peak_signal_noise_ratio, structural_similarity$/;"	i
structural_similarity	metrics/ssim.py	/^def structural_similarity(im1, im2,$/;"	f
style_mod	networks/ops.py	/^def style_mod(x, dlatent, activation, param=None):$/;"	f
sub_nets	caffe/caffe_train.py	/^sub_nets = ('generator2', 'discriminator2', 'data2')$/;"	v
sub_nets	caffe/creating_proto.py	/^sub_nets = ('generator2', 'discriminator2', 'data2')$/;"	v
subprocess	networks/test_network.py	/^import subprocess$/;"	i
sum_100	keras/misc/data_info.py	/^sum_100 = np.zeros((num_events, 3, 25))$/;"	v
sum_100	scripts/data_info.py	/^sum_100 = np.zeros((num_events, 3, 25))$/;"	v
sum_150	keras/misc/data_info.py	/^sum_150 = np.zeros((num_events, 3, 25))$/;"	v
sum_150	scripts/data_info.py	/^sum_150 = np.zeros((num_events, 3, 25))$/;"	v
sum_200	keras/misc/data_info.py	/^sum_200 = np.zeros((num_events, 3, 25))$/;"	v
sum_200	scripts/data_info.py	/^sum_200 = np.zeros((num_events, 3, 25))$/;"	v
sum_300	keras/misc/data_info.py	/^sum_300 = np.zeros((num_events, 3, 25))$/;"	v
sum_300	scripts/data_info.py	/^sum_300 = np.zeros((num_events, 3, 25))$/;"	v
sum_400	keras/misc/data_info.py	/^sum_400 = np.zeros((num_events, 3, 25))$/;"	v
sum_400	scripts/data_info.py	/^sum_400 = np.zeros((num_events, 3, 25))$/;"	v
sum_50	keras/misc/data_info.py	/^sum_50 = np.zeros((num_events, 3, 25))$/;"	v
sum_50	scripts/data_info.py	/^sum_50 = np.zeros((num_events, 3, 25))$/;"	v
sum_500	keras/misc/data_info.py	/^sum_500 = np.zeros((num_events, 3, 25))$/;"	v
sum_500	scripts/data_info.py	/^sum_500 = np.zeros((num_events, 3, 25))$/;"	v
sys	analysis/h5toroot_evc.py	/^import sys$/;"	i
sys	caffe/caffe_train.py	/^import sys$/;"	i
sys	caffe/creating_proto.py	/^import sys$/;"	i
sys	keras/AngleArch3dGAN.py	/^import sys$/;"	i
sys	keras/AngleArch3dGAN_tf2.py	/^import sys$/;"	i
sys	keras/AngleTrain3dGAN_hvd.py	/^import sys$/;"	i
sys	keras/AngleTrain3dGAN_hvd_tf2.py	/^import sys$/;"	i
sys	keras/EcalEnergyGan.py	/^import sys$/;"	i
sys	keras/EcalEnergyTrain_hvd.py	/^import sys$/;"	i
sys	keras/archives/Data_Generators/AllEnergyTrain.py	/^import sys$/;"	i
sys	keras/archives/Data_Generators/GenEnergyTrain.py	/^import sys$/;"	i
sys	keras/archives/architectures_tested/arch10.py	/^import sys$/;"	i
sys	keras/archives/architectures_tested/arch11.py	/^import sys$/;"	i
sys	keras/archives/architectures_tested/arch12.py	/^import sys$/;"	i
sys	keras/archives/architectures_tested/arch13.py	/^import sys$/;"	i
sys	keras/archives/architectures_tested/arch14.py	/^import sys$/;"	i
sys	keras/archives/architectures_tested/arch15.py	/^import sys$/;"	i
sys	keras/archives/architectures_tested/arch16.py	/^import sys$/;"	i
sys	keras/archives/architectures_tested/arch7.py	/^import sys$/;"	i
sys	keras/archives/architectures_tested/arch8.py	/^import sys$/;"	i
sys	keras/archives/architectures_tested/arch9.py	/^import sys$/;"	i
sys	keras/archives/architectures_tested/archlayer6.py	/^import sys$/;"	i
sys	keras/archives/architectures_tested/ecalvegan2.py	/^import sys$/;"	i
sys	keras/archives/architectures_tested/ecalvegan3.py	/^import sys$/;"	i
sys	keras/archives/architectures_tested/ecalvegan4.py	/^import sys$/;"	i
sys	keras/archives/architectures_tested/new_arch.py	/^import sys$/;"	i
sys	keras/archives/log/EcalEnergyGanlog.py	/^import sys$/;"	i
sys	keras/archives/log/TrainPionslog.py	/^import sys$/;"	i
sys	keras/archives/log/TrainPionslog_dual.py	/^import sys$/;"	i
sys	keras/archives/normInit/normalInit.py	/^import sys$/;"	i
sys	keras/archives/normInit/normalInitTrain.py	/^import sys$/;"	i
sys	keras/archives/train/TrainChPions.py	/^import sys$/;"	i
sys	keras/archives/train/Train_rootfit_scaled_2D.py	/^import sys$/;"	i
sys	keras/archives/train/Train_single_pass.py	/^import sys$/;"	i
sys	keras/archives/train/particle3Dtrain.py	/^import sys$/;"	i
sys	keras/eval.py	/^import sys$/;"	i
sys	keras/misc/data_info.py	/^import sys$/;"	i
sys	keras/misc/ecal_flat_python.py	/^import sys$/;"	i
sys	keras/misc/ecal_flat_root.py	/^import sys$/;"	i
sys	keras/misc/ecal_primary.py	/^import sys$/;"	i
sys	keras/misc/ecal_sum_python.py	/^import sys$/;"	i
sys	keras/paramScan/HyperParameterScan.py	/^import sys$/;"	i
sys	keras/paramScan/HyperParameterScan_multi.py	/^import sys$/;"	i
sys	keras/paramScan/HyperParameterScan_small.py	/^import sys$/;"	i
sys	keras/paramScan/TestingObjective.py	/^import sys$/;"	i
sys	keras/test.py	/^import sys$/;"	i
sys	metrics/fid.py	/^import sys$/;"	i
sys	networks/AngleGAN/discriminator.py	/^import sys$/;"	i
sys	networks/AngleGAN/generator.py	/^import sys$/;"	i
sys	plot.py	/^import sys$/;"	i
sys	scripts/data_info.py	/^import sys$/;"	i
sys	scripts/hdf_to_numpy.py	/^import sys$/;"	i
sys	scripts/main.py	/^import sys$/;"	i
tarfile	metrics/fid.py	/^import tarfile$/;"	i
tarfile	metrics/fid_new.py	/^        import tarfile$/;"	i
target	keras/archives/Data_Generators/AllEnergyTrain.py	/^    target=True$/;"	v
target	keras/archives/Data_Generators/GenEnergyTrain.py	/^    target=True$/;"	v
target	keras/validation_analysis.py	/^    target = h5f['target'][:num_events, 1]  # E_p$/;"	v
targetNorm	keras/archives/Data_Generators/AllEnergyTrain.py	/^    targetNorm=100.$/;"	v
targetNorm	keras/archives/Data_Generators/GenEnergyTrain.py	/^    targetNorm=100.$/;"	v
temp_3Ddata	neon/potential_gan.py	/^from temporary_utils import temp_3Ddata$/;"	i
temp_3Ddata	neon/temporary_utils.py	/^def temp_3Ddata():$/;"	f
tensorflow	keras/AngleTrain3dGAN_hvd_tf2.py	/^import horovod.tensorflow.keras as hvd$/;"	i
test	metrics/fid.py	/^def test():$/;"	f
test	neon/potential_gan.py	/^test =  test.reshape((100, 25, 25, 25))$/;"	v
test	neon/potential_gan.py	/^test = my_generator.get_outputs(inference_set)$/;"	v
test	neon/potential_gan.py	/^test = np.float32(test*max_elem + mean)$/;"	v
test_file	keras/archives/Data_Generators/AllEnergyTrain.py	/^    test_file="\/tmp\/gulrukh-CaloDNN-LCD-TestEvent-Cache.h5"$/;"	v
test_file	keras/archives/Data_Generators/GenEnergyTrain.py	/^    test_file="\/tmp\/gulrukh-CaloDNN-LCD-TestEvent-Cache.h5"$/;"	v
test_history	keras/archives/Data_Generators/AllEnergyTrain.py	/^    test_history = defaultdict(list)$/;"	v
test_history	keras/archives/Data_Generators/GenEnergyTrain.py	/^    test_history = defaultdict(list)$/;"	v
test_history	keras/archives/normInit/normalInitTrain.py	/^    test_history = defaultdict(list)$/;"	v
test_history	keras/archives/train/particle3Dtrain.py	/^    test_history = defaultdict(list)$/;"	v
tf	dataset.py	/^import tensorflow as tf$/;"	i
tf	generate.py	/^import tensorflow as tf$/;"	i
tf	keras/AngleArch3dGAN.py	/^import tensorflow as tf$/;"	i
tf	keras/AngleArch3dGAN_tf2.py	/^import tensorflow as tf$/;"	i
tf	keras/AngleTrain3dGAN_hvd.py	/^import tensorflow as tf$/;"	i
tf	keras/AngleTrain3dGAN_hvd_tf2.py	/^import tensorflow as tf$/;"	i
tf	keras/EcalEnergyTrain_hvd.py	/^    import tensorflow as tf$/;"	i
tf	keras/analysis/utils/GANutils.py	/^import tensorflow as tf$/;"	i
tf	keras/archives/Data_Generators/AllEnergyTrain.py	/^    import tensorflow as tf$/;"	i
tf	keras/archives/Data_Generators/GenEnergyTrain.py	/^    import tensorflow as tf$/;"	i
tf	keras/archives/log/EcalEnergyGanlog.py	/^import tensorflow as tf$/;"	i
tf	keras/archives/log/TrainPionslog.py	/^    import tensorflow as tf$/;"	i
tf	keras/archives/log/TrainPionslog_dual.py	/^    import tensorflow as tf$/;"	i
tf	keras/archives/normInit/normalInitTrain.py	/^    import tensorflow as tf$/;"	i
tf	keras/archives/train/TrainChPions.py	/^    import tensorflow as tf$/;"	i
tf	keras/archives/train/Train_rootfit_scaled_2D.py	/^    import tensorflow as tf$/;"	i
tf	keras/archives/train/Train_single_pass.py	/^    import tensorflow as tf$/;"	i
tf	keras/archives/train/particle3Dtrain.py	/^    import tensorflow as tf$/;"	i
tf	keras/paramScan/HyperParameterScan.py	/^import tensorflow as tf$/;"	i
tf	keras/paramScan/HyperParameterScan_multi.py	/^import tensorflow as tf$/;"	i
tf	keras/paramScan/HyperParameterScan_small.py	/^import tensorflow as tf$/;"	i
tf	keras/paramScan/TestingObjective.py	/^import tensorflow as tf$/;"	i
tf	keras/test.py	/^    import tensorflow as tf$/;"	i
tf	main.py	/^import tensorflow as tf$/;"	i
tf	metrics/fid.py	/^import tensorflow as tf$/;"	i
tf	metrics/fid_new.py	/^import tensorflow as tf$/;"	i
tf	networks/AngleGAN/discriminator.py	/^import tensorflow as tf$/;"	i
tf	networks/AngleGAN/generator.py	/^import tensorflow as tf$/;"	i
tf	networks/loss.py	/^import tensorflow as tf$/;"	i
tf	networks/ops.py	/^import tensorflow as tf$/;"	i
tf	networks/pgan/discriminator.py	/^import tensorflow as tf $/;"	i
tf	networks/pgan/loss_utils.py	/^import tensorflow as tf$/;"	i
tf	networks/test_network.py	/^import tensorflow as tf$/;"	i
tf	plot.py	/^import tensorflow as tf$/;"	i
tf	scripts/GANutils.py	/^import tensorflow as tf$/;"	i
tf	scripts/main.py	/^import tensorflow as tf$/;"	i
tf	scripts/sara_main.py	/^import tensorflow as tf$/;"	i
tf	utils.py	/^import tensorflow as tf$/;"	i
tf_debug	main.py	/^from tensorflow.python import debug as tf_debug$/;"	i
the	networks/loss.py	/^from networks.pgan.loss_utils import ecal_sum, ecal_angle # physics functions used for training the discriminator (should be in conditional lambda layer)$/;"	i
time	caffe/caffe_train.py	/^import time$/;"	i
time	caffe/creating_proto.py	/^import time$/;"	i
time	dataset.py	/^import time$/;"	i
time	generate.py	/^import time$/;"	i
time	keras/AngleTrain3dGAN_hvd.py	/^import time$/;"	i
time	keras/AngleTrain3dGAN_hvd_tf2.py	/^import time$/;"	i
time	keras/EcalEnergyTrain_hvd.py	/^import time$/;"	i
time	keras/analysis/RootAnalysis.py	/^import time$/;"	i
time	keras/analysis/utils/GANutils.py	/^import time$/;"	i
time	keras/analysis/utils/RootPlotsGAN.py	/^import time$/;"	i
time	keras/archives/Data_Generators/AllEnergyTrain.py	/^import time$/;"	i
time	keras/archives/Data_Generators/GenEnergyTrain.py	/^import time$/;"	i
time	keras/archives/RootAnalysis_multi_pions.py	/^import time$/;"	i
time	keras/archives/analysis/PythonAnalysis.py	/^import time$/;"	i
time	keras/archives/analysis/analysis_fixed_cont.py	/^import time$/;"	i
time	keras/archives/analysis/detailed_analysis_flex.py	/^import time$/;"	i
time	keras/archives/analysis/fixed_analysis_flex.py	/^import time$/;"	i
time	keras/archives/log/TrainPionslog.py	/^import time$/;"	i
time	keras/archives/log/TrainPionslog_dual.py	/^import time$/;"	i
time	keras/archives/train/TrainChPions.py	/^import time$/;"	i
time	keras/archives/train/Train_rootfit_scaled_2D.py	/^import time$/;"	i
time	keras/archives/train/Train_single_pass.py	/^import time$/;"	i
time	keras/eval.py	/^import time $/;"	i
time	keras/eval.py	/^import time$/;"	i
time	keras/generate_pred.py	/^import time$/;"	i
time	keras/misc/Gen_ecalRatio_multi.py	/^import time$/;"	i
time	keras/misc/Gen_ecalRatio_stat.py	/^import time$/;"	i
time	keras/misc/Gen_ecalfit2.py	/^import time$/;"	i
time	keras/paramScan/HyperParameterScan.py	/^import time$/;"	i
time	keras/paramScan/HyperParameterScan_multi.py	/^import time$/;"	i
time	keras/paramScan/HyperParameterScan_small.py	/^import time$/;"	i
time	keras/paramScan/TestingObjective.py	/^import time$/;"	i
time	keras/test.py	/^import time$/;"	i
time	main.py	/^import time$/;"	i
time	networks/pgan/generator.py	/^import time$/;"	i
time	networks/test_network.py	/^import time$/;"	i
time	plot.py	/^import time$/;"	i
time	scripts/GANutils.py	/^import time$/;"	i
time	scripts/RootPlotsGAN.py	/^import time$/;"	i
time	scripts/main.py	/^import time$/;"	i
time	scripts/sara_main.py	/^import time$/;"	i
timeline	keras/EcalEnergyTrain_hvd.py	/^from tensorflow.python.client import timeline$/;"	i
tlab	keras/AngleTrain3dGAN_hvd.py	/^    tlab = True$/;"	v
tlab	keras/AngleTrain3dGAN_hvd.py	/^    tlab= False$/;"	v
tlab	keras/AngleTrain3dGAN_hvd_tf2.py	/^    tlab = True$/;"	v
tlab	keras/AngleTrain3dGAN_hvd_tf2.py	/^    tlab= False$/;"	v
to	keras/EcalEnergyTrain_hvd.py	/^    to = timeline.Timeline(run_metadata.step_stats)$/;"	v
to_rgb	networks/ops.py	/^def to_rgb(x, channels=1):$/;"	f
tolerance	keras/archives/analysis/analysis_fixed_cont.py	/^tolerance = 5$/;"	v
tolerance	keras/archives/analysis/detailed_analysis_flex.py	/^tolerance = 5$/;"	v
total	keras/misc/result_fit.py	/^total = np.zeros((num_weights))$/;"	v
tqdm	generate.py	/^from tqdm import tqdm$/;"	i
trace	keras/EcalEnergyTrain_hvd.py	/^    trace = to.generate_chrome_trace_format()$/;"	v
trace_sqrt_product	metrics/fid.py	/^def trace_sqrt_product(sigma, sigma_v):$/;"	f
train	networks/pgan/discriminator.py	/^        train = optim.minimize(loss)$/;"	v
train	networks/pgan/generator.py	/^        train = optim.minimize(loss)$/;"	v
train_file	keras/archives/Data_Generators/AllEnergyTrain.py	/^    train_file="\/tmp\/gulrukh-CaloDNN-LCD-TrainEvent-Cache.h5"$/;"	v
train_file	keras/archives/Data_Generators/GenEnergyTrain.py	/^    train_file="\/tmp\/gulrukh-CaloDNN-LCD-TrainEvent-Cache.h5"$/;"	v
train_history	keras/archives/Data_Generators/AllEnergyTrain.py	/^    train_history = defaultdict(list)$/;"	v
train_history	keras/archives/Data_Generators/GenEnergyTrain.py	/^    train_history = defaultdict(list)$/;"	v
train_history	keras/archives/normInit/normalInitTrain.py	/^    train_history = defaultdict(list)$/;"	v
train_history	keras/archives/train/particle3Dtrain.py	/^    train_history = defaultdict(list)$/;"	v
train_set	neon/potential_gan.py	/^train_set = ArrayIterator(X=X_train, y=y_train, nclass=2, lshape=(1, 25, 25, 25))$/;"	v
train_test_split	keras/EcalEnergyTrain_hvd.py	/^    from sklearn.model_selection import train_test_split$/;"	i
train_test_split	keras/archives/Data_Generators/AllEnergyTrain.py	/^    from sklearn.cross_validation import train_test_split$/;"	i
train_test_split	keras/archives/Data_Generators/GenEnergyTrain.py	/^    from sklearn.cross_validation import train_test_split$/;"	i
train_test_split	keras/archives/log/TrainPionslog.py	/^    from sklearn.cross_validation import train_test_split$/;"	i
train_test_split	keras/archives/log/TrainPionslog_dual.py	/^    from sklearn.cross_validation import train_test_split$/;"	i
train_test_split	keras/archives/normInit/normalInitTrain.py	/^    from sklearn.cross_validation import train_test_split$/;"	i
train_test_split	keras/archives/train/TrainChPions.py	/^    from sklearn.cross_validation import train_test_split$/;"	i
train_test_split	keras/archives/train/Train_rootfit_scaled_2D.py	/^    from sklearn.cross_validation import train_test_split$/;"	i
train_test_split	keras/archives/train/Train_single_pass.py	/^    from sklearn.cross_validation import train_test_split$/;"	i
train_test_split	keras/archives/train/particle3Dtrain.py	/^    from sklearn.cross_validation import train_test_split$/;"	i
train_test_split	keras/paramScan/HyperParameterScan.py	/^from sklearn.cross_validation import train_test_split$/;"	i
train_test_split	keras/paramScan/HyperParameterScan_multi.py	/^from sklearn.cross_validation import train_test_split$/;"	i
train_test_split	keras/paramScan/HyperParameterScan_small.py	/^from sklearn.cross_validation import train_test_split$/;"	i
train_test_split	keras/paramScan/TestingObjective.py	/^from sklearn.cross_validation import train_test_split$/;"	i
train_test_split	keras/test.py	/^    from sklearn.cross_validation import train_test_split$/;"	i
train_test_split	neon/potential_gan.py	/^from sklearn.cross_validation import train_test_split$/;"	i
training	networks/loss.py	/^from networks.pgan.loss_utils import ecal_sum, ecal_angle # physics functions used for training the discriminator (should be in conditional lambda layer)$/;"	i
trick	keras/archives/Data_Generators/AllEnergyTrain.py	/^            trick = np.ones(2 * batch_size)$/;"	v
trick	keras/archives/Data_Generators/AllEnergyTrain.py	/^            trick = np.ones(batch_size)$/;"	v
trick	keras/archives/Data_Generators/GenEnergyTrain.py	/^            trick = np.ones(2 * batch_size)$/;"	v
trick	keras/archives/Data_Generators/GenEnergyTrain.py	/^            trick = np.ones(batch_size)$/;"	v
trick	keras/archives/normInit/normalInitTrain.py	/^            trick = np.ones(batch_size)$/;"	v
trick	keras/archives/normInit/normalInitTrain.py	/^        trick = np.ones(2 * nb_test)$/;"	v
trick	keras/archives/train/particle3Dtrain.py	/^            trick = np.ones(batch_size)$/;"	v
trick	keras/archives/train/particle3Dtrain.py	/^        trick = np.ones(2 * nb_test)$/;"	v
umath	keras/analysis/RootAnalysis.py	/^import numpy.core.umath_tests as umath$/;"	i
umath	keras/analysis/utils/GANutils.py	/^import numpy.core.umath_tests as umath$/;"	i
umath	keras/analysis/utils/RootPlotsGAN.py	/^import numpy.core.umath_tests as umath$/;"	i
umath	keras/archives/RootAnalysis_multi_pions.py	/^import numpy.core.umath_tests as umath$/;"	i
umath	keras/archives/analysis/PythonAnalysis.py	/^import numpy.core.umath_tests as umath$/;"	i
umath	keras/paramScan/HyperParameterScan.py	/^import numpy.core.umath_tests as umath$/;"	i
umath	keras/paramScan/HyperParameterScan_multi.py	/^import numpy.core.umath_tests as umath$/;"	i
umath	keras/paramScan/HyperParameterScan_small.py	/^import numpy.core.umath_tests as umath$/;"	i
umath	keras/paramScan/TestingObjective.py	/^import numpy.core.umath_tests as umath$/;"	i
umath	scripts/GANutils.py	/^import numpy.core.umath_tests as umath$/;"	i
umath	scripts/RootPlotsGAN.py	/^import numpy.core.umath_tests as umath$/;"	i
uniform_box_sampler	metrics/fid.py	/^from utils import uniform_box_sampler$/;"	i
uniform_box_sampler	metrics/swd.py	/^from utils import uniform_box_sampler$/;"	i
uniform_box_sampler	utils.py	/^def uniform_box_sampler(arr, min_width, max_width):$/;"	f
uniform_filter	metrics/ssim.py	/^from scipy.ndimage import uniform_filter, gaussian_filter$/;"	i
update_decrease_exp	utils.py	/^        def update_decrease_exp():$/;"	f	function:lr_update
update_decrease_lin	utils.py	/^        def update_decrease_lin():$/;"	f	function:lr_update
update_increase_exp	utils.py	/^        def update_increase_exp():$/;"	f	function:lr_update
update_increase_lin	utils.py	/^        def update_increase_lin ():$/;"	f	function:lr_update
upscale3d	networks/ops.py	/^def upscale3d(x, factor=2):$/;"	f
urllib	metrics/fid.py	/^from six.moves import urllib$/;"	i
used	networks/loss.py	/^from networks.pgan.loss_utils import bce, mae, mape  # loss functions used for loss_fn='anglegan'$/;"	i
used	networks/loss.py	/^from networks.pgan.loss_utils import ecal_sum, ecal_angle # physics functions used for training the discriminator (should be in conditional lambda layer)$/;"	i
utility	keras/analysis/utils/RootPlotsGAN.py	/^import ROOTutils as my # common utility functions for root$/;"	i
utility	scripts/RootPlotsGAN.py	/^import ROOTutils as my # common utility functions for root$/;"	i
utils	keras/AngleTrain3dGAN_hvd.py	/^import analysis.utils.GANutils as gan$/;"	i
utils	keras/AngleTrain3dGAN_hvd_tf2.py	/^import analysis.utils.GANutils as gan$/;"	i
utils	keras/EcalEnergyTrain_hvd.py	/^import analysis.utils.GANutils as gan # some common functions for gan$/;"	i
utils	keras/test.py	/^import analysis.utils.GANutils as gan # some common functions for gan$/;"	i
utils	scripts/main.py	/^import analysis.utils.GANutils as gan$/;"	i
valid_set	neon/potential_gan.py	/^valid_set = ArrayIterator(X=X_test, y=y_test, nclass=2)$/;"	v
var	keras/archives/analysis/analysis_fixed_cont.py	/^var = {}$/;"	v
var	keras/archives/analysis/detailed_analysis_flex.py	/^var = {}$/;"	v
var	keras/archives/analysis/fixed_analysis_flex.py	/^var = {}$/;"	v
var	keras/test.py	/^       var = gan.sortEnergy([X_test, Y_test], ecal_test, energies, ang=0)$/;"	v
vec_E	analysis/h5toroot_evc.py	/^vec_E = ROOT.std.vector(float)()$/;"	v
vec_x	analysis/h5toroot_evc.py	/^vec_x = ROOT.std.vector(int)()$/;"	v
vec_y	analysis/h5toroot_evc.py	/^vec_y = ROOT.std.vector(int)()$/;"	v
vec_z	analysis/h5toroot_evc.py	/^vec_z = ROOT.std.vector(int)()$/;"	v
vector	analysis/h5toroot_evc.py	/^from ROOT import TTree, TFile, AddressOf, gROOT, std, vector$/;"	i
vegantrain	keras/paramScan/HyperParameterScan.py	/^def vegantrain(d, g, X_train, y_train, ecal_train, epochs=10, batch_size=128, latent_size=200, gen_weight=6, aux_weight=0.2, ecal_weight=0.1, lr=0.001, rho=0.9, decay=0.0):$/;"	f
vegantrain	keras/paramScan/HyperParameterScan_multi.py	/^def vegantrain(d, g, Trainfiles, epochs=5, batch_size=128, latent_size=200, gen_weight=6, aux_weight=0.2, ecal_weight=0.1, lr=0.001, rho=0.9, decay=0.0, g_weights='gweights.h5', d_weights='dweights.h5'):$/;"	f
vegantrain	keras/paramScan/HyperParameterScan_small.py	/^def vegantrain(d, g, Trainfiles, epochs=10, batch_size=128, latent_size=200, gen_weight=6, aux_weight=0.2, ecal_weight=0.1, lr=0.001, rho=0.9, decay=0.0):$/;"	f
verbose	keras/EcalEnergyTrain_hvd.py	/^    verbose = params.verbose$/;"	v
verbose	keras/archives/Data_Generators/AllEnergyTrain.py	/^    verbose = 'false'$/;"	v
verbose	keras/archives/Data_Generators/GenEnergyTrain.py	/^    verbose = 'false'$/;"	v
verbose	keras/archives/log/TrainPionslog.py	/^    verbose = params.verbose$/;"	v
verbose	keras/archives/log/TrainPionslog_dual.py	/^    verbose = params.verbose$/;"	v
verbose	keras/archives/normInit/normalInitTrain.py	/^    verbose = 'false'$/;"	v
verbose	keras/archives/train/Train_rootfit_scaled_2D.py	/^    verbose = params.verbose$/;"	v
verbose	keras/archives/train/Train_single_pass.py	/^    verbose = params.verbose$/;"	v
verbose	keras/archives/train/particle3Dtrain.py	/^    verbose = 'true'$/;"	v
verbose	keras/test.py	/^    verbose = params.verbose$/;"	v
verbose	main.py	/^        verbose = True$/;"	v
verbose	main.py	/^        verbose = hvd.rank() == 0$/;"	v
volume1	metrics/skim_metrics.py	/^    volume1 = (np.clip(np.random.normal(size=(1, 1, 16, 64, 64)), -1, 2) * 1024).astype(np.int16)$/;"	v
volume2	metrics/skim_metrics.py	/^    volume2 = (np.clip(np.random.normal(size=(1, 1, 16, 64, 64)), -1, 2) * 1024).astype(np.int16)$/;"	v
volumes_fake	metrics/fid_new.py	/^        volumes_fake = ((np.random.rand(1, 1, 16, 64, 64) * 3072) - 1024).astype(int)$/;"	v
volumes_real	metrics/fid_new.py	/^        volumes_real = ((np.random.rand(1, 1, 16, 64, 64) * 3072) - 1024).astype(int)$/;"	v
warmup_epochs	keras/EcalEnergyTrain_hvd.py	/^    warmup_epochs = params.warmupepochs$/;"	v
warmup_epochs	keras/test.py	/^    warmup_epochs = params.warmupepochs$/;"	v
warn	metrics/ssim.py	/^from skimage._shared.utils import warn, check_shape_equality$/;"	i
warn	metrics/ssim.py	/^from warnings import warn$/;"	i
warnings	metrics/fid_new.py	/^import warnings$/;"	i
wass	scripts/RootPlotsGAN.py	/^from scipy.stats import wasserstein_distance as wass$/;"	i
weight_decay	caffe/caffe_train.py	/^weight_decay = 0.0005$/;"	v
weightdir	keras/EcalEnergyTrain_hvd.py	/^    weightdir = params.weightsdir$/;"	v
weightdir	keras/archives/log/TrainPionslog.py	/^    weightdir = 'pionweights2'$/;"	v
weightdir	keras/archives/log/TrainPionslog_dual.py	/^    weightdir = 'pionweights3'$/;"	v
weightdir	keras/archives/train/Train_rootfit_scaled_2D.py	/^    weightdir = params.weightsdir$/;"	v
weightdir	keras/archives/train/Train_single_pass.py	/^    weightdir = 'veganweights_onepass'$/;"	v
weightdir	keras/test.py	/^    weightdir = params.weightsdir$/;"	v
weightpath	keras/paramScan/HyperParameterScan.py	/^    weightpath = "\/afs\/cern.ch\/work\/g\/gkhattak\/weights\/arch16weights"$/;"	v
wrap	keras/archives/Data_Generators/GenEnergyTrain.py	/^                          wrap=True,$/;"	v
x	networks/pgan/discriminator.py	/^        x = tf.random.normal(shape=shape)$/;"	v
x	networks/pgan/generator.py	/^        x = tf.random.normal(shape=shape)$/;"	v
x	scripts/gaussian.py	/^x = np.arange(0, 25, 1)$/;"	v
x_new	neon/potential_gan.py	/^x_new = np.random.randn(100, latent_size) $/;"	v
xfile	keras/archives/analysis/PythonAnalysis.py	/^   xfile = "xmoment" + str(energy) + "_"$/;"	v
xscale	keras/EcalEnergyTrain_hvd.py	/^    xscale = params.xscale$/;"	v
xscale	keras/archives/log/TrainPionslog.py	/^    xscale = 1 $/;"	v
xscale	keras/archives/log/TrainPionslog_dual.py	/^    xscale = 1 $/;"	v
xscale	keras/archives/train/Train_rootfit_scaled_2D.py	/^    xscale = params.xscale$/;"	v
xscale	keras/archives/train/Train_single_pass.py	/^    xscale = 1$/;"	v
xscale	keras/test.py	/^    xscale = params.xscale$/;"	v
y	keras/archives/Data_Generators/AllEnergyTrain.py	/^            y = np.array([1] * batch_size + [0] * batch_size)$/;"	v
y	keras/archives/Data_Generators/GenEnergyTrain.py	/^            y = np.array([1] * batch_size + [0] * batch_size)$/;"	v
y	keras/archives/analysis/analysis_fixed_cont.py	/^y=np.array(e[:n_jets,1])$/;"	v
y	keras/archives/analysis/detailed_analysis_flex.py	/^y=np.array(e[:n_jets,1])$/;"	v
y	keras/archives/analysis/fixed_analysis_flex.py	/^         y=np.array(e[:num_events_act,1])$/;"	v
y	keras/archives/normInit/normalInitTrain.py	/^        y = np.array([1] * nb_test + [0] * nb_test)$/;"	v
y	keras/archives/normInit/normalInitTrain.py	/^    y=(np.array(e[:,1]))$/;"	v
y	keras/archives/train/particle3Dtrain.py	/^        y = np.array([1] * nb_test + [0] * nb_test)$/;"	v
y	networks/pgan/discriminator.py	/^        y = discriminator(x, 0.5, phase, num_phases, base_dim, latent_dim, activation='leaky_relu', param=0.3)$/;"	v
y	networks/pgan/generator.py	/^        y = generator(x, 0.5, phase, num_phases, base_dim, base_shape, activation='leaky_relu',$/;"	v
y	scripts/gaussian.py	/^y = np.arange(0, 25, 1)$/;"	v
y_test	keras/archives/normInit/normalInitTrain.py	/^    y_test = y_test.astype(np.float32)$/;"	v
y_test	keras/archives/normInit/normalInitTrain.py	/^    y_test=np.array(y_test)\/100$/;"	v
y_train	keras/archives/normInit/normalInitTrain.py	/^    y_train = y_train.astype(np.float32)$/;"	v
y_train	keras/archives/normInit/normalInitTrain.py	/^    y_train= np.array(y_train)\/100$/;"	v
yfile	keras/archives/analysis/PythonAnalysis.py	/^   yfile = "ymoment" + str(energy) + "_"$/;"	v
z	scripts/gaussian.py	/^z = np.arange(0, 25, 1)$/;"	v
z1	keras/misc/ecal_primary.py	/^z1 = np.polyfit(Y, Data, 2)$/;"	v
z2	keras/misc/ecal_primary.py	/^z2 = np.polyfit(Y, Data, 3)$/;"	v
z3	keras/misc/ecal_primary.py	/^z3 = [0, 2, 0]$/;"	v
z_test	scripts/RootPlotsGAN.py	/^def z_test(array1, array2):$/;"	f
zfile	keras/archives/analysis/PythonAnalysis.py	/^   zfile = "zmoment" + str(energy) + "_"$/;"	v
zoom	scripts/main.py	/^from scipy.ndimage import zoom$/;"	i
